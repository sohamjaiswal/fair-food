// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";

export class Transaction {
    amount: i64 = 0; 
    buyer: wasmlib.ScAgentID = new wasmlib.ScAgentID(); 
    farmer: wasmlib.ScAddress = new wasmlib.ScAddress(); 
    retailer: wasmlib.ScAddress = new wasmlib.ScAddress(); 

    static fromBytes(bytes: u8[]): Transaction {
        let decode = new wasmlib.BytesDecoder(bytes);
        let data = new Transaction();
        data.amount = decode.int64();
        data.buyer = decode.agentID();
        data.farmer = decode.address();
        data.retailer = decode.address();
        decode.close();
        return data;
    }

    bytes(): u8[] {
        return new wasmlib.BytesEncoder().
		    int64(this.amount).
		    agentID(this.buyer).
		    address(this.farmer).
		    address(this.retailer).
            data();
    }
}

export class ImmutableTransaction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    value(): Transaction {
        return Transaction.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}

export class MutableTransaction {
    objID: i32;
    keyID: wasmlib.Key32;

    constructor(objID: i32, keyID: wasmlib.Key32) {
        this.objID = objID;
        this.keyID = keyID;
    }

    exists(): boolean {
        return wasmlib.exists(this.objID, this.keyID, wasmlib.TYPE_BYTES);
    }

    setValue(value: Transaction): void {
        wasmlib.setBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES, value.bytes());
    }

    value(): Transaction {
        return Transaction.fromBytes(wasmlib.getBytes(this.objID, this.keyID, wasmlib.TYPE_BYTES));
    }
}
