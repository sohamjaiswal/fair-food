{"version":3,"file":"assemblyscript.js","mappings":"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GAAS,OAAO,GAMjF,OAAO,EA1TT,gB,2HC7WA,SAAYre,GACV,+CACA,mDACA,yCACA,6DACA,qGACA,iHACA,iHACA,mHACA,qHACA,uCACA,uHACA,iMACA,iFACA,2FACA,+DACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,2FACA,uEACA,mDACA,+EACA,mGACA,uKACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,uFACA,yDACA,uGACA,qHACA,yEACA,yLACA,2GACA,+KACA,uIACA,uIACA,+GACA,iGACA,yHACA,2EACA,qIACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,kFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,sJACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,oHACA,8GACA,sHACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,8FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MAnLF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAuL1B,kCAAuCuuD,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO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CR,IAAI,EAAA/9B,SAAS9V,GAAS0Y,WAI/B,oBAAyB1Y,GACvB,OAAO,EAAA+wC,WAAWG,MAAMlxC,IAI1B,oBAAyBA,GACvB,OAAO,EAAAuxC,WAAWL,MAAMlxC,IAI1B,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,eACS,EAAAygD,KAAAA,G,u9CCrST,eACA,SACA,SAiCA,IAAiBv7D,EAkBLoyB,EAmBAvS,EAgFAjiB,EAoRA6B,EAq9EAogD,GA91FZ,SAAiB7/C,GACF,EAAAob,KAAgB,EAChB,EAAAusC,YAAuB,EACvB,EAAA1nD,IAAe,EACf,EAAAkB,IAAe,EACf,EAAAmgB,IAAe,EACf,EAAAG,IAAe,EACf,EAAA4K,KAAgB,EAChB,EAAAC,QAAmB,EACnB,EAAAC,UAAqB,EACrB,EAAAC,OAAkB,EAClB,EAAAC,MAAiB,GACjB,EAAAC,OAAkB,GAClB,EAAAC,QAAmB,GACnB,EAAA6uC,MAAiB,EAdhC,CAAiBx7D,EAAA,EAAAA,UAAA,EAAAA,QAAO,KAkBxB,SAAYoyB,GACV,iBACA,yBACA,uCACA,2BACA,mBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,kBACA,8BACA,4DACA,qBAfF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAmBxB,SAAYvS,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,gCACA,gCACA,kBACA,kCACA,8BACA,sCACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,8CACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,sBACA,0BACA,sBACA,kBACA,sBACA,0BACA,8BACA,oCACA,wBACA,wBACA,0BACA,0BACA,0BACA,oBACA,4BACA,wBACA,8BACA,8BACA,8BACA,4BACA,4BACA,4BACA,4BACA,8BACA,sBAnEF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aA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,EAAMl1D,IAChC,GAAY,QAARlS,EAAgB,OAAOonE,EAAM+oC,KACjC,GAAY,UAARnwG,EAAkB,OAAOonE,EAAMgZ,OACnC,MAEF,KAAK,IACH,GAAY,OAARpgF,EAAe,OAAOonE,EAAM8nC,IAChC,GAAY,QAARlvG,EAAgB,OAAOonE,EAAM90D,KACjC,MAEF,KAAK,IACH,GAAY,SAARtS,EAAiB,OAAOonE,EAAM70D,MAClC,GAAY,QAARvS,EAAgB,OAAOonE,EAAMwoE,KACjC,MAEF,KAAK,IACH,GAAY,SAAR5vI,EAAiB,OAAOonE,EAAMk1C,MAItC,OAAOl1C,EAAMkuD,QAGf,SAAgBua,EAAsBz+B,GACpC,OAAQA,GACN,KAAKhqC,EAAMzP,SACX,KAAKyP,EAAMX,GACX,KAAKW,EAAMv6D,YACX,KAAKu6D,EAAMqkB,QACX,KAAKrkB,EAAMm1C,OACX,KAAKn1C,EAAM8xC,KACX,KAAK9xC,EAAMj2D,IACX,KAAKi2D,EAAMlP,IACX,KAAKkP,EAAMp6D,WACX,KAAKo6D,EAAMooE,GACX,KAAKpoE,EAAMqoE,MACX,KAAKroE,EAAMsoE,OACX,KAAKtoE,EAAMjV,UACX,KAAKiV,EAAMj/D,KACX,KAAKi/D,EAAM1W,SACX,KAAK0W,EAAMjP,IACX,KAAKiP,EAAM+oC,KACX,KAAK/oC,EAAM90D,KAAM,OAAO,EACxB,QAAS,OAAO,IAnSpB,SAAY80D,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCA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I,EACpC,OAAO1oI,EAAetX,UAAU,EAAG+X,GAGvC,MAAO,IA3GT,kBAoFA,uBAA4BT,EAAwB6oI,GAClD,OAAI7oI,EAAe8C,WAAW,QACrB9C,EAEF6C,EACL+lI,EAAQC,GAAU,EAAAloI,eAAiBX,IAKvC,a,4PC3Ga,EAAA8oI,WAAa,QAEb,EAAApyD,UAAY,QAEZ,EAAAqyD,YAAc,QAEd,EAAAtyD,aAAe,QAEf,EAAAuyD,WAAa,QAEb,EAAAzyD,cAAgB,QAEhB,EAAAC,WAAa,QAEb,EAAAyyD,YAAc,QAEd,EAAAzxD,YAAc,OAG3B,IAAI0xD,GAAgB,EAGpB,6BACE,OAAOA,GAIT,4BAAiCC,GAG/B,OADAD,EAAgBC,EADCA,GAMnB,oBAAyBj3I,EAAck3I,GACrC,OAAOF,EAAgBE,EAAQl3I,EAAO,EAAAslF,YAActlF,I,yBCyItD,SAAgBmwI,EAAe30C,GAC7B,OAAOA,GAAK,IAAeA,GAAK,G,iNA7KlC,SAAkB27C,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B37C,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,mBAKA,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,sBAA2BA,GACzB,OAAO20C,EAAe30C,KAAY,GAAJA,IAAW,KAAmB,GAAJA,IAAW,KAIrE,6BAAkCvX,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkCuX,GAChC,IAAI47C,EAAS,GAAJ57C,EACT,OAAO47C,GAAM,IAAcA,GAAM,KACrB,IAAL57C,GACK,IAALA,GACAA,EAAI,SA8KqBvX,EA9KYuX,GA+K9B,KAAOvX,EAAO,QACrBozD,EAAmBpzD,EAAaqzD,IAFzC,IAAkCrzD,GA1KlC,4BAAiCuX,GAC/B,MAAM47C,EAAS,GAAJ57C,EACX,OAAO47C,GAAM,IAAcA,GAAM,KAC1B57C,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBvX,EAzKYuX,GA0K7B,KAAOvX,EAAO,QACrBozD,EAAmBpzD,EAAaszD,IAFzC,IAAiCtzD,GArKjC,MAAMqzD,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MA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","sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/extra/ast.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/passes/findusedlocals.ts","webpack://assemblyscript/./src/passes/pass.ts","webpack://assemblyscript/./src/passes/rtrace.ts","webpack://assemblyscript/./src/passes/shadowstack.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/terminal.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/external umd \"binaryen\"","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/webpack/runtime/global","webpack://assemblyscript/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__725__) {\nreturn ","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\nimport {\n  ExpressionRef\n} from \"./module\";\n\nimport {\n  Type\n} from \"./types\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n  COMPILED,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createTemplateLiteralExpression(\n    tag: Expression | null,\n    parts: string[],\n    rawParts: string[],\n    expressions: Expression[],\n    range: Range\n  ): TemplateLiteralExpression {\n    return new TemplateLiteralExpression(tag, parts, rawParts, expressions, range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  static createCompiledExpression(\n    expr: ExpressionRef,\n    type: Type,\n    range: Range\n  ): Expression {\n    return new CompiledExpression(expr, type, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  TEMPLATE,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a template literal expression. */\nexport class TemplateLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Tag expression, if any. */\n    public tag: Expression | null,\n    /** String parts. */\n    public parts: string[],\n    /** Raw string parts. */\n    public rawParts: string[],\n    /** Expression parts. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.TEMPLATE, range);\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n/** Represents a special pre-compiled expression. If the expression has side-effects, special care has to be taken. */\nexport class CompiledExpression extends Expression {\n  constructor(\n    /** Compiled expression. */\n    public expr: ExpressionRef,\n    /** Type of the compiled expression. */\n    public type: Type,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMPILED, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  SIMDLoadOp,\n  SIMDLoadStoreLaneOp,\n  RefIsOp,\n  TypeRef,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  findUsedLocals,\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const add = \"~lib/builtins/add\";\n  export const sub = \"~lib/builtins/sub\";\n  export const mul = \"~lib/builtins/mul\";\n  export const div = \"~lib/builtins/div\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_add = \"~lib/builtins/i32.add\";\n  export const i64_add = \"~lib/builtins/i64.add\";\n  export const f32_add = \"~lib/builtins/f32.add\";\n  export const f64_add = \"~lib/builtins/f64.add\";\n  export const i32_sub = \"~lib/builtins/i32.sub\";\n  export const i64_sub = \"~lib/builtins/i64.sub\";\n  export const f32_sub = \"~lib/builtins/f32.sub\";\n  export const f64_sub = \"~lib/builtins/f64.sub\";\n  export const i32_mul = \"~lib/builtins/i32.mul\";\n  export const i64_mul = \"~lib/builtins/i64.mul\";\n  export const f32_mul = \"~lib/builtins/f32.mul\";\n  export const f64_mul = \"~lib/builtins/f64.mul\";\n  export const i32_div_s = \"~lib/builtins/i32.div_s\";\n  export const i32_div_u = \"~lib/builtins/i32.div_u\";\n  export const i64_div_s = \"~lib/builtins/i64.div_s\";\n  export const i64_div_u = \"~lib/builtins/i64.div_u\";\n  export const f32_div = \"~lib/builtins/f32.div\";\n  export const f64_div = \"~lib/builtins/f64.div\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load_zero = \"~lib/builtins/v128.load_zero\";\n  export const v128_load_lane = \"~lib/builtins/v128.load_lane\";\n  export const v128_store_lane = \"~lib/builtins/v128.store_lane\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_load8x8_s = \"~lib/builtins/v128.load8x8_s\";\n  export const v128_load8x8_u = \"~lib/builtins/v128.load8x8_u\";\n  export const v128_load16x4_s = \"~lib/builtins/v128.load16x4_s\";\n  export const v128_load16x4_u = \"~lib/builtins/v128.load16x4_u\";\n  export const v128_load32x2_s = \"~lib/builtins/v128.load32x2_s\";\n  export const v128_load32x2_u = \"~lib/builtins/v128.load32x2_u\";\n  export const v128_load8_splat = \"~lib/builtins/v128.load8_splat\";\n  export const v128_load16_splat = \"~lib/builtins/v128.load16_splat\";\n  export const v128_load32_splat = \"~lib/builtins/v128.load32_splat\";\n  export const v128_load64_splat = \"~lib/builtins/v128.load64_splat\";\n  export const v128_load32_zero = \"~lib/builtins/v128.load32_zero\";\n  export const v128_load64_zero = \"~lib/builtins/v128.load64_zero\";\n  export const v128_load8_lane = \"~lib/builtins/v128.load8_lane\";\n  export const v128_load16_lane = \"~lib/builtins/v128.load16_lane\";\n  export const v128_load32_lane = \"~lib/builtins/v128.load32_lane\";\n  export const v128_load64_lane = \"~lib/builtins/v128.load64_lane\";\n  export const v128_store8_lane = \"~lib/builtins/v128.store8_lane\";\n  export const v128_store16_lane = \"~lib/builtins/v128.store16_lane\";\n  export const v128_store32_lane = \"~lib/builtins/v128.store32_lane\";\n  export const v128_store64_lane = \"~lib/builtins/v128.store64_lane\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_sat = \"~lib/builtins/v128.add_sat\";\n  export const v128_sub_sat = \"~lib/builtins/v128.sub_sat\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_popcnt = \"~lib/builtins/v128.popcnt\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_convert_low = \"~lib/builtins/v128.convert_low\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_trunc_sat_zero = \"~lib/builtins/v128.trunc_sat_zero\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_extend_low = \"~lib/builtins/v128.extend_low\";\n  export const v128_extend_high = \"~lib/builtins/v128.extend_high\";\n  export const v128_extadd_pairwise = \"~lib/builtins/v128.extadd_pairwise\";\n  export const v128_demote_zero = \"~lib/builtins/v128.demote_zero\";\n  export const v128_promote_low = \"~lib/builtins/v128.promote_low\";\n  export const v128_q15mulr_sat = \"~lib/builtins/v128.q15mulr_sat\";\n  export const v128_extmul_low = \"~lib/builtins/v128.extmul_low\";\n  export const v128_extmul_high = \"~lib/builtins/v128.extmul_high\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_sat_s = \"~lib/builtins/i8x16.add_sat_s\";\n  export const i8x16_add_sat_u = \"~lib/builtins/i8x16.add_sat_u\";\n  export const i8x16_sub_sat_s = \"~lib/builtins/i8x16.sub_sat_s\";\n  export const i8x16_sub_sat_u = \"~lib/builtins/i8x16.sub_sat_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_popcnt = \"~lib/builtins/i8x16.popcnt\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n  export const i8x16_shuffle = \"~lib/builtins/i8x16.shuffle\";\n  export const i8x16_swizzle = \"~lib/builtins/i8x16.swizzle\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_sat_s = \"~lib/builtins/i16x8.add_sat_s\";\n  export const i16x8_add_sat_u = \"~lib/builtins/i16x8.add_sat_u\";\n  export const i16x8_sub_sat_s = \"~lib/builtins/i16x8.sub_sat_s\";\n  export const i16x8_sub_sat_u = \"~lib/builtins/i16x8.sub_sat_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_extend_low_i8x16_s = \"~lib/builtins/i16x8.extend_low_i8x16_s\";\n  export const i16x8_extend_low_i8x16_u = \"~lib/builtins/i16x8.extend_low_i8x16_u\";\n  export const i16x8_extend_high_i8x16_s = \"~lib/builtins/i16x8.extend_high_i8x16_s\";\n  export const i16x8_extend_high_i8x16_u = \"~lib/builtins/i16x8.extend_high_i8x16_u\";\n  export const i16x8_extadd_pairwise_i8x16_s = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_s\";\n  export const i16x8_extadd_pairwise_i8x16_u = \"~lib/builtins/i16x8.extadd_pairwise_i8x16_u\";\n  export const i16x8_q15mulr_sat_s = \"~lib/builtins/i16x8.q15mulr_sat_s\";\n  export const i16x8_extmul_low_i8x16_s = \"~lib/builtins/i16x8.extmul_low_i8x16_s\";\n  export const i16x8_extmul_low_i8x16_u = \"~lib/builtins/i16x8.extmul_low_i8x16_u\";\n  export const i16x8_extmul_high_i8x16_s = \"~lib/builtins/i16x8.extmul_high_i8x16_s\";\n  export const i16x8_extmul_high_i8x16_u = \"~lib/builtins/i16x8.extmul_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_trunc_sat_f64x2_s_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_s_zero\";\n  export const i32x4_trunc_sat_f64x2_u_zero = \"~lib/builtins/i32x4.trunc_sat_f64x2_u_zero\";\n  export const i32x4_extend_low_i16x8_s = \"~lib/builtins/i32x4.extend_low_i16x8_s\";\n  export const i32x4_extend_low_i16x8_u = \"~lib/builtins/i32x4.extend_low_i16x8_u\";\n  export const i32x4_extend_high_i16x8_s = \"~lib/builtins/i32x4.extend_high_i16x8_s\";\n  export const i32x4_extend_high_i16x8_u = \"~lib/builtins/i32x4.extend_high_i16x8_u\";\n  export const i32x4_extadd_pairwise_i16x8_s = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_s\";\n  export const i32x4_extadd_pairwise_i16x8_u = \"~lib/builtins/i32x4.extadd_pairwise_i16x8_u\";\n  export const i32x4_extmul_low_i16x8_s = \"~lib/builtins/i32x4.extmul_low_i16x8_s\";\n  export const i32x4_extmul_low_i16x8_u = \"~lib/builtins/i32x4.extmul_low_i16x8_u\";\n  export const i32x4_extmul_high_i16x8_s = \"~lib/builtins/i32x4.extmul_high_i16x8_s\";\n  export const i32x4_extmul_high_i16x8_u = \"~lib/builtins/i32x4.extmul_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\";\n  export const i64x2_mul = \"~lib/builtins/i64x2.mul\";\n  export const i64x2_abs = \"~lib/builtins/i64x2.abs\";\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\";\n  export const i64x2_bitmask = \"~lib/builtins/i64x2.bitmask\";\n  export const i64x2_eq = \"~lib/builtins/i64x2.eq\";\n  export const i64x2_ne = \"~lib/builtins/i64x2.ne\";\n  export const i64x2_lt_s = \"~lib/builtins/i64x2.lt_s\";\n  export const i64x2_lt_u = \"~lib/builtins/i64x2.lt_u\";\n  export const i64x2_le_s = \"~lib/builtins/i64x2.le_s\";\n  export const i64x2_le_u = \"~lib/builtins/i64x2.le_u\";\n  export const i64x2_gt_s = \"~lib/builtins/i64x2.gt_s\";\n  export const i64x2_gt_u = \"~lib/builtins/i64x2.gt_u\";\n  export const i64x2_ge_s = \"~lib/builtins/i64x2.ge_s\";\n  export const i64x2_ge_u = \"~lib/builtins/i64x2.ge_u\";\n  export const i64x2_extend_low_i32x4_s = \"~lib/builtins/i64x2.extend_low_i32x4_s\";\n  export const i64x2_extend_low_i32x4_u = \"~lib/builtins/i64x2.extend_low_i32x4_u\";\n  export const i64x2_extend_high_i32x4_s = \"~lib/builtins/i64x2.extend_high_i32x4_s\";\n  export const i64x2_extend_high_i32x4_u = \"~lib/builtins/i64x2.extend_high_i32x4_u\";\n  export const i64x2_extmul_low_i32x4_s = \"~lib/builtins/i64x2.extmul_low_i32x4_s\";\n  export const i64x2_extmul_low_i32x4_u = \"~lib/builtins/i64x2.extmul_low_i32x4_u\";\n  export const i64x2_extmul_high_i32x4_s = \"~lib/builtins/i64x2.extmul_high_i32x4_s\";\n  export const i64x2_extmul_high_i32x4_u = \"~lib/builtins/i64x2.extmul_high_i32x4_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_demote_f64x2_zero = \"~lib/builtins/f32x4.demote_f64x2_zero\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_low_i32x4_s = \"~lib/builtins/f64x2.convert_low_i32x4_s\";\n  export const f64x2_convert_low_i32x4_u = \"~lib/builtins/f64x2.convert_low_i32x4_u\";\n  export const f64x2_promote_low_f32x4 = \"~lib/builtins/f64x2.promote_low_f32x4\";\n\n  export const i31_new = \"~lib/builtins/i31.new\";\n  export const i31_get = \"~lib/builtins/i31.get\";\n\n  // internals\n  export const data_end = \"~lib/memory/__data_end\";\n  export const stack_pointer = \"~lib/memory/__stack_pointer\";\n  export const heap_base = \"~lib/memory/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n  export const tostack = \"~lib/rt/__tostack\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/string.ts\n  export const String_raw = \"~lib/string/String.raw\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isInternalReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      assert(resultType.getSignature());\n      value = \"Function\";\n    }\n  } else {\n    value = resultType.toString();\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8: // not wrapped\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value << (shift & mask)) | (value >>> ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // (value >>> (shift & mask)) | (value << ((0 - shift) & mask))\n        let flow = compiler.currentFlow;\n        let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n        flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n        let temp2 = flow.getTempLocal(type);\n        flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n\n        let ret = module.binary(BinaryOp.OrI32,\n          module.binary(\n            BinaryOp.ShrU32,\n            module.local_tee(temp1.index, arg0, false), // i32\n            module.binary(\n              BinaryOp.AndI32,\n              module.local_tee(temp2.index, arg1, false), // i32\n              module.i32(type.size - 1)\n            )\n          ),\n          module.binary(\n            BinaryOp.ShlI32,\n            module.local_get(temp1.index, TypeRef.I32),\n            module.binary(\n              BinaryOp.AndI32,\n              module.binary(\n                BinaryOp.SubI32,\n                module.i32(0),\n                module.local_get(temp2.index, TypeRef.I32)\n              ),\n              module.i32(type.size - 1)\n            )\n          )\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n\n        return ret;\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32\n                module.i32(31)\n              ),\n              false // i32\n            ),\n            module.local_get(temp1.index, TypeRef.I32)\n          ),\n          module.local_get(temp2.index, TypeRef.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0, false), // i32/i64\n                isWasm64 ? module.i64(63) : module.i32(31)\n              ),\n              false // i32/i64\n            ),\n            module.local_get(temp1.index, options.sizeTypeRef)\n          ),\n          module.local_get(temp2.index, options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0, false), // i64\n                module.i64(63)\n              ),\n              false // i64\n            ),\n            module.local_get(temp1.index, TypeRef.I64)\n          ),\n          module.local_get(temp2.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op as i32 != -1) {\n      let flow = compiler.currentFlow;\n      let typeRef = type.toRef();\n      let temp1 = flow.getTempLocal(type, findUsedLocals(arg1));\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0, false), // numeric\n        module.local_tee(temp2.index, arg1, false), // numeric\n        module.binary(op,\n          module.local_get(temp1.index, typeRef),\n          module.local_get(temp2.index, typeRef)\n        ),\n        typeRef\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32ToI32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64ToI64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64ToI64\n            : UnaryOp.ReinterpretF32ToI32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32ToF32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64ToF64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0, false), // f32\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0, false), // f64\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.local_get(temp.index, TypeRef.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), TypeRef.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.local_get(temp.index, TypeRef.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toRef(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(ptr: usize, value: T*, immOffset?: usize, immAlign?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toRef(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// add<T?>(left: T, right: T) -> T\nfunction builtin_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeAdd(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"add\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.add, builtin_add);\n\n// sub<T?>(left: T, right: T) -> T\nfunction builtin_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeSub(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"sub\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sub, builtin_sub);\n\n// mul<T?>(left: T, right: T) -> T\nfunction builtin_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeMul(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"mul\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.mul, builtin_mul);\n\n// div<T?>(left: T, right: T) -> T\nfunction builtin_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (checkTypeOptional(ctx, true) | checkArgsRequired(ctx, 2)) {\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(\n        left,\n        typeArguments[0],\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) {\n      // prefer right type\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type\n      );\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(\n          left,\n          (type = compiler.currentType),\n          Constraints.CONV_IMPLICIT\n        );\n      }\n    } else {\n      arg1 = compiler.compileExpression(\n        operands[1],\n        type,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    if (type.isNumericValue) {\n      return compiler.makeDiv(arg0, arg1, type);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"div\",\n    type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.div, builtin_div);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toRef(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toRef(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toRef());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    // either conversion or memory operation clears garbage bits\n    arg1 = compiler.convertExpression(arg1, inType, type, false, operands[1]);\n    arg2 = compiler.convertExpression(arg2, inType, type, false, operands[2]);\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toRef());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout?: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = operands.length == 3\n    ? compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT)\n    : module.i64(-1, -1); // Infinite timeout\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toRef());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count?: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = operands.length == 2\n    ? compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT)\n    : module.i32(-1); // Inifinity count of waiters\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2, type.toRef());\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.memory_size();\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  return module.memory_grow(compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.CONV_IMPLICIT));\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addAlignedMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addAlignedMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === GC =====================================================================================\n\nfunction builtin_i31_new(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i31ref;\n  return module.i31_new(arg0);\n}\nbuiltins.set(BuiltinNames.i31_new, builtin_i31_new);\n\nfunction builtin_i31_get(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.i31ref, Constraints.CONV_IMPLICIT);\n  if (ctx.contextualType.is(TypeFlags.UNSIGNED)) {\n    compiler.currentType = Type.u32;\n    return module.i31_get(arg0, false);\n  } else {\n    compiler.currentType = Type.i32;\n    return module.i31_get(arg0, true);\n  }\n}\nbuiltins.set(BuiltinNames.i31_get, builtin_i31_get);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>TypeRef.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: return module.if(module.ref_is(RefIsOp.RefIsNull, arg0), abort);\n\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0, false), // numeric\n          module.local_get(temp.index, TypeRef.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0, false) // i64\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0, type.isManaged)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.sizeTypeRef)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0, false), // f32\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0, false), // f64\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, TypeRef.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        let temp = flow.getTempLocal(type);\n        let ret = module.if(\n          module.ref_is(RefIsOp.RefIsNull,\n            module.local_tee(temp.index, arg0, false) // ref\n          ),\n          abort,\n          module.local_get(temp.index, type.toRef())\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var paramTypeRefs = new Array<TypeRef>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    paramTypeRefs[i] = compiler.currentType.toRef();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(paramTypeRefs), returnType.toRef());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var functionArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, functionArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// String.raw(parts: TemplateStringsArray, ...values: unknown[]): string\nfunction builtin_string_raw(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = ctx.compiler.program.stringInstance.type;\n  compiler.error(\n    DiagnosticCode.Not_implemented_0,\n    ctx.reportNode.range, \"String.raw\"\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.String_raw, builtin_string_raw);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleI8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.Load8Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.Load16Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.Load32Splat, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.Load64Splat, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.Load8x8S, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.Load8x8U, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.Load16x4S, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.Load16x4U, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.Load32x2S, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.Load32x2U, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.load_zero<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_load(SIMDLoadOp.Load32Zero, arg0, immOffset, immAlign);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_load(SIMDLoadOp.Load64Zero, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_load(compiler.options.isWasm64 ? SIMDLoadOp.Load64Zero : SIMDLoadOp.Load32Zero, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_zero, builtin_v128_load_zero);\n\n// v128.load_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Load64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_loadstorelane(compiler.options.isWasm64 ? SIMDLoadStoreLaneOp.Load64Lane : SIMDLoadStoreLaneOp.Load32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_lane, builtin_v128_load_lane);\n\n// v128.store_lane<TFrom!>(ptr: usize, vec: v128, idx: u8, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_store_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 5)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.u8, Constraints.CONV_IMPLICIT);\n  var idx = 0;\n  var precomp = module.runExpression(arg2, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[2].range\n    );\n  }\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 4) {\n    immOffset = evaluateImmediateOffset(operands[3], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 5) {\n      immAlign = evaluateImmediateAlign(operands[4], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store8Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store16Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: return module.simd_loadstorelane(SIMDLoadStoreLaneOp.Store64Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.simd_loadstorelane(compiler.options.isWasm64 ? SIMDLoadStoreLaneOp.Store64Lane : SIMDLoadStoreLaneOp.Store32Lane, arg0, immOffset, immAlign, <u8>idx, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.store_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_store_lane, builtin_v128_store_lane);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.MulI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.MulI64x2 : BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_sat, builtin_v128_add_sat);\n\n// v128.sub_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_sat, builtin_v128_sub_sat);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.EqI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.EqI64x2 : BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.NeI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.NeI64x2 : BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LtI64x2, arg0, arg1);\n      // no LtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LtI64x2 : BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.LeI64x2, arg0, arg1);\n      // no LeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.LeI64x2 : BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GtI64x2, arg0, arg1);\n      // no GtU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GtI64x2 : BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.I64: return module.binary(BinaryOp.GeI64x2, arg0, arg1);\n      // no GeU64x2\n      case TypeKind.ISIZE: return module.binary(compiler.options.isWasm64 ? BinaryOp.GeI64x2 : BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.AbsI64x2, arg0);\n      case TypeKind.ISIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.AbsI64x2 : UnaryOp.AbsI32x4, arg0);\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.convert_low<T!>(a: v128) -> v128\nfunction builtin_v128_convert_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertLowI32x4ToF64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertLowU32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert_low, builtin_v128_convert_low);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.trunc_sat_zero<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF64x2ToI32x4Zero, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF64x2ToU32x4Zero, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat_zero, builtin_v128_trunc_sat_zero);\n\n// v128.extend_low<T!>(a: v128) -> v128\nfunction builtin_v128_extend_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendLowU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendLowI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendLowU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_low, builtin_v128_extend_low);\n\n// v128.extend_high<T!>(a: v128) -> v128\nfunction builtin_v128_extend_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtendHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtendHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtendHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtendHighU16x8ToU32x4, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.ExtendHighI32x4ToI64x2, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.unary(UnaryOp.ExtendHighU32x4ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extend_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extend_high, builtin_v128_extend_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndnotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  return module.unary(UnaryOp.AnyTrueV128, arg0);\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(compiler.options.isWasm64 ? UnaryOp.AllTrueI64x2 : UnaryOp.AllTrueI32x4, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.BitmaskI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return module.unary(compiler.options.isWasm64 ? UnaryOp.BitmaskI64x2 : UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.popcnt<T!>(a: v128) -> v128\nfunction builtin_v128_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.PopcntI8x16, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_popcnt, builtin_v128_popcnt);\n\n// v128.extadd_pairwise<T!>(a: v128) -> v128\nfunction builtin_v128_extadd_pairwise(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.ExtaddPairwiseI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.ExtaddPairwiseU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.ExtaddPairwiseI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.ExtaddPairwiseU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extadd_pairwise\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extadd_pairwise, builtin_v128_extadd_pairwise);\n\n// v128.demote_zero<T?>(a: v128) -> v128\nfunction builtin_v128_demote_zero(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f64;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F64: return module.unary(UnaryOp.DemoteZeroF64x2ToF32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.demote_zero\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_demote_zero, builtin_v128_demote_zero);\n\n// v128.promote_low<T?>(a: v128) -> v128\nfunction builtin_v128_promote_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments ? typeArguments[0] : Type.f32;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.PromoteLowF32x4ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.promote_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_promote_low, builtin_v128_promote_low);\n\n// v128.q15mulr_sat<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_q15mulr_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.Q15mulrSatI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.q15mulr_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_q15mulr_sat, builtin_v128_q15mulr_sat);\n\n// v128.extmul_low<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulLowI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulLowU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulLowI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulLowU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulLowI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulLowU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_low, builtin_v128_extmul_low);\n\n// v128.extmul_high<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_extmul_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.ExtmulHighI16x8, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.ExtmulHighU16x8, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.ExtmulHighI32x4, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.ExtmulHighU32x4, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.ExtmulHighI64x2, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.ExtmulHighU64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extmul_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extmul_high, builtin_v128_extmul_high);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], TypeRef.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.add -> add<i32>\nfunction builtin_i32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_add, builtin_i32_add);\n\n// i64.add -> add<i64>\nfunction builtin_i64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_add, builtin_i64_add);\n\n// f32.add -> add<f32>\nfunction builtin_f32_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32_add, builtin_f32_add);\n\n// f64.add -> add<f64>\nfunction builtin_f64_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64_add, builtin_f64_add);\n\n// i32.sub -> sub<i32>\nfunction builtin_i32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_sub, builtin_i32_sub);\n\n// i64.sub -> sub<i64>\nfunction builtin_i64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_sub, builtin_i64_sub);\n\n// f32.sub -> sub<f32>\nfunction builtin_f32_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sub, builtin_f32_sub);\n\n// f64.sub -> sub<f64>\nfunction builtin_f64_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sub, builtin_f64_sub);\n\n// i32.mul -> mul<i32>\nfunction builtin_i32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32_mul, builtin_i32_mul);\n\n// i64.mul -> mul<i64>\nfunction builtin_i64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64_mul, builtin_i64_mul);\n\n// f32.mul -> mul<f32>\nfunction builtin_f32_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32_mul, builtin_f32_mul);\n\n// f64.mul -> mul<f64>\nfunction builtin_f64_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64_mul, builtin_f64_mul);\n\n// i32.div_s -> div<i32>\nfunction builtin_i32_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_s, builtin_i32_div_s);\n\n// i32.div_u -> div<u32>\nfunction builtin_i32_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.u32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i32_div_u, builtin_i32_div_u);\n\n// i64.div_s -> div_s<i64>\nfunction builtin_i64_div_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_s, builtin_i64_div_s);\n\n// i64.div_u -> div_u<u64>\nfunction builtin_i64_div_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.u64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.i64_div_u, builtin_i64_div_u);\n\n// f32.div -> div<f32>\nfunction builtin_f32_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32_div, builtin_f32_div);\n\n// f64.div -> div<f64>\nfunction builtin_f64_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64_div, builtin_f64_div);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.load8x8_s -> v128.load_ext<i8>\nfunction builtin_v128_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_s, builtin_v128_load8x8_s);\n\n// v128.load8x8_u -> v128.load_ext<u8>\nfunction builtin_v128_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8x8_u, builtin_v128_load8x8_u);\n\n// v128.load16x4_s -> v128.load_ext<i16>\nfunction builtin_v128_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_s, builtin_v128_load16x4_s);\n\n// v128.load16x4_u -> v128.load_ext<u16>\nfunction builtin_v128_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16x4_u, builtin_v128_load16x4_u);\n\n// v128.load32x2_s -> v128.load_ext<i32>\nfunction builtin_v128_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_s, builtin_v128_load32x2_s);\n\n// v128.load32x2_u -> v128.load_ext<u32>\nfunction builtin_v128_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32x2_u, builtin_v128_load32x2_u);\n\n// v128.load8_splat -> v128.load_splat<u8>\nfunction builtin_v128_load8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_splat, builtin_v128_load8_splat);\n\n// v128.load16_splat -> v128.load_splat<u16>\nfunction builtin_v128_load16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_splat, builtin_v128_load16_splat);\n\n// v128.load32_splat -> v128.load_splat<u32>\nfunction builtin_v128_load32_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_splat, builtin_v128_load32_splat);\n\n// v128.load64_splat -> v128.load_splat<u64>\nfunction builtin_v128_load64_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_splat, builtin_v128_load64_splat);\n\n// v128.load32_zero -> v128.load_zero<u32>\nfunction builtin_v128_load32_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_zero, builtin_v128_load32_zero);\n\n// v128.load64_zero -> v128.load_zero<u64>\nfunction builtin_v128_load64_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_zero(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_zero, builtin_v128_load64_zero);\n\n// v128.load8_lane -> v128.load_lane<u8>\nfunction builtin_v128_load8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load8_lane, builtin_v128_load8_lane);\n\n// v128.load16_lane -> v128.load_lane<u16>\nfunction builtin_v128_load16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load16_lane, builtin_v128_load16_lane);\n\n// v128.load32_lane -> v128.load_lane<u32>\nfunction builtin_v128_load32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load32_lane, builtin_v128_load32_lane);\n\n// v128.load64_lane -> v128.load_lane<u64>\nfunction builtin_v128_load64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load64_lane, builtin_v128_load64_lane);\n\n// v128.store8_lane -> v128.store_lane<u8>\nfunction builtin_v128_store8_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store8_lane, builtin_v128_store8_lane);\n\n// v128.store16_lane -> v128.store_lane<u16>\nfunction builtin_v128_store16_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store16_lane, builtin_v128_store16_lane);\n\n// v128.store32_lane -> v128.store_lane<u32>\nfunction builtin_v128_store32_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store32_lane, builtin_v128_store32_lane);\n\n// v128.store64_lane -> v128.store_lane<u64>\nfunction builtin_v128_store64_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_store_lane(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store64_lane, builtin_v128_store64_lane);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_sat_s -> v128.add_sat<i8>\nfunction builtin_i8x16_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_s, builtin_i8x16_add_sat_s);\n\n// i8x16.add_sat_u -> v128.add_sat<u8>\nfunction builtin_i8x16_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_sat_u, builtin_i8x16_add_sat_u);\n\n// i8x16.sub_sat_s -> v128.sub_sat<i8>\nfunction builtin_i8x16_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_s, builtin_i8x16_sub_sat_s);\n\n// i8x16.sub_sat_u -> v128.sub_sat<u8>\nfunction builtin_i8x16_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_sat_u, builtin_i8x16_sub_sat_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.popcnt -> v128.popcnt<i8>\nfunction builtin_i8x16_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_popcnt, builtin_i8x16_popcnt);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_i8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shuffle, builtin_i8x16_shuffle);\n\n// i8x16.swizzle -> v128.swizzle\nfunction builtin_i8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_swizzle, builtin_i8x16_swizzle);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_sat_s -> v128.add_sat<i16>\nfunction builtin_i16x8_add_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_s, builtin_i16x8_add_sat_s);\n\n// i16x8.add_sat_u -> v128.add_sat<u16>\nfunction builtin_i16x8_add_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_sat_u, builtin_i16x8_add_sat_u);\n\n// i16x8.sub_sat_s -> v128.sub_sat<i16>\nfunction builtin_i16x8_sub_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_s, builtin_i16x8_sub_sat_s);\n\n// i16x8.sub_sat_u -> v128.sub_sat<u16>\nfunction builtin_i16x8_sub_sat_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_sat_u, builtin_i16x8_sub_sat_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.extend_low_i8x16_s -> v128.extend_low<i8>\nfunction builtin_i16x8_extend_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_s, builtin_i16x8_extend_low_i8x16_s);\n\n// i16x8.extend_low_i8x16_u -> v128.extend_low<u8>\nfunction builtin_i16x8_extend_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_low_i8x16_u, builtin_i16x8_extend_low_i8x16_u);\n\n// i16x8.extend_high_i8x16_s -> v128.extend_high<i8>\nfunction builtin_i16x8_extend_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_s, builtin_i16x8_extend_high_i8x16_s);\n\n// i16x8.extend_high_i8x16_u -> v128.extend_high<u8>\nfunction builtin_i16x8_extend_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extend_high_i8x16_u, builtin_i16x8_extend_high_i8x16_u);\n\n// i16x8.extadd_pairwise_i8x16_s -> v128.extadd_pairwise<i8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_s, builtin_i16x8_extadd_pairwise_i8x16_s);\n\n// i16x8.extadd_pairwise_i8x16_u -> v128.extadd_pairwise<u8>\nfunction builtin_i16x8_extadd_pairwise_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extadd_pairwise_i8x16_u, builtin_i16x8_extadd_pairwise_i8x16_u);\n\n// i16x8.q15mulr_sat_s -> v128.q15mulr_sat<i16>\nfunction builtin_i16x8_q15mulr_sat_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_q15mulr_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_q15mulr_sat_s, builtin_i16x8_q15mulr_sat_s);\n\n// i16x8.extmul_low_i8x16_s -> v128.extmul_low<i16>\nfunction builtin_i16x8_extmul_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_s, builtin_i16x8_extmul_low_i8x16_s);\n\n// i16x8.extmul_low_i8x16_u -> v128.extmul_low<u16>\nfunction builtin_i16x8_extmul_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_low_i8x16_u, builtin_i16x8_extmul_low_i8x16_u);\n\n// i16x8.extmul_high_i8x16_s -> v128.extmul_high<i16>\nfunction builtin_i16x8_extmul_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_s, builtin_i16x8_extmul_high_i8x16_s);\n\n// i16x8.extmul_high_i8x16_u -> v128.extmul_high<u16>\nfunction builtin_i16x8_extmul_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extmul_high_i8x16_u, builtin_i16x8_extmul_high_i8x16_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.trunc_sat_f64x2_s_zero -> v128.trunc_sat_zero<i32>\nfunction builtin_i32x4_trunc_sat_f64x2_s_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_s_zero, builtin_i32x4_trunc_sat_f64x2_s_zero);\n\n// i32x4.trunc_sat_f64x2_u_zero -> v128.trunc_sat_zero<u32>\nfunction builtin_i32x4_trunc_sat_f64x2_u_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat_zero(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f64x2_u_zero, builtin_i32x4_trunc_sat_f64x2_u_zero);\n\n// i32x4.extend_low_i16x8_s -> // v128.extend_low<i16>\nfunction builtin_i32x4_extend_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_s, builtin_i32x4_extend_low_i16x8_s);\n\n// i32x4.extend_low_i16x8_u -> v128.extend_low<u16>\nfunction builtin_i32x4_extend_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_low_i16x8_u, builtin_i32x4_extend_low_i16x8_u);\n\n// i32x4.extend_high_i16x8_s -> v128.extend_high<i16>\nfunction builtin_i32x4_extend_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_s, builtin_i32x4_extend_high_i16x8_s);\n\n// i32x4.extend_high_i16x8_u -> v128.extend_high<u16>\nfunction builtin_i32x4_extend_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extend_high_i16x8_u, builtin_i32x4_extend_high_i16x8_u);\n\n// i32x4.extadd_pairwise_i16x8_s -> v128.extadd_pairwise<i16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_s, builtin_i32x4_extadd_pairwise_i16x8_s);\n\n// i32x4.extadd_pairwise_i16x8_u -> v128.extadd_pairwise<u16>\nfunction builtin_i32x4_extadd_pairwise_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extadd_pairwise(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extadd_pairwise_i16x8_u, builtin_i32x4_extadd_pairwise_i16x8_u);\n\n// i32x4.extmul_low_i16x8_s -> v128.extmul_low<i16>\nfunction builtin_i32x4_extmul_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_s, builtin_i32x4_extmul_low_i16x8_s);\n\n// i32x4.extmul_low_i16x8_u -> v128.extmul_low<u16>\nfunction builtin_i32x4_extmul_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_low_i16x8_u, builtin_i32x4_extmul_low_i16x8_u);\n\n// i32x4.extmul_high_i16x8_s -> v128.extmul_high<i16>\nfunction builtin_i32x4_extmul_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_s, builtin_i32x4_extmul_high_i16x8_s);\n\n// i32x4.extmul_high_i16x8_u -> v128.extmul_high<u16>\nfunction builtin_i32x4_extmul_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extmul_high_i16x8_u, builtin_i32x4_extmul_high_i16x8_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.mul -> v128.mul<i64>\nfunction builtin_i64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_mul, builtin_i64x2_mul);\n\n// i64x2.abs -> v128.abs<i64>\nfunction builtin_i64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_abs, builtin_i64x2_abs);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.bitmask -> v128.bitmask<i64>\nfunction builtin_i64x2_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_bitmask, builtin_i64x2_bitmask);\n\n// i64x2.eq -> v128.eq<i64>\nfunction builtin_i64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_eq, builtin_i64x2_eq);\n\n// i64x2.ne -> v128.ne<i64>\nfunction builtin_i64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ne, builtin_i64x2_ne);\n\n// i64x2.lt_s -> v128.lt<i64>\nfunction builtin_i64x2_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_lt_s, builtin_i64x2_lt_s);\n\n// i64x2.le_s -> v128.le<i64>\nfunction builtin_i64x2_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_le_s, builtin_i64x2_le_s);\n\n// i64x2.gt_s -> v128.gt<i64>\nfunction builtin_i64x2_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_gt_s, builtin_i64x2_gt_s);\n\n// i64x2.ge_s -> v128.ge<i64>\nfunction builtin_i64x2_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_ge_s, builtin_i64x2_ge_s);\n\n// i64x2.extend_low_i32x4_s -> // v128.extend_low<i32>\nfunction builtin_i64x2_extend_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_s, builtin_i64x2_extend_low_i32x4_s);\n\n// i64x2.extend_low_i32x4_u -> v128.extend_low<u32>\nfunction builtin_i64x2_extend_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_low_i32x4_u, builtin_i64x2_extend_low_i32x4_u);\n\n// i64x2.extend_high_i32x4_s -> v128.extend_high<i32>\nfunction builtin_i64x2_extend_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_s, builtin_i64x2_extend_high_i32x4_s);\n\n// i64x2.extend_high_i32x4_u -> v128.extend_high<u32>\nfunction builtin_i64x2_extend_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extend_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extend_high_i32x4_u, builtin_i64x2_extend_high_i32x4_u);\n\n// i64x2.extmul_low_i32x4_s -> v128.extmul_low<i32>\nfunction builtin_i64x2_extmul_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_s, builtin_i64x2_extmul_low_i32x4_s);\n\n// i64x2.extmul_low_i32x4_u -> v128.extmul_low<u32>\nfunction builtin_i64x2_extmul_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_low(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_low_i32x4_u, builtin_i64x2_extmul_low_i32x4_u);\n\n// i64x2.extmul_high_i32x4_s -> v128.extmul_high<i32>\nfunction builtin_i64x2_extmul_high_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_s, builtin_i64x2_extmul_high_i32x4_s);\n\n// i64x2.extmul_high_i32x4_u -> v128.extmul_high<u32>\nfunction builtin_i64x2_extmul_high_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_extmul_high(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extmul_high_i32x4_u, builtin_i64x2_extmul_high_i32x4_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.demote_f64x2_zero -> v128.demote_zero<f64>\nfunction builtin_f32x4_demote_f64x2_zero(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_demote_zero(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_demote_f64x2_zero, builtin_f32x4_demote_f64x2_zero);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_low_i32x4_s -> v128.convert_low<i32>\nfunction builtin_f64x2_convert_low_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_s, builtin_f64x2_convert_low_i32x4_s);\n\n// f64x2.convert_low_i32x4_u -> v128.convert_low<u32>\nfunction builtin_f64x2_convert_low_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_low_i32x4_u, builtin_f64x2_convert_low_i32x4_u);\n\n// f64x2.promote_low_f32x4 -> v128.promote_low<f32>\nfunction builtin_f64x4_promote_low_f32x4(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_promote_low(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_promote_low_f32x4, builtin_f64x4_promote_low_f32x4);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value)),\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, sizeTypeRef),\n              false // internal\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, sizeTypeRef), // tempRef != null\n              module.local_get(0, TypeRef.I32) // cookie\n            ], TypeRef.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    TypeRef.I32,  // cookie\n    TypeRef.None, // => void\n    [ sizeTypeRef ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Ensures that the visitor function of the specified class is compiled. */\nfunction ensureVisitMembersOf(compiler: Compiler, instance: Class): void {\n  assert(instance.type.isManaged);\n  if (instance.visitRef) return;\n\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var sizeTypeSize = usizeType.byteSize;\n  var visitInstance = assert(program.visitInstance);\n  var body = new Array<ExpressionRef>();\n\n  // If the class has a base class, call its visitor first\n  var base = instance.base;\n  if (base) {\n    body.push(\n      module.call(base.internalName + \"~visit\", [\n        module.local_get(0, sizeTypeRef), // this\n        module.local_get(1, TypeRef.I32)  // cookie\n      ], TypeRef.None)\n    );\n  }\n\n  // Some standard library components provide a custom visitor implementation,\n  // for example to visit all members of a collection, e.g. arrays and maps.\n  var hasVisitImpl = false;\n  if (instance.isDeclaredInLibrary) {\n    let visitPrototype = instance.getMember(\"__visit\");\n    if (visitPrototype) {\n      assert(visitPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitInstance = program.resolver.resolveFunction(<FunctionPrototype>visitPrototype, null);\n      if (!visitInstance || !compiler.compileFunction(visitInstance)) {\n        body.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSignature = visitInstance.signature;\n        let visitThisType = assert(visitSignature.thisType);\n        assert(\n          visitSignature.parameterTypes.length == 1 &&\n          visitSignature.parameterTypes[0] == Type.u32 &&\n          visitSignature.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        body.push(\n          module.call(visitInstance.internalName, [\n            module.local_get(0, sizeTypeRef), // this\n            module.local_get(1, TypeRef.I32)  // cookie\n          ], TypeRef.None)\n        );\n      }\n      hasVisitImpl = true;\n    }\n  }\n\n  // Otherwise, if there is no custom visitor, generate a visitor function\n  // according to class layout, visiting all _own_ managed members.\n  var needsTempValue = false;\n  if (!hasVisitImpl) {\n    let members = instance.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n        let member = unchecked(_values[j]);\n        if (member.kind == ElementKind.FIELD) {\n          if ((<Field>member).parent === instance) {\n            let fieldType = (<Field>member).type;\n            if (fieldType.isManaged) {\n              let fieldOffset = (<Field>member).memoryOffset;\n              assert(fieldOffset >= 0);\n              needsTempValue = true;\n              body.push(\n                // if ($2 = value) __visit($2, $1)\n                module.if(\n                  module.local_tee(2,\n                    module.load(sizeTypeSize, false,\n                      module.local_get(0, sizeTypeRef),\n                      sizeTypeRef, fieldOffset\n                    ),\n                    false // internal\n                  ),\n                  module.call(visitInstance.internalName, [\n                    module.local_get(2, sizeTypeRef), // value\n                    module.local_get(1, TypeRef.I32)  // cookie\n                  ], TypeRef.None)\n                )\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // Create the visitor function\n  instance.visitRef = module.addFunction(instance.internalName + \"~visit\",\n    createType([sizeTypeRef, TypeRef.I32]),\n    TypeRef.None,\n    needsTempValue ? [ sizeTypeRef ] : null,\n    module.flatten(body, TypeRef.None)\n  );\n\n  // And make sure the base visitor function exists\n  if (base && base.type.isManaged) {\n    // errored earlier if not managed\n    ensureVisitMembersOf(compiler, base);\n  }\n}\n\n/** Compiles the `__visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var sizeTypeRef = usizeType.toRef();\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  compiler.compileFunction(visitInstance, true); // is lazy, make sure it is compiled\n\n  // Prepare a mapping of class names to visitor calls. Each name corresponds to\n  // the respective sequential (0..N) class id.\n  var names = new Array<string>();\n  var cases = new Array<ExpressionRef>();\n  var nextId = 0;\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    assert(instanceId == nextId++);\n    let instance = assert(managedClasses.get(instanceId));\n    names[i] = instance.internalName;\n    if (instance.isPointerfree) {\n      cases[i] = module.return();\n    } else {\n      cases[i] = module.block(null, [\n        module.call(instance.internalName + \"~visit\", [\n          module.local_get(0, sizeTypeRef), // this\n          module.local_get(1, TypeRef.I32)  // cookie\n        ], TypeRef.None),\n        module.return()\n      ], TypeRef.None);\n      ensureVisitMembersOf(compiler, instance);\n    }\n  }\n\n  // Make a br_table of the mapping, calling visitor functions by unique class id\n  var current = module.block(names[0], [\n    module.switch(names, \"invalid\",\n      // load<u32>(changetype<usize>(this) - 8)\n      module.load(4, false,\n        sizeTypeRef == TypeRef.I64\n          ? module.binary(BinaryOp.SubI64,\n              module.local_get(0, sizeTypeRef),\n              module.i64(8)\n            )\n          : module.binary(BinaryOp.SubI32,\n              module.local_get(0, sizeTypeRef),\n              module.i32(8) // rtId is at -8\n            ),\n        TypeRef.I32, 0\n      )\n    )\n  ], TypeRef.None);\n\n  // Wrap blocks in order\n  for (let i = 0, k = names.length - 1; i < k; ++i) {\n    current = module.block(names[i + 1], [\n      current,\n      cases[i]\n    ], TypeRef.None);\n  }\n\n  // Wrap the last id in an 'invalid' block to break out of on invalid ids\n  current = module.block(\"invalid\", [\n    current,\n    cases[names.length - 1]\n  ], TypeRef.None);\n\n  // Add the function, executing an unreachable if breaking to 'invalid'\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ sizeTypeRef, TypeRef.I32 ]), // this, cookie\n    TypeRef.None, // => void\n    null,\n    module.flatten([\n      current,\n      module.unreachable()\n    ])\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isPointerfree) flags |= TypeinfoFlags.POINTERFREE;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addAlignedMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var sizeTypeRef = compiler.options.sizeTypeRef;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        sizeTypeRef == TypeRef.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, sizeTypeRef)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, sizeTypeRef),\n            module.i32(instance.id)\n          ], TypeRef.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", sizeTypeRef, TypeRef.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const funcref = \"funcref\";\n  export const externref = \"externref\";\n  export const anyref = \"anyref\";\n  export const eqref = \"eqref\";\n  export const i31ref = \"i31ref\";\n  export const dataref = \"dataref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  export const nonnull = \"nonnull\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_EXPORT_RUNTIME = \"ASC_EXPORT_RUNTIME\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  export const ASC_FEATURE_GC = \"ASC_FEATURE_GC\";\n  export const ASC_FEATURE_MEMORY64 = \"ASC_FEATURE_MEMORY64\";\n  export const ASC_VERSION_MAJOR = \"ASC_VERSION_MAJOR\";\n  export const ASC_VERSION_MINOR = \"ASC_VERSION_MINOR\";\n  export const ASC_VERSION_PATCH = \"ASC_VERSION_PATCH\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Funcref = \"Funcref\";\n  export const Externref = \"Externref\";\n  export const Anyref = \"Anyref\";\n  export const Eqref = \"Eqref\";\n  export const I31ref = \"I31ref\";\n  export const Dataref = \"Dataref\";\n  export const String = \"String\";\n  export const Object = \"Object\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const TemplateStringsArray = \"TemplateStringsArray\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const new_ = \"__new\";\n  export const renew = \"__renew\";\n  export const link = \"__link\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const newBuffer = \"__newBuffer\";\n  export const newArray = \"__newArray\";\n  export const BLOCK = \"~lib/rt/common/BLOCK\";\n  export const OBJECT = \"~lib/rt/common/OBJECT\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  RefIsOp,\n  TypeRef,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags,\n  isConstZero\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  CompiledExpression,\n\n  TypeNode,\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToRefs\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero,\n  readI32\n} from \"./util\";\n\nimport {\n  RtraceMemory\n} from \"./passes/rtrace\";\n\nimport {\n  ShadowStackPass\n} from \"./passes/shadowstack\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imported memory is zero filled. */\n  zeroFilledMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS | Feature.SIGN_EXTENSION;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n  /** If true, exports the runtime helpers. */\n  exportRuntime: bool = false;\n  /** Stack size in bytes, if using a stack. */\n  stackSize: i32 = 0;\n  /** Semantic major bundle version from root package.json */\n  bundleMajorVersion: i32 = 0;\n  /** Semantic minor bundle version from root package.json */\n  bundleMinorVersion: i32 = 0;\n  /** Semantic patch bundle version from root package.json */\n  bundlePatchVersion: i32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the size type reference matching the target. */\n  get sizeTypeRef(): TypeRef {\n    return this.target == Target.WASM64 ? TypeRef.I64 : TypeRef.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 4,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires data setup. */\n  DATA = 1 << 0,\n  /** Requires a stack. */\n  STACK = 1 << 1,\n  /** Requires heap setup. */\n  HEAP = 1 << 2,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 3,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 4,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 5,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 6\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Functions to export if `--exportRuntime` is set. */\nconst runtimeFunctions = [ \"__new\", \"__pin\", \"__unpin\", \"__collect\" ];\n/** Globals to export if `--exportRuntime` is set. */\nconst runtimeGlobals = [ \"__rtti_base\" ];\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Virtually called stubs that may have overloads. */\n  virtualStubs: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n  /** Shadow stack reference. */\n  shadowStack!: ShadowStackPass;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create(options.stackSize > 0, options.sizeTypeRef);\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.TruncSat;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    if (options.hasFeature(Feature.GC)) featureFlags |= FeatureFlags.GC;\n    if (options.hasFeature(Feature.MEMORY64)) featureFlags |= FeatureFlags.Memory64;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n    this.shadowStack = new ShadowStackPass(this);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n    var resolver = this.resolver;\n    var hasShadowStack = options.stackSize > 0; // implies runtime=incremental\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable data, heap and rtti offset dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.data_end, TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.data_end, TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, TypeRef.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // compile and export runtime if requested\n    if (this.options.exportRuntime) {\n      for (let i = 0, k = runtimeFunctions.length; i < k; ++i) {\n        let name = runtimeFunctions[i];\n        let instance = program.requireFunction(name);\n        if (this.compileFunction(instance) && !module.hasExport(name)) {\n          module.addFunctionExport(instance.internalName, name);\n        }\n      }\n      for (let i = 0, k = runtimeGlobals.length; i < k; ++i) {\n        let name = runtimeGlobals[i];\n        let instance = program.requireGlobal(name);\n        if (this.compileGlobal(instance) && !module.hasExport(name)) {\n          module.addGlobalExport(instance.internalName, name);\n        }\n      }\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual stubs\n    var functionTable = this.functionTable;\n    var virtualStubs = this.virtualStubs;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // includes varargs stub\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualStubsSeen = new Set<Function>();\n    do {\n      // virtual stubs and overloads have cross-dependencies on each other, in that compiling\n      // either may discover the respective other. do this in a loop until no more are found.\n      resolver.discoveredOverload = false;\n      for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        let overloadInstances = resolver.resolveOverloads(instance);\n        if (overloadInstances) {\n          for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n            this.compileFunction(overloadInstances[i]);\n          }\n        }\n        virtualStubsSeen.add(instance);\n      }\n    } while (virtualStubs.size > virtualStubsSeen.size || resolver.discoveredOverload);\n    virtualStubsSeen.clear();\n    for (let _values = Set_values(virtualStubs), i = 0, k = _values.length; i < k; ++i) {\n      this.finalizeVirtualStub(_values[i]);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    var memoryOffset = i64_align(this.memoryOffset, options.usizeType.byteSize);\n\n    // finalize data\n    module.removeGlobal(BuiltinNames.data_end);\n    if ((this.runtimeFeatures & RuntimeFeatures.DATA) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.data_end, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize stack (grows down from __heap_base to __data_end)\n    module.removeGlobal(BuiltinNames.stack_pointer);\n    if ((this.runtimeFeatures & RuntimeFeatures.STACK) != 0 || hasShadowStack) {\n      memoryOffset = i64_align(\n        i64_add(memoryOffset, i64_new(options.stackSize)),\n        options.usizeType.byteSize\n      );\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I64, true,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.stack_pointer, TypeRef.I32, true,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // finalize heap\n    module.removeGlobal(BuiltinNames.heap_base);\n    if ((this.runtimeFeatures & RuntimeFeatures.HEAP) != 0 || hasShadowStack) {\n      if (options.isWasm64) {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I64, false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(BuiltinNames.heap_base, TypeRef.I32, false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    this.memoryOffset = memoryOffset;\n\n    // check that we didn't exceed lowMemoryLimit already\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.addFunctionTable(\"0\", tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, TypeRef.I32, TypeRef.None, null,\n        module.global_set(this.ensureArgumentsLength(), module.local_get(0, TypeRef.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n\n    // NOTE: no more element compiles from here. may go to the start function!\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, TypeRef.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.global_set(BuiltinNames.started, module.i32(1))\n        );\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, TypeRef.I32),\n            module.return()\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // Run custom passes\n    if (hasShadowStack) {\n      this.shadowStack.walkModule();\n    }\n    if (program.lookup(\"ASC_RTRACE\") != null) {\n      new RtraceMemory(this).walkModule();\n    }\n\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    var module = this.module;\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n              functionPrototype.identifierNode.range\n            );\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n              classPrototype.identifierNode.range\n            );\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else if (global.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else if (enumValue.is(CommonFlags.COMPILED)) {\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(element.internalName, exportName);\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) {\n            let exportName = prefix + name;\n            if (!module.hasExport(exportName)) {\n              module.addFunctionExport(functionInstance.internalName, exportName);\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(exportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let getterExportName = prefix + GETTER_PREFIX + name;\n          if (this.compileFieldGetter(fieldInstance) && !module.hasExport(getterExportName)) {\n            module.addFunctionExport(fieldInstance.internalGetterName, getterExportName);\n            let signature = fieldInstance.internalGetterSignature;\n            if (signature.hasManagedOperands) {\n              this.shadowStack.noteExport(getterExportName, signature.getManagedOperandIndices());\n            }\n          }\n          if (!element.is(CommonFlags.READONLY)) {\n            let setterExportName = prefix + SETTER_PREFIX + name;\n            if (this.compileFieldSetter(fieldInstance) && !module.hasExport(setterExportName)) {\n              module.addFunctionExport(fieldInstance.internalSetterName, setterExportName);\n              let signature = fieldInstance.internalSetterSignature;\n              if (signature.hasManagedOperands) {\n                this.shadowStack.noteExport(setterExportName, signature.getManagedOperandIndices());\n              }\n            }\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, TypeRef.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n\n          let exportName = prefix + name;\n          if (!module.hasExport(exportName)) {\n            module.addGlobalExport(internalName, exportName);\n          }\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<TypeRef>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toRef();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.paramRefs,\n        startSignature.resultRefs,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, TypeRef.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      let internalName = global.internalName;\n      if (internalName == BuiltinNames.data_end) this.runtimeFeatures |= RuntimeFeatures.DATA;\n      else if (internalName == BuiltinNames.stack_pointer) this.runtimeFeatures |= RuntimeFeatures.STACK;\n      else if (internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var typeRef = type.toRef();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          typeRef,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>TypeRef.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>TypeRef.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>TypeRef.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>TypeRef.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, typeRef, true, this.makeZero(type, global.declaration));\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, typeRef, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, TypeRef.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, TypeRef.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, TypeRef.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    // ensure the function hasn't duplicate parameters\n    var parameters = instance.prototype.functionTypeNode.parameters;\n    var numParameters = parameters.length;\n    if (numParameters >= 2) {\n      let visited = new Set<string>();\n      visited.add(parameters[0].name.text);\n      for (let i = 1; i < numParameters; i++) {\n        let paramIdentifier = parameters[i].name;\n        let paramName = paramIdentifier.text;\n        if (!visited.has(paramName)) {\n          visited.add(paramName);\n        } else {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            paramIdentifier.range, paramName\n          );\n        }\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      if (!this.compileFunctionBody(instance, stmts)) {\n        stmts.push(module.unreachable());\n      }\n\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        typesToRefs(instance.additionalLocals),\n        module.flatten(stmts, instance.signature.returnType.toRef())\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.paramRefs,\n        signature.resultRefs\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n    var bodyStartIndex = stmts.length;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          this.makeConditionalAllocation(classInstance, thisLocal.index)\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n\n        // Insert right before the body\n        for (let i = stmts.length - 1; i >= bodyStartIndex; --i) {\n          stmts[i + 1] = stmts[i];\n        }\n        stmts[bodyStartIndex] = module.flatten(allocStmts, TypeRef.None);\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        stmts.push(\n          module.local_get(thisLocal.index, this.options.sizeTypeRef)\n        );\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    if (instance.getterRef) return true;\n    var module = this.module;\n    var valueType = instance.type;\n    var valueTypeRef = valueType.toRef();\n    var thisTypeRef = this.options.sizeTypeRef;\n    // return this.field\n    instance.getterRef = module.addFunction(instance.internalGetterName, thisTypeRef, valueTypeRef, null,\n      module.load(valueType.byteSize, valueType.isSignedIntegerValue,\n        module.local_get(0, thisTypeRef),\n        valueTypeRef, instance.memoryOffset\n      )\n    );\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var thisTypeRef = this.options.sizeTypeRef;\n    var valueTypeRef = type.toRef();\n    var module = this.module;\n    // void(this.field = value)\n    var bodyExpr = module.store(type.byteSize,\n      module.local_get(0, thisTypeRef),\n      module.local_get(1, valueTypeRef),\n      valueTypeRef, instance.memoryOffset\n    );\n    if (type.isManaged) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      if ((<Class>parent).type.isManaged) {\n        let linkInstance = this.program.linkInstance;\n        this.compileFunction(linkInstance);\n        bodyExpr = module.block(null, [\n          bodyExpr,\n          module.call(linkInstance.internalName, [\n            module.local_get(0, thisTypeRef),\n            module.local_get(1, valueTypeRef),\n            module.i32(0)\n          ], TypeRef.None)\n        ], TypeRef.None);\n      }\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ thisTypeRef, valueTypeRef ]), TypeRef.None, null,\n      bodyExpr\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addAlignedMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Adds a static memory segment representing a runtime object. */\n  addRuntimeMemorySegment(buffer: Uint8Array): MemorySegment {\n    var memoryOffset = this.program.computeBlockStart64(this.memoryOffset);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer expression. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var ptr = this.ensureStaticStringPtr(stringValue);\n    this.currentType = this.program.stringInstance.type;\n    return this.module.usize(ptr);\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticStringPtr(stringValue: string): i64 {\n    var program = this.program;\n    var totalOverhead = program.totalOverhead;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, totalOverhead + (i << 1));\n      }\n      stringSegment = this.addRuntimeMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    return i64_add(stringSegment.offset, i64_new(totalOverhead));\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var elementTypeRef = elementType.toRef();\n    switch (<u32>elementTypeRef) {\n      case <u32>TypeRef.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == elementTypeRef);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == elementTypeRef);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    this.program.OBJECTInstance.writeField(\"rtId\", id, buf, 0); // use specified rtId\n    this.writeStaticBuffer(buf, program.totalOverhead, elementType, values);\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(\n    elementType: Type,\n    bufferSegment: MemorySegment,\n    /** Optional array instance override. */\n    arrayInstance: Class | null = null\n  ): MemorySegment {\n    var program = this.program;\n    if (!arrayInstance) {\n      arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ elementType ]));\n    }\n    var bufferLength = readI32(bufferSegment.buffer, program.OBJECTInstance.offsetof(\"rtSize\"));\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addRuntimeMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addRuntimeMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.totalOverhead));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n    flow.set(FlowFlags.BREAKS);\n    return module.br(breakLabel);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    flow.freeScopedLocals();\n    return module.br(continueLabel);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $loop                             ├◄───────────┐ recompile?\n    //   (?block $continue                      └─┐          │\n    //    (body)                                  │ bodyFlow │\n    //   )                                      ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //                                        │ └─┐          │ but does not continue\n    //   (br_if (cond) $loop)                 │   │ condFlow │\n    //                                        │ ┌─┘          │\n    //                                        ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"do-loop|\" + label;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    var possiblyContinues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS) && !possiblyContinues) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      if (possiblyContinues) {\n        bodyStmts = [\n          module.block(continueLabel, bodyStmts)\n        ];\n      }\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        bodyStmts.push(\n          module.br(loopLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        bodyStmts.push(\n          module.br(loopLabel,\n            condExpr\n          )\n        );\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations. Note that\n        // this may be necessary multiple times where locals depend on each other.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(loopLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //                                │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    //                                ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations. Note that this\n      // may be necessary multiple times where locals depend on each other.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //                   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //                   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      expr = this.compileExpression(valueExpression, returnType, constraints);\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      this.currentType = returnType;\n      return module.unreachable();\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // Handle inline return\n    if (flow.isInline) {\n      return !expr\n        ? isLastInBody\n          ? module.nop()\n          : module.br(assert(flow.inlineReturnLabel))\n        : isLastInBody\n          ? expr\n          : this.currentType == Type.void\n            ? module.block(null, [ expr, module.br(assert(flow.inlineReturnLabel)) ])\n            : module.br(assert(flow.inlineReturnLabel), 0, expr);\n    }\n\n    // Otherwise emit a normal return\n    return !expr\n      ? isLastInBody\n        ? module.nop()\n        : module.return()\n      : isLastInBody\n        ? expr\n        : this.currentType == Type.void\n          ? module.block(null, [ expr, module.return() ])\n          : module.return(expr);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      ),\n      false // u32\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, TypeRef.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, TypeRef.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, TypeRef.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    flow.freeScopedLocals();\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type, statement); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT\n          );\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto, statement); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto); // reports\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>TypeRef.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>TypeRef.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>TypeRef.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.makeLocalAssignment(local, initExpr, type, false)\n          );\n        } else {\n          // no need to assign zero\n          if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    this.currentType = Type.void;\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //                                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //                                │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr, false) // bool\n    );\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations. Note that\n      // this may be necessary multiple times where locals depend on each other.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, TypeRef.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMPILED: {\n        let compiled = <CompiledExpression>expression;\n        expr = compiled.expr;\n        this.currentType = compiled.type;\n        break;\n      }\n      case NodeKind.CLASS: {\n        // TODO: compile as class expression\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Block-scoped class declarations or expressions\"\n        );\n        expr = this.module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, expression);\n        this.currentType = currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, expression);\n        this.currentType = currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Converts an expression's result from one type to another. */\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit. */\n    explicit: bool,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(toType.isExternalReference || fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        if (toType.isExternalReference) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            reportNode.range,\n            \"ref.cast\"\n          );\n          this.currentType = toType;\n          return module.unreachable();\n        }\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32ToF64, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64ToF32, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI64 : UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToI32 : UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU64 : UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF32ToU32 : UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n          } else if (toType.isSignedIntegerValue) {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI64 : UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToI32 : UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            let saturating = this.options.hasFeature(Feature.NONTRAPPING_F2I);\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU64 : UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(saturating ? UnaryOp.TruncSatF64ToU32 : UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64ToI32, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32ToI64 : UnaryOp.ExtendU32ToU64,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGt(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeLe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType || !commonType.isNumericValue) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeGe(leftExpr, rightExpr, commonType);\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeEq(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n\n        leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n        leftType = commonType;\n        rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n        rightType = commonType;\n\n        expr = this.makeNe(leftExpr, rightExpr, commonType, expression);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"+\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAdd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeSub(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"*\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeMul(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"**\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makePow(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"/\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeDiv(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isNumericValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"%\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isNumericValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeRem(leftExpr, rightExpr, commonType, expression);\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShl(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShr(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isIntegerValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return module.unreachable();\n        }\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n\n        expr = this.makeShru(leftExpr, rightExpr, rightType);\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeAnd(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeOr(leftExpr, rightExpr, commonType);\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, leftType, right, expression);\n            break;\n          }\n        }\n\n        if (compound) {\n          if (!leftType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", leftType.toString()\n            );\n            return module.unreachable();\n          }\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (!commonType || !commonType.isIntegerValue) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n          leftExpr = this.convertExpression(leftExpr, leftType, commonType, false, left);\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr, rightType, commonType, false, right);\n          rightType = commonType;\n        }\n        expr = this.makeXor(leftExpr, rightExpr, commonType);\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always false\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.FALSE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always true\n            if (condKind == ConditionKind.TRUE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, rightExpr, module.i32(0));\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if copying left is trivial\n          if (expr = module.tryCopyTrivialExpression(leftExpr)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType, left),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr, leftType.isManaged), leftType, left),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toRef())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & Constraints.MUST_WRAP;\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          leftExpr = this.makeIsTrueish(leftExpr, leftType, left);\n\n          // shortcut if lhs is always true\n          let condKind = this.evaluateCondition(leftExpr);\n          if (condKind == ConditionKind.TRUE) {\n            expr = leftExpr;\n          } else {\n            rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n            rightType = this.currentType;\n            rightFlow.freeScopedLocals();\n            rightExpr = this.makeIsTrueish(rightExpr, rightType, right);\n\n            // simplify if lhs is always false\n            if (condKind == ConditionKind.FALSE) {\n              expr = rightExpr;\n            } else {\n              expr = module.if(leftExpr, module.i32(1), rightExpr);\n            }\n          }\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if copying left is trivial\n          if (expr = module.tryCopyTrivialExpression(leftExpr)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr, leftType.isManaged), leftType, left),\n              module.local_get(temp.index, leftType.toRef()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  makeLt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGt(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeLe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeI64\n            : BinaryOp.LeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.LeU64\n            : BinaryOp.LeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeGe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeI64\n            : BinaryOp.GeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.GeU64\n            : BinaryOp.GeU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeEq(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.EqI64\n            : BinaryOp.EqI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AllTrueI8x16,\n          module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.ref_eq(leftExpr, rightExpr);\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeNe(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n      }\n      case TypeKind.V128: {\n        return module.unary(UnaryOp.AnyTrueV128,\n          module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return module.unary(UnaryOp.EqzI32,\n          module.ref_eq(leftExpr, rightExpr)\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF: {\n        this.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.range,\n          \"ref.eq\",\n          type.toString()\n        );\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAdd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AddI64\n            : BinaryOp.AddI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeSub(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeMul(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.MulI64\n            : BinaryOp.MulI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makePow(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits\n    let module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: {\n        return module.select(\n          module.i32(1),\n          module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n          leftExpr,\n          TypeRef.I32\n        );\n      }\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let instance = this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        let expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n        if (type.size < 32) {\n          // TODO: this is necessary because i32PowInstance is generic, and deals with 32-bit integers,\n          // so its flow does not indicate whether returned SMIs are wrapped. worth to avoid?\n          expr = this.ensureSmallIntegerWrap(expr, type);\n        }\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let instance = this.i64PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(CommonNames.ipow64);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"ipow64\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let isWasm64 = this.options.isWasm64;\n        let instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n        if (!instance) {\n          let prototype = this.program.lookup(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n          if (!prototype) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n            );\n            return module.unreachable();\n          }\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          if (isWasm64) {\n            this.i64PowInstance = instance;\n          } else {\n            this.i32PowInstance = instance;\n          }\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      // Math.pow otherwise (result is f64)\n      case TypeKind.F64: {\n        let instance = this.f64PowInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.pow\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.pow));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeDiv(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivI64\n            : BinaryOp.DivI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.DivU64\n            : BinaryOp.DivU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeRem(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    // Cares about garbage bits and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemI64\n            : BinaryOp.RemI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, type);\n        rightExpr = this.ensureSmallIntegerWrap(rightExpr, type);\n        // falls through\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.RemU64\n            : BinaryOp.RemU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n      }\n      case TypeKind.F32: {\n        let instance = this.f32ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Mathf);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Mathf.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n      case TypeKind.F64: {\n        let instance = this.f64ModInstance;\n        if (!instance) {\n          let namespace = this.program.lookup(CommonNames.Math);\n          if (!namespace) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math\"\n            );\n            return module.unreachable();\n          }\n          let namespaceMembers = namespace.members;\n          if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              reportNode.range, \"Math.mod\"\n            );\n            return module.unreachable();\n          }\n          let prototype = assert(namespaceMembers.get(CommonNames.mod));\n          assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n        }\n        if (!instance || !this.compileFunction(instance)) {\n          return module.unreachable();\n        }\n        return this.makeCallDirect(instance, [ leftExpr, rightExpr ], reportNode);\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShl(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the RHS, but only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr << (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShlI32,\n          leftExpr,\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShlI64\n            : BinaryOp.ShlI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits,\n    // and signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        // leftExpr >> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrI32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32: {\n        return module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64: {\n        return module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrI64\n            : BinaryOp.ShrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeShru(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Cares about garbage bits on the LHS, but on the RHS only for types smaller than 5 bits\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.BOOL: return leftExpr;\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        // leftExpr >>> (rightExpr & (7|15))\n        return module.binary(\n          BinaryOp.ShrU32,\n          this.ensureSmallIntegerWrap(leftExpr, type),\n          module.binary(BinaryOp.AndI32, rightExpr, module.i32(type.size - 1))\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.ShrU64\n            : BinaryOp.ShrU32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeAnd(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.AndI64\n            : BinaryOp.AndI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeOr(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.OrI64\n            : BinaryOp.OrI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  makeXor(leftExpr: ExpressionRef, rightExpr: ExpressionRef, type: Type): ExpressionRef {\n    // Does not care about garbage bits or signedness\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          this.options.isWasm64\n            ? BinaryOp.XorI64\n            : BinaryOp.XorI32,\n          leftExpr,\n          rightExpr\n        );\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    leftType: Type,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      assert(leftType.isStrictlyAssignableTo(operatorInstance.signature.parameterTypes[0]));\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    leftExpr = this.convertExpression(leftExpr, leftType, operatorInstance.signature.parameterTypes[0], false, left);\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, target.internalName\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let returnTypeRef = returnType.toRef();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr, returnType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, returnTypeRef)\n            ], valueExpression)\n          ], returnTypeRef);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toRef());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let thisType = classInstance.type;\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          thisType,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        let elementType = this.currentType;\n        if (tee) {\n          let tempTarget = flow.getTempLocal(thisType);\n          let tempElement = flow.getTempLocal(elementType);\n          let returnType = getterInstance.signature.returnType;\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr, thisType.isManaged),\n              module.local_tee(tempElement.index, elementExpr, elementType.isManaged),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toRef()),\n              module.local_get(tempElement.index, tempElement.type.toRef())\n            ], valueExpression)\n          ], returnType.toRef());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n    if (type.isShortIntegerValue) {\n      if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n    }\n    if (tee) { // local = value\n      this.currentType = type;\n      return module.local_tee(localIndex, valueExpr, type.isManaged);\n    } else { // void(local = value)\n      this.currentType = Type.void;\n      return module.local_set(localIndex, valueExpr, type.isManaged);\n    }\n  }\n\n  /** Makes an assignment to a global. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var typeRef = type.toRef();\n\n    valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n    if (tee) { // (global = value), global\n      this.currentType = type;\n      return module.block(null, [\n        module.global_set(global.internalName, valueExpr),\n        module.global_get(global.internalName, typeRef)\n      ], typeRef);\n    } else { // global = value\n      this.currentType = Type.void;\n      return module.global_set(global.internalName,\n        valueExpr\n      );\n    }\n  }\n\n  /** Makes an assignment to a field. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var fieldTypeRef = fieldType.toRef();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (tee) {\n      this.compileField(field);\n      let tempThis = flow.getTempLocal(thisType);\n      let expr = module.block(null, [\n        module.call(field.internalSetterName, [ module.local_tee(tempThis.index, thisExpr, thisType.isManaged), valueExpr ], TypeRef.None),\n        module.call(field.internalGetterName, [ module.local_get(tempThis.index, thisType.toRef()) ], fieldTypeRef)\n      ], fieldTypeRef);\n      flow.freeTempLocal(tempThis);\n      this.currentType = fieldType;\n      return expr;\n    } else {\n      this.compileFieldSetter(field);\n      let expr = module.call(field.internalSetterName, [ thisExpr, valueExpr ], TypeRef.None);\n      this.currentType = Type.void;\n      return expr;\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = classInstance.base;\n      if (!baseClassInstance) {\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.expression.range\n        );\n        return module.unreachable();\n      }\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let sizeTypeRef = this.options.sizeTypeRef;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, sizeTypeRef)\n      );\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall, classInstance.type.isManaged);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var functionArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: first-class function (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            let inlinedValue = local.constantIntegerValue;\n            if (this.options.isWasm64) {\n              functionArg = module.i64(i64_low(inlinedValue), i64_high(inlinedValue));\n            } else {\n              assert(!i64_high(inlinedValue));\n              functionArg = module.i32(i64_low(inlinedValue));\n            }\n          } else {\n            functionArg = module.local_get(local.index, this.options.sizeTypeRef);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          functionArg = module.global_get(global.internalName, global.type.toRef());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          let usizeType = this.options.usizeType;\n          functionArg = module.load(usizeType.byteSize, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            usizeType.toRef(),\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        let type = assert(this.resolver.getTypeOfElement(target));\n\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        functionArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          functionArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      functionArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  /** Compiles the given arguments like a call expression according to the specified context. */\n  private compileCallExpressionLike(\n    /** Called expression. */\n    expression: Expression,\n    /** Call type arguments. */\n    typeArguments: TypeNode[] | null,\n    /** Call arguments. */\n    args: Expression[],\n    /** Diagnostic range. */\n    range: Range,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // Desugaring like this can happen many times. Let's cache the intermediate allocation.\n    var call = this._reusableCallExpression;\n    if (call) {\n      call.expression = expression;\n      call.typeArguments = typeArguments;\n      call.args = args;\n      call.range = range;\n    } else {\n      this._reusableCallExpression = call = Node.createCallExpression(expression, typeArguments, args, range);\n    }\n    return this.compileCallExpression(call, contextualType, constraints);\n  }\n  private _reusableCallExpression: CallExpression | null = null;\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments), // don't update\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range, \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i], Constraints.CONV_IMPLICIT);\n        }\n        // make the inlined call\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      let paramType = parameterTypes[i];\n      let paramExpr = this.compileExpression(argumentExpressions[i], paramType, Constraints.CONV_IMPLICIT);\n      operands[index] = paramExpr;\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands, reportNode, (constraints & Constraints.WILL_DROP) != 0);\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr, paramType.isManaged)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg, thisType.isManaged)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    var isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n    if (isConstructor) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      body.push(\n        this.makeLocalAssignment(argumentLocal, initExpr, initType, false)\n      );\n    }\n    flow.unset(FlowFlags.CTORPARAM_CONTEXT);\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (isConstructor) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    this.currentType = returnType;\n    return module.block(flow.inlineReturnLabel, body, returnType.toRef());\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): string {\n    var name = BuiltinNames.argumentsLength;\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(name, TypeRef.I32, true, module.i32(0));\n    }\n    return name;\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n    var stmts = new Array<ExpressionRef>();\n\n    // forward `this` if applicable\n    var module = this.module;\n    var thisType = originalSignature.thisType;\n    if (thisType) {\n      forwardedOperands[0] = module.local_get(0, thisType.toRef());\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      let paramType = originalParameterTypes[i];\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, paramType.toRef());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    if (original.is(CommonFlags.CONSTRUCTOR)) flow.set(FlowFlags.CTORPARAM_CONTEXT);\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var argumentsLength = this.ensureArgumentsLength();\n    var table = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(argumentsLength, TypeRef.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(argumentsLength, TypeRef.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = this.compileExpression(\n          initializer,\n          type,\n          Constraints.CONV_IMPLICIT\n        );\n        initExpr = module.local_set(operandIndex, initExpr, type.isManaged);\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      table = module.block(names[i + 1], [\n        table,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toRef());\n    }\n    assert(operandIndex == maxOperands);\n\n    stmts.push(\n      table\n    );\n    stmts.push(\n      // assume this will always succeed (can just use name as the reportNode)\n      this.makeCallDirect(original, forwardedOperands, original.declaration.name)\n    );\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      typesToRefs(stub.additionalLocals),\n      module.flatten(stmts, returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      null,\n      module.unreachable()\n    );\n    this.virtualStubs.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    assert(instance.parent.kind == ElementKind.CLASS || instance.parent.kind == ElementKind.INTERFACE);\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var sizeTypeRef = usizeType.toRef();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, sizeTypeRef),\n          sizeTypeRef == TypeRef.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        TypeRef.I32\n      )\n    );\n    var overloadInstances = this.resolver.resolveOverloads(instance);\n    if (overloadInstances) {\n      for (let i = 0, k = overloadInstances.length; i < k; ++i) {\n        let overloadInstance = overloadInstances[i];\n        if (!overloadInstance.is(CommonFlags.COMPILED)) continue; // errored\n        let overloadType = overloadInstance.type;\n        let originalType = instance.type;\n        if (!overloadType.isAssignableTo(originalType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n          );\n          continue;\n        }\n        // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n        let overloadSignature = overloadInstance.signature;\n        let overloadParameterTypes = overloadSignature.parameterTypes;\n        let overloadNumParameters = overloadParameterTypes.length;\n        let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n        paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n        for (let n = 1; n <= numParameters; ++n) {\n          paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toRef());\n        }\n        let needsVarargsStub = false;\n        for (let n = numParameters; n < overloadNumParameters; ++n) {\n          // TODO: inline constant initializers and skip varargs stub\n          paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n          needsVarargsStub = true;\n        }\n        let calledName = needsVarargsStub\n          ? this.ensureVarargsStub(overloadInstance).internalName\n          : overloadInstance.internalName;\n        let returnTypeRef = overloadSignature.returnType.toRef();\n        let stmts = new Array<ExpressionRef>();\n        if (needsVarargsStub) {\n          // Safe to prepend since paramExprs are local.get's\n          stmts.push(module.global_set(this.ensureArgumentsLength(), module.i32(numParameters)));\n        }\n        if (returnType == Type.void) {\n          stmts.push(\n            module.call(calledName, paramExprs, returnTypeRef)\n          );\n          stmts.push(\n            module.return()\n          );\n        } else {\n          stmts.push(\n            module.return(\n              module.call(calledName, paramExprs, returnTypeRef)\n            )\n          );\n        }\n        let classInstance = assert(overloadInstance.getClassOrInterface());\n        builder.addCase(classInstance.id, stmts);\n        // Also alias each extendee inheriting this exact overload\n        let extendees = classInstance.getAllExtendees(instance.declaration.name.text); // without get:/set:\n        for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n          let extendee = _values[a];\n          builder.addCase(extendee.id, stmts);\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, sizeTypeRef); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toRef());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toRef());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.paramRefs,\n      stub.signature.resultRefs,\n      [ TypeRef.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toRef())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  /** Marks managed call operands for the shadow stack. */\n  private operandsTostack(signature: Signature, operands: ExpressionRef[]): void {\n    if (!this.options.stackSize) return;\n    var module = this.module;\n    var operandIndex = 0;\n    var thisType = signature.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        let operand = operands[0];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n    }\n    var parameterIndex = 0;\n    var parameterTypes = signature.parameterTypes;\n    assert(parameterTypes.length >= operands.length - operandIndex);\n    while (operandIndex < operands.length) {\n      let paramType = parameterTypes[parameterIndex];\n      if (paramType.isManaged) {\n        let operand = operands[operandIndex];\n        let precomp = module.runExpression(operand, ExpressionRunnerFlags.Default);\n        if (!isConstZero(precomp)) { // otherwise unnecessary\n          operands[operandIndex] = module.tostack(operand);\n        }\n      }\n      ++operandIndex;\n      ++parameterIndex;\n    }\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toRef()),\n                      global.type, parameterTypes[i], false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant && !instance.is(CommonFlags.MODULE_IMPORT)) {\n        let original = instance;\n        instance = this.ensureVarargsStub(instance);\n        if (!this.compileFunction(instance)) return module.unreachable();\n        instance.flow.flags = original.flow.flags;\n        let returnTypeRef = returnType.toRef();\n        // We know the last operand is optional and omitted, so inject setting\n        // ~argumentsLength into that operand, which is always safe.\n        let lastOperand = operands[maxOperands - 1];\n        assert(!(getSideEffects(lastOperand, module.ref) & SideEffects.WritesGlobal));\n        let lastOperandType = parameterTypes[maxArguments - 1];\n        operands[maxOperands - 1] = module.block(null, [\n          module.global_set(this.ensureArgumentsLength(), module.i32(numArguments)),\n          lastOperand\n        ], lastOperandType.toRef());\n        this.operandsTostack(instance.signature, operands);\n        let expr = module.call(instance.internalName, operands, returnTypeRef);\n        if (returnType != Type.void && immediatelyDropped) {\n          expr = module.drop(expr);\n          this.currentType = Type.void;\n        } else {\n          this.currentType = returnType;\n        }\n        return expr;\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    if (operands) this.operandsTostack(instance.signature, operands);\n    var expr = module.call(instance.internalName, operands, returnType.toRef());\n    this.currentType = returnType;\n    return expr;\n  }\n\n  /** Compiles an indirect call to a first-class function. */\n  compileCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, functionArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to a first-class function. */\n  makeCallIndirect(\n    signature: Signature,\n    functionArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    var argumentsLength = this.ensureArgumentsLength();\n    var sizeTypeRef = this.options.sizeTypeRef;\n    if (getSideEffects(functionArg, module.ref) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(functionArg));\n      functionArg = module.block(null, [\n        module.local_set(temp.index, functionArg, true), // Function\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, sizeTypeRef)\n      ], sizeTypeRef);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      functionArg = module.block(null, [\n        module.global_set(argumentsLength, module.i32(numArguments)),\n        functionArg\n      ], sizeTypeRef);\n    }\n    if (operands) this.operandsTostack(signature, operands);\n    var expr = module.call_indirect(\n      module.load(4, false, functionArg, TypeRef.I32), // ._index\n      operands,\n      signature.paramRefs,\n      signature.resultRefs\n    );\n    this.currentType = returnType;\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toRef());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var isNamed = declaration.name.text.length > 0;\n    var isSemanticallyAnonymous = !isNamed || contextualType != Type.void;\n    var prototype = new FunctionPrototype(\n      isSemanticallyAnonymous\n        ? (isNamed ? declaration.name.text + \"|\" : \"anonymous|\") + (actualFunction.nextAnonymousId++).toString()\n        : declaration.name.text,\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n    var module = this.module;\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    var contextualSignature = contextualType.signatureReference;\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = contextualSignature.type;\n      if (!worked) return module.unreachable();\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      instance.flow.outer = flow;\n      let worked = this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n      if (!worked) return module.unreachable();\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    var expr = this.options.isWasm64\n      ? module.i64(i64_low(offset), i64_high(offset))\n      : module.i32(i64_low(offset));\n\n    // add a constant local referring to the function if applicable\n    if (!isSemanticallyAnonymous) {\n      let fname = instance.name;\n      let existingLocal = flow.getScopedLocal(fname);\n      if (existingLocal) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existingLocal.declaration.name.range,\n            fname\n          );\n        } else { // scoped locals are shared temps that don't track declarations\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, fname\n          );\n        }\n      } else {\n        let ftype = instance.type;\n        let local = flow.addScopedLocal(instance.name, ftype);\n        flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        expr = module.local_tee(local.index, expr, ftype.isManaged);\n      }\n    }\n\n    return expr;\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          return this.makeZero(contextualType, expression);\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._this_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          }\n          if (!(constraints & Constraints.IS_THIS)) {\n            let parent = actualFunction.parent;\n            assert(parent.kind == ElementKind.CLASS);\n            this.checkFieldInitialization(<Class>parent, expression);\n          }\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toRef());\n      }\n      case NodeKind.SUPER: {\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (flow.is(FlowFlags.CTORPARAM_CONTEXT)) {\n            this.error(\n              DiagnosticCode._super_cannot_be_referenced_in_constructor_arguments,\n              expression.range\n            );\n          } else if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toRef());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toRef());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toRef());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.funcref;\n          return module.ref_func(functionInstance.internalName, TypeRef.Funcref); // TODO\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var sizeTypeRef = actualType.toRef();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          sizeTypeRef == TypeRef.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              sizeTypeRef == TypeRef.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr, actualType.isManaged),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, sizeTypeRef),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var sizeTypeRef = actualType.toRef();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            sizeTypeRef == TypeRef.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], TypeRef.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.TEMPLATE: {\n        assert(!implicitlyNegate);\n        return this.compileTemplateLiteral(<TemplateLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  private compileTemplateLiteral(\n    expression: TemplateLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var tag = expression.tag;\n    var parts = expression.parts;\n    var numParts = parts.length;\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    assert(numExpressions == numParts - 1);\n\n    var module = this.module;\n    var stringInstance = this.program.stringInstance;\n    var stringType = stringInstance.type;\n\n    if (tag === null) {\n      // Shortcut if just a (multi-line) string\n      if (numParts == 1) {\n        return this.ensureStaticString(parts[0]);\n      }\n\n      // Shortcut for `${expr}`, `<prefix>${expr}`, `${expr}<suffix>`\n      if (numParts == 2) {\n        let expression = expressions[0];\n        let lhsLen = parts[0].length;\n        let rhsLen = parts[1].length;\n        // Shortcut for `${expr}`  ->   expr.toString()\n        if (!lhsLen && !rhsLen) {\n          return this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n        }\n        // Shortcuts for\n        // `<prefix>${expr}`  ->  \"<prefix>\" + expr.toString()\n        // `${expr}<suffix>`  ->  expr.toString() + \"<suffix>\"\n        let hasPrefix = lhsLen != 0;\n        // @ts-ignore: cast\n        if (hasPrefix ^ (rhsLen != 0)) {\n          let lhs: ExpressionRef;\n          let rhs: ExpressionRef;\n          let expr = this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          );\n          if (hasPrefix) {\n            lhs = this.ensureStaticString(parts[0]);\n            rhs = expr;\n          } else {\n            // suffix\n            lhs = expr;\n            rhs = this.ensureStaticString(parts[1]);\n          }\n          let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n          return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n        }\n      }\n\n      // Shortcut for `${exprA}${exprB}`  ->  exprA.toString() + exprB.toString()\n      if (numParts == 3 && !parts[0].length && !parts[1].length && !parts[2].length) {\n        let exprA = expressions[0];\n        let exprB = expressions[1];\n\n        let lhs = this.makeToString(\n          this.compileExpression(exprA, stringType),\n          this.currentType, exprA\n        );\n        let rhs = this.makeToString(\n          this.compileExpression(exprB, stringType),\n          this.currentType, exprB\n        );\n        let concatMethod = assert(stringInstance.getMethod(\"concat\"));\n        return this.makeCallDirect(concatMethod, [ lhs, rhs ], expression);\n      }\n\n      // Compile to a `StaticArray<string>#join(\"\") in the general case\n      let length = numParts + numExpressions;\n      let values = new Array<usize>(length);\n      values[0] = this.ensureStaticString(parts[0]);\n      for (let i = 1; i < numParts; ++i) {\n        values[2 * i - 1] = module.usize(0);\n        values[2 * i] = this.ensureStaticString(parts[i]);\n      }\n      let arrayInstance = assert(this.resolver.resolveClass(this.program.staticArrayPrototype, [ stringType ]));\n      let segment = this.addStaticBuffer(stringType, values, arrayInstance.id);\n      let offset = i64_add(segment.offset, i64_new(this.program.totalOverhead));\n      let joinInstance = assert(arrayInstance.getMethod(\"join\"));\n      let indexedSetInstance = assert(arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true));\n      let stmts = new Array<ExpressionRef>(2 * numExpressions + 1);\n      // Use one local per toString'ed subexpression, since otherwise recursion on the same\n      // static array would overwrite already prepared parts. Avoids a temporary array.\n      let temps = new Array<Local>(numExpressions);\n      let flow = this.currentFlow;\n      for (let i = 0; i < numExpressions; ++i) {\n        let expression = expressions[i];\n        let temp = flow.getTempLocal(stringType);\n        temps[i] = temp;\n        stmts[i] = module.local_set(temp.index,\n          this.makeToString(\n            this.compileExpression(expression, stringType),\n            this.currentType, expression\n          ),\n          true\n        );\n      }\n      // Populate the static array with the toString'ed subexpressions and call .join(\"\")\n      for (let i = 0; i < numExpressions; ++i) {\n        stmts[numExpressions + i] = this.makeCallDirect(indexedSetInstance, [\n          module.usize(offset),\n          module.i32(2 * i + 1),\n          module.local_get(temps[i].index, stringType.toRef())\n        ], expression);\n        flow.freeTempLocal(temps[i]);\n      }\n      stmts[2 * numExpressions] = this.makeCallDirect(joinInstance, [\n        module.usize(offset),\n        this.ensureStaticString(\"\")\n      ], expression);\n      return module.flatten(stmts, stringType.toRef());\n    }\n\n    // Try to find out whether the template function takes a full-blown TemplateStringsArray or if\n    // it is sufficient to compile to a normal array. While technically incorrect, this allows us\n    // to avoid generating unnecessary static data that is not explicitly signaled to be used.\n    var tsaArrayInstance = this.program.templateStringsArrayInstance;\n    var arrayInstance = tsaArrayInstance;\n    var target = this.resolver.lookupExpression(tag, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n    if (target) {\n      switch (target.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instance = this.resolver.resolveFunction(\n            <FunctionPrototype>target,\n            null,\n            uniqueMap<string,Type>(),\n            ReportMode.SWALLOW\n          );\n          if (!instance) break;\n          target = instance;\n          // fall-through\n        }\n        case ElementKind.FUNCTION: {\n          let instance = <Function>target;\n          let parameterTypes = instance.signature.parameterTypes;\n          if (parameterTypes.length) {\n            let first = parameterTypes[0].getClass();\n            if (first !== null && !first.extends(tsaArrayInstance.prototype)) {\n              arrayInstance = assert(this.resolver.resolveClass(this.program.arrayPrototype, [ stringType ]));\n            }\n          }\n          break;\n        }\n      }\n    }\n\n    // Compile to a call to the tag function\n    var rawParts = expression.rawParts;\n    assert(rawParts.length == numParts);\n    var partExprs = new Array<ExpressionRef>(numParts);\n    for (let i = 0; i < numParts; ++i) {\n      partExprs[i] = this.ensureStaticString(parts[i]);\n    }\n    var arraySegment: MemorySegment;\n    if (arrayInstance == tsaArrayInstance) {\n      var rawExprs = new Array<ExpressionRef>(numParts);\n      for (let i = 0; i < numParts; ++i) {\n        rawExprs[i] = this.ensureStaticString(rawParts[i]);\n      }\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n      var rawHeaderSegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, rawExprs)\n      );\n      arrayInstance.writeField(\"raw\",\n        i64_add(rawHeaderSegment.offset, i64_new(this.program.totalOverhead)),\n        arraySegment.buffer\n      );\n    } else {\n      arraySegment = this.addStaticArrayHeader(stringType,\n        this.addStaticBuffer(this.options.usizeType, partExprs),\n        arrayInstance\n      );\n    }\n\n    // Desugar to compileCallExpression\n    var args = expressions.slice();\n    args.unshift(\n      Node.createCompiledExpression(\n        module.usize(i64_add(arraySegment.offset, i64_new(this.program.totalOverhead))),\n        arrayInstance.type,\n        this.program.nativeRange\n      )\n    );\n    // TODO: Requires ReadonlyArray to be safe\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      expression.range, \"Tagged template literals\"\n    );\n    return this.compileCallExpressionLike(tag, null, args, expression.range, stringType);\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let totalOverhead = program.totalOverhead;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(totalOverhead));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(totalOverhead));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        return this.makeNewArray(arrayInstance, length, bufferAddress, expression);\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeNewArray(arrayInstance, length, i64_new(0), expression),\n        arrayType.isManaged\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.getMember(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, arrayTypeRef),\n          arrayTypeRef,\n          (<Field>dataStartMember).memoryOffset\n        ),\n        true // ArrayBuffer\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // this[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  /** Makes a new array instance from a static buffer segment. */\n  private makeNewArray(\n    /** Concrete array class. */\n    arrayInstance: Class,\n    /** Length of the array. */\n    length: i32,\n    /** Source address to copy from. Array is zeroed if `0`. */\n    source: i64,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    assert(!arrayInstance.extends(program.staticArrayPrototype));\n    var elementType = arrayInstance.getArrayValueType(); // asserts\n\n    // __newArray(length, alignLog2, classId, staticBuffer)\n    var expr = this.makeCallDirect(program.newArrayInstance, [\n      module.i32(length),\n      program.options.isWasm64\n        ? module.i64(elementType.alignLog2)\n        : module.i32(elementType.alignLog2),\n      module.i32(arrayInstance.id),\n      program.options.isWasm64\n        ? module.i64(i64_low(source), i64_high(source))\n        : module.i32(i64_low(source))\n    ], reportNode);\n    this.currentType = arrayInstance.type;\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType, Constraints.CONV_IMPLICIT);\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.totalOverhead));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __newBuffer(bufferSize, id, buffer)\n        let expr = this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id),\n          isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var indexedSet = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!indexedSet) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var arrayTypeRef = arrayType.toRef();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __newBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.newBufferInstance, [\n          isWasm64\n            ? module.i64(bufferSize)\n            : module.i32(bufferSize),\n          module.i32(arrayInstance.id)\n        ], expression),\n        arrayType.isManaged\n      )\n    );\n    for (let i = 0; i < length; ++i) {\n      // array[i] = value\n      stmts.push(\n        module.call(indexedSet.internalName, [\n          module.local_get(tempThis.index, arrayTypeRef),\n          module.i32(i),\n          values[i]\n        ], TypeRef.None)\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, arrayTypeRef)\n    );\n    flow.freeTempLocal(tempThis);\n    if (length) this.compileFunction(indexedSet);\n    this.currentType = arrayType;\n    return module.flatten(stmts, arrayTypeRef);\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(classType);\n    var classTypeRef = classType.toRef();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member = classReference.getMember(memberName);\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT);\n      exprs.push(\n        module.call(fieldInstance.internalSetterName, [\n          module.local_get(tempLocal.index, classTypeRef),\n          expr\n        ], TypeRef.None)\n      );\n      this.compileFieldSetter(fieldInstance);\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.call(fieldInstance.internalSetterName, [\n              module.local_get(tempLocal.index, classTypeRef),\n              this.makeZero(fieldType, expression)\n            ], TypeRef.None)\n          );\n          this.compileFieldSetter(fieldInstance);\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.NONE, expression),\n        classType.isManaged\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, classTypeRef)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, classTypeRef);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.prototype == classPrototype &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      // e.g. `arr: Array<T> = new Array()`\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class. note that we cannot just\n      // call the base ctor since the derived class may have additional fields.\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n      }\n\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      if (classInstance.is(CommonFlags.MODULE_EXPORT)) {\n        instance.set(CommonFlags.MODULE_EXPORT);\n      }\n      classInstance.constructorInstance = instance;\n      let members = classInstance.members;\n      if (!members) classInstance.members = members = new Map();\n      members.set(\"constructor\", instance.prototype);\n\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let sizeTypeRef = this.options.sizeTypeRef;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   this = <COND_ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      stmts.push(\n        this.makeConditionalAllocation(classInstance, 0)\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, sizeTypeRef);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toRef());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false),\n            baseClass.type.isManaged\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      stmts.push(\n        module.local_get(0, sizeTypeRef)\n      );\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<TypeRef>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toRef());\n      }\n      let funcRef = module.addFunction(\n        instance.internalName,\n        signature.paramRefs,\n        signature.resultRefs,\n        varTypes,\n        module.flatten(stmts, sizeTypeRef)\n      );\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect(\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != TypeRef.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toRef());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, TypeRef.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toRef(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = propertyInstance.getterInstance;\n        if (!getterInstance) return module.unreachable(); // failed earlier\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    this.error(\n      DiagnosticCode.Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType);\n    var ifThenType = this.currentType;\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType);\n    var ifElseType = this.currentType;\n\n    if (ctxType == Type.void) { // values, including type mismatch, are irrelevant\n      if (ifThenType != Type.void) {\n        ifThenExpr = module.drop(ifThenExpr);\n        ifThenType = Type.void;\n      }\n      if (ifElseType != Type.void) {\n        ifElseExpr = module.drop(ifElseExpr);\n        ifElseType = Type.void;\n      }\n      this.currentType = Type.void;\n    } else {\n      let commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n      if (!commonType) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          ifElse.range, ifElseType.toString(), ifThenType.toString()\n        );\n        this.currentType = ctxType;\n        return module.unreachable();\n      }\n      ifThenExpr = this.convertExpression(ifThenExpr, ifThenType, commonType, false, ifThen);\n      ifThenType = commonType;\n      ifElseExpr = this.convertExpression(ifElseExpr, ifElseType, commonType, false, ifElse);\n      ifElseType = commonType;\n      this.currentType = commonType;\n    }\n\n    ifThenFlow.freeScopedLocals();\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    return module.if(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue,\n        this.currentType.isManaged\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var typeRef = tempLocal.type.toRef();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, typeRef)\n    ], typeRef); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr, this.currentType, this.currentType.intType, false, expression.operand);\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      case Token.DOT_DOT_DOT: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range, \"Spread operator\"\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.sizeTypeRef)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend8I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.Extend16I32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.I31REF:\n      case TypeKind.DATAREF: {\n        return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode)\n            && this.checkFeatureEnabled(Feature.GC, reportNode);\n      }\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    var parameterNodes = reportNode.parameters;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      let parameterReportNode: Node;\n      if (parameterNodes.length > i) parameterReportNode = parameterNodes[i];\n      else parameterReportNode = reportNode;\n      if (!this.checkTypeSupported(parameterTypes[i], parameterReportNode)) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    let type = getExpressionType(expr);\n    if (type == TypeRef.Unreachable)\n      return ConditionKind.UNKNOWN;\n\n    assert(type == TypeRef.I32);\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF: return module.ref_null(type.toRef());\n      case TypeKind.I31REF: return module.i31_new(module.i32(0));\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n      case TypeKind.I31REF: return module.i31_new(module.i32(1));\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32ToI32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64ToI64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.FUNCREF:\n      case TypeKind.EXTERNREF:\n      case TypeKind.ANYREF:\n      case TypeKind.EQREF:\n      case TypeKind.DATAREF:\n      case TypeKind.I31REF: {\n        // Needs to be true (i.e. not zero) when the ref is _not_ null,\n        // which means `ref.is_null` returns false (i.e. zero).\n        return module.unary(UnaryOp.EqzI32, module.ref_is(RefIsOp.RefIsNull, expr));\n\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes a string conversion of the given expression. */\n  makeToString(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var stringType = this.program.stringInstance.type;\n    if (type == stringType) {\n      return expr;\n    }\n    var classType = type.getClassOrWrapper(this.program);\n    if (classType) {\n      let toStringInstance = classType.getMethod(\"toString\");\n      if (toStringInstance) {\n        let toStringSignature = toStringInstance.signature;\n        if (!this.checkCallSignature( // reports\n          toStringSignature,\n          0,\n          true,\n          reportNode\n        )) {\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        if (!type.isStrictlyAssignableTo(assert(toStringSignature.thisType))) {\n          this.errorRelated(\n            DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n            reportNode.range, toStringInstance.identifierAndSignatureRange\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        let toStringReturnType = toStringSignature.returnType;\n        if (!toStringReturnType.isStrictlyAssignableTo(stringType)) {\n          this.errorRelated(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            reportNode.range, toStringInstance.identifierAndSignatureRange, toStringReturnType.toString(), stringType.toString()\n          );\n          this.currentType = stringType;\n          return this.module.unreachable();\n        }\n        return this.makeCallDirect(toStringInstance, [ expr ], reportNode);\n      }\n    }\n    this.error(\n      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n      reportNode.range, type.toString(), stringType.toString()\n    );\n    this.currentType = stringType;\n    return this.module.unreachable();\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    if (classInstance.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let allocInstance = program.allocInstance;\n      this.compileFunction(allocInstance);\n      return module.call(allocInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset)\n      ], options.sizeTypeRef);\n    } else {\n      let newInstance = program.newInstance;\n      this.compileFunction(newInstance);\n      return module.call(newInstance.internalName, [\n        options.isWasm64\n          ? module.i64(classInstance.nextMemoryOffset)\n          : module.i32(classInstance.nextMemoryOffset),\n        module.i32(classInstance.id)\n      ], options.sizeTypeRef);\n    }\n  }\n\n  /** Makes a conditional allocation where `this` might not have been initialized yet. */\n  makeConditionalAllocation(\n    classInstance: Class,\n    thisIndex: i32\n  ): ExpressionRef {\n    var module = this.module;\n    var classType = classInstance.type;\n    var classTypeRef = classType.toRef();\n    assert(classTypeRef == this.options.sizeTypeRef);\n    return module.if(\n      module.unary(classTypeRef == TypeRef.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n        module.local_get(thisIndex, classTypeRef)\n      ),\n      module.local_set(thisIndex,\n        this.makeAllocation(classInstance),\n        classInstance.type.isManaged\n      )\n    );\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline ? flow.lookupLocal(CommonNames.this_)!.index : 0;\n    var sizeTypeRef = this.options.sizeTypeRef;\n    var nonParameterFields: Field[] | null = null;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldPrototype = field.prototype;\n      let parameterIndex = fieldPrototype.parameterIndex;\n\n      // Defer non-parameter fields until parameter fields are initialized\n      if (parameterIndex < 0) {\n        if (!nonParameterFields) nonParameterFields = new Array();\n        nonParameterFields.push(field);\n        continue;\n      }\n\n      // Initialize constructor parameter field\n      let fieldType = field.type;\n      let fieldTypeRef = fieldType.toRef();\n      assert(!fieldPrototype.initializerNode);\n      this.compileFieldSetter(field);\n      stmts.push(\n        module.call(field.internalSetterName, [\n          module.local_get(thisLocalIndex, sizeTypeRef),\n          module.local_get(\n            isInline\n              ? flow.lookupLocal(field.name)!.index\n              : 1 + parameterIndex, // `this` is local 0\n            fieldTypeRef\n          )\n        ], TypeRef.None)\n      );\n    }\n\n    // Initialize deferred non-parameter fields\n    if (nonParameterFields) {\n      for (let i = 0, k = nonParameterFields.length; i < k; ++i) {\n        let field = unchecked(nonParameterFields[i]);\n        let fieldType = field.type;\n        let fieldPrototype = field.prototype;\n        let initializerNode = fieldPrototype.initializerNode;\n        assert(fieldPrototype.parameterIndex < 0);\n        this.compileFieldSetter(field);\n        stmts.push(\n          module.call(field.internalSetterName, [\n            module.local_get(thisLocalIndex, sizeTypeRef),\n            initializerNode // use initializer if present, otherwise initialize with zero\n              ? this.compileExpression(initializerNode, fieldType, Constraints.CONV_IMPLICIT)\n              : this.makeZero(fieldType, fieldPrototype.declaration)\n          ], TypeRef.None)\n        );\n      }\n    }\n\n    this.currentType = Type.void;\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        TypeRef.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr, type.isManaged),\n      module.local_get(temp.index, type.toRef()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    if (!toType.isNullableReference || flow.isNonnull(expr, type)) {\n      // Simplify if the value cannot be `null`. If toType is non-nullable, a\n      // null-check would have been emitted separately so is not necessary here.\n      expr = module.if(\n        module.call(instanceofInstance.internalName, [\n          module.local_tee(temp.index, expr, type.isManaged),\n          module.i32(toType.classReference!.id)\n        ], TypeRef.I32),\n        module.local_get(temp.index, type.toRef()),\n        this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n      );\n    } else {\n      expr = module.if(\n        module.local_tee(temp.index, expr, type.isManaged),\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(temp.index, type.toRef()),\n            module.i32(toType.classReference!.id)\n          ], TypeRef.I32),\n          module.local_get(temp.index, type.toRef()),\n          this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n        ),\n        module.usize(0)\n      );\n    }\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) {\n      sb.push(\"export function \");\n    } else {\n      if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n      if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n      if (element.is(CommonFlags.GET)) sb.push(\"get \");\n      else if (element.is(CommonFlags.SET)) sb.push(\"set \");\n    }\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      sb.push(element.getParameterName(i));\n      if (i >= requiredParameters) sb.push(\"?\");\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    if (!isInterface) {\n      indent(sb, this.indentLevel);\n      sb.push(\"static wrap(ptr: usize): \");\n      sb.push(name);\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"valueOf(): usize;\\n\");\n    }\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var options = this.program.options;\n    sb.push(\"type i8 = number;\\n\");\n    sb.push(\"type i16 = number;\\n\");\n    sb.push(\"type i32 = number;\\n\");\n    sb.push(\"type i64 = bigint;\\n\");\n    if (options.isWasm64) {\n      sb.push(\"type isize = bigint;\\n\");\n    } else {\n      sb.push(\"type isize = number;\\n\");\n    }\n    sb.push(\"type u8 = number;\\n\");\n    sb.push(\"type u16 = number;\\n\");\n    sb.push(\"type u32 = number;\\n\");\n    sb.push(\"type u64 = bigint;\\n\");\n    if (options.isWasm64) {\n      sb.push(\"type usize = bigint;\\n\");\n    } else {\n      sb.push(\"type usize = number;\\n\");\n    }\n    sb.push(\"type f32 = number;\\n\");\n    sb.push(\"type f64 = number;\\n\");\n    sb.push(\"type bool = boolean | number;\\n\");\n    this.walk();\n    if (options.exportMemory) {\n      sb.push(\"export const memory: WebAssembly.Memory;\\n\");\n    }\n    if (options.exportTable) {\n      sb.push(\"export const table: WebAssembly.Table;\\n\");\n    }\n    if (options.explicitStart) {\n      sb.push(\"export function _start(): void;\\n\");\n    }\n    if (options.exportRuntime) {\n      sb.push(\"export function __new(size: usize, id: u32): usize;\\n\");\n      sb.push(\"export function __pin(ptr: usize): usize;\\n\");\n      sb.push(\"export function __unpin(ptr: usize): void;\\n\");\n      sb.push(\"export function __collect(): void;\\n\");\n      sb.push(\"export const __rtti_base: usize;\\n\");\n    }\n    sb.push(\"export const __setArgumentsLength: ((n: i32) => void) | undefined;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Transform_0_1 = 109,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime = 234,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Exported_generic_function_or_class_has_no_concrete_instances = 907,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal = 1351,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _this_cannot_be_referenced_in_constructor_arguments = 2333,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  _super_cannot_be_referenced_in_constructor_arguments = 2336,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  Cannot_redeclare_block_scoped_variable_0 = 2451,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 109: return \"Transform '{0}': {1}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 234: return \"Expression refers to a static element that does not compile to a value at runtime.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 907: return \"Exported generic function or class has no concrete instances.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 1351: return \"An identifier or keyword cannot immediately follow a numeric literal.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2333: return \"'this' cannot be referenced in constructor arguments.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2336: return \"'super' cannot be referenced in constructor arguments.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2451: return \"Cannot redeclare block-scoped variable '{0}'\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak,\n  COLOR_CYAN,\n  COLOR_YELLOW,\n  COLOR_RED,\n  COLOR_MAGENTA,\n  COLOR_RESET,\n  isColorsEnabled,\n  setColorsEnabled\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_CYAN;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n  var wasColorsEnabled = setColorsEnabled(useColors);\n\n  // general information\n  var sb: string[] = [];\n  if (isColorsEnabled()) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  setColorsEnabled(wasColorsEnabled);\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nfunction formatDiagnosticContext(range: Range): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (isColorsEnabled()) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  TemplateLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.TEMPLATE: {\n        this.visitTemplateLiteralExpression(<TemplateLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string): void {\n    var sb = this.sb;\n    sb.push(\"\\\"\");\n    this.visitRawString(str, CharCode.DOUBLEQUOTE);\n    sb.push(\"\\\"\");\n  }\n\n  private visitRawString(str: string, quote: CharCode): void {\n    var sb = this.sb;\n    var off = 0;\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (quote == CharCode.DOUBLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (quote == CharCode.SINGLEQUOTE) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKTICK: {\n          if (quote == CharCode.BACKTICK) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\`\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitTemplateLiteralExpression(node: TemplateLiteralExpression): void {\n    var sb = this.sb;\n    var tag = node.tag;\n    var parts = node.parts;\n    var expressions = node.expressions;\n    if (tag) this.visitNode(tag);\n    sb.push(\"`\");\n    this.visitRawString(parts[0], CharCode.BACKTICK);\n    assert(parts.length == expressions.length + 1);\n    for (let i = 0, k = expressions.length; i < k; ++i) {\n      sb.push(\"${\");\n      this.visitNode(expressions[i]);\n      sb.push(\"}\");\n      this.visitRawString(parts[i + 1], CharCode.BACKTICK);\n    }\n    sb.push(\"`\");\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members == null) {\n      sb.push(\"export *\");\n    } else if (members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Field,\n  Class,\n  TypedElement\n} from \"./program\";\n\nimport {\n  TypeRef,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n  /** This is a flow compiling a constructor parameter. */\n  CTORPARAM_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Outer flow. Only relevant for first-class functions. */\n  outer: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    branch.outer = this.outer;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toRef()) {\n      case <u32>TypeRef.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>TypeRef.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>TypeRef.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>TypeRef.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>TypeRef.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>TypeRef.Funcref: { temps = parentFunction.tempFuncrefs; break; }\n      case <u32>TypeRef.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>TypeRef.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case <u32>TypeRef.Eqref: { temps = parentFunction.tempEqrefs; break; }\n      case <u32>TypeRef.I31ref: { temps = parentFunction.tempI31refs; break; }\n      case <u32>TypeRef.Dataref: { temps = parentFunction.tempDatarefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toRef()) {\n      case <u32>TypeRef.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Funcref: {\n        let tempFuncrefs = parentFunction.tempFuncrefs;\n        if (tempFuncrefs) temps = tempFuncrefs;\n        else parentFunction.tempFuncrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Anyref: {\n        let tempAnyrefs = parentFunction.tempAnyrefs;\n        if (tempAnyrefs) temps = tempAnyrefs;\n        else parentFunction.tempAnyrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Eqref: {\n        let tempEqrefs = parentFunction.tempEqrefs;\n        if (tempEqrefs) temps = tempEqrefs;\n        else parentFunction.tempEqrefs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.I31ref: {\n        let tempI31refs = parentFunction.tempI31refs;\n        if (tempI31refs) temps = tempI31refs;\n        else parentFunction.tempI31refs = temps = [];\n        break;\n      }\n      case <u32>TypeRef.Dataref: {\n        let tempDatarefs = parentFunction.tempDatarefs;\n        if (tempDatarefs) temps = tempDatarefs;\n        else parentFunction.tempDatarefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type, declarationNode: Node): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else if (scopedLocals.has(name)) {\n      this.parentFunction.program.error(\n        DiagnosticCode.Cannot_redeclare_block_scoped_variable_0,\n        declarationNode.range, name\n      );\n    }\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) {\n      this.scopedLocals = scopedLocals = new Map();\n    } else if (scopedLocals.has(name)) {\n      let existingLocal = assert(scopedLocals.get(name));\n      if (reportNode) {\n        if (!existingLocal.declaration.range.source.isNative) {\n          this.parentFunction.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range,\n            existingLocal.declaration.name.range,\n            name\n          );\n        } else {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range, name\n          );\n        }\n      }\n      return existingLocal;\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags != null && fieldFlags.has(field)) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      thisLocalFlags[i] = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & (FlowFlags.UNCHECKED_CONTEXT | FlowFlags.CTORPARAM_CONTEXT));\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        thisLocalFlags[i] = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == TypeRef.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == TypeRef.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == TypeRef.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == TypeRef.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL || global.kind == ElementKind.ENUMVALUE);\n        return canConversionOverflow((<TypedElement>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n\n          // sign extensions overflow if result can have high garbage bits in the target type\n          case UnaryOp.Extend8I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 8);\n          case UnaryOp.Extend8I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 8);\n          case UnaryOp.Extend16I32: return type.size < (type.isUnsignedIntegerValue ? 32 : 16);\n          case UnaryOp.Extend16I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 16);\n          case UnaryOp.Extend32I64: return type.size < (type.isUnsignedIntegerValue ? 64 : 32);\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>TypeRef.I32: { value = getConstValueI32(expr); break; }\n          case <u32>TypeRef.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>TypeRef.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>TypeRef.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\nexport { findUsedLocals } from \"./passes/findusedlocals\";\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sets the `exportRuntime` option. */\nexport function setExportRuntime(options: Options, exportRuntime: bool): void {\n  options.exportRuntime = exportRuntime;\n}\n\n/** Default stack size. */\nexport const DEFAULT_STACK_SIZE = 16384;\n\n/** Sets the `stackSize` option. */\nexport function setStackSize(options: Options, stackSize: i32): void {\n  options.stackSize = stackSize;\n}\n\n/** Sets the bundle semantic version. */\nexport function setBundleVersion(\n  options: Options,\n  bundleMajorVersion: i32,\n  bundleMinorVersion: i32,\n  bundlePatchVersion: i32,\n): void {\n  options.bundleMajorVersion = bundleMajorVersion;\n  options.bundleMinorVersion = bundleMinorVersion;\n  options.bundlePatchVersion = bundlePatchVersion;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n/** Garbage collection. */\nexport const FEATURE_GC = Feature.GC;\n/** Memory64. */\nexport const FEATURE_MEMORY64 = Feature.MEMORY64;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { BuiltinNames } from \"./builtins\";\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\n/** A Binaryen-compatible index. */\nexport type Index = binaryen.Index;\n/** Reference to a Binaryen-compatible string. */\nexport type StringRef = binaryen.StringRef;\n/** Reference to a Binaryen module. */\nexport type ModuleRef = binaryen.ModuleRef;\n/** Reference to a Binaryen function. */\nexport type FunctionRef = binaryen.FunctionRef;\n/** Reference to a Binaryen expression. */\nexport type ExpressionRef = binaryen.ExpressionRef;\n/** Reference to a Binaryen global. */\nexport type GlobalRef = binaryen.GlobalRef;\n/** Reference to a Binaryen tag. */\nexport type TagRef = binaryen.TagRef;\n/** Reference to a Binaryen import. */\nexport type ImportRef = binaryen.ImportRef;\n/** Reference to a Binaryen export. */\nexport type ExportRef = binaryen.ExportRef;\n/** Reference to a Binaryen relooper. */\nexport type RelooperRef = binaryen.RelooperRef;\n/** Reference to a Binaryen relooper block. */\nexport type RelooperBlockRef = binaryen.RelooperBlockRef;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\n/** Reference to a Binaryen type. */\nexport type TypeRef = binaryen.TypeRef;\nexport namespace TypeRef {\n  export const None: TypeRef = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: TypeRef = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: TypeRef = 2 /* _BinaryenTypeInt32 */;\n  export const I64: TypeRef = 3 /* _BinaryenTypeInt64 */;\n  export const F32: TypeRef = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: TypeRef = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: TypeRef = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: TypeRef = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: TypeRef = 8 /* _BinaryenTypeExternref */;\n  export const Anyref: TypeRef = 9 /* _BinaryenTypeAnyref */;\n  export const Eqref: TypeRef = 10 /* _BinaryenTypeEqref */;\n  export const I31ref: TypeRef = 11 /* _BinaryenTypeI31ref */;\n  export const Dataref: TypeRef = 12 /* _BinaryenTypeDataref */;\n  export const Auto: TypeRef = -1 /* _BinaryenTypeAuto */;\n}\n\n/** Binaryen feature constants. */\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  TruncSat = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  GC = 1024 /* _BinaryenFeatureGC */,\n  Memory64 = 2048 /* _BinaryenFeatureMemory64 */,\n  TypedFunctionReferences = 4096 /* _BinaryenFeatureTypedFunctionReferences */,\n  All = 16383 /* _BinaryenFeatureAll */\n}\n\n/** Binaryen expression id constants. */\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  MemorySize = 20 /* _BinaryenMemorySizeId */,\n  MemoryGrow = 21 /* _BinaryenMemoryGrowId */,\n  Nop = 22 /* _BinaryenNopId */,\n  Unreachable = 23 /* _BinaryenUnreachableId */,\n  AtomicRMW = 24 /* _BinaryenAtomicRMWId */,\n  AtomicCmpxchg = 25 /* _BinaryenAtomicCmpxchgId */,\n  AtomicWait = 26 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 27 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 28 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 29 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 30 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 31 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 32 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 33 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 34 /* _BinaryenSIMDLoadId */,\n  SIMDLoadStoreLane = 35 /* _BinaryenSIMDLoadStoreLaneId */,\n  MemoryInit = 36 /* _BinaryenMemoryInitId */,\n  DataDrop = 37 /* _BinaryenDataDropId */,\n  MemoryCopy = 38 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 39 /* _BinaryenMemoryFillId */,\n  Pop = 40 /* _BinaryenPopId */,\n  RefNull = 41 /* _BinaryenRefNullId */,\n  RefIs = 42 /* _BinaryenRefIsId */,\n  RefFunc = 43 /* _BinaryenRefFuncId */,\n  RefEq = 44 /* _BinaryenRefEqId */,\n  Try = 45 /* _BinaryenTryId */,\n  Throw = 46 /* _BinaryenThrowId */,\n  Rethrow = 47 /* _BinaryenRethrowId */,\n  TupleMake = 48 /* _BinaryenTupleMakeId */,\n  TupleExtract = 49 /* _BinaryenTupleExtractId */,\n  I31New = 50 /* _BinaryenI31NewId */,\n  I31Get = 51 /* _BinaryenI31GetId */,\n  CallRef = 52 /* _BinaryenCallRefId */,\n  RefTest = 53 /* _BinaryenRefTestId */,\n  RefCast = 54 /* _BinaryenRefCastId */,\n  BrOn = 55 /* _BinaryenBrOnId */,\n  RttCanon = 56 /* _BinaryenRttCanonId */,\n  RttSub = 57 /* _BinaryenRttSubId */,\n  StructNew = 58 /* _BinaryenStructNewId */,\n  StructGet = 59 /* _BinaryenStructGetId */,\n  StructSet = 60 /* _BinaryenStructSetId */,\n  ArrayNew = 61 /* _BinaryenArrayNewId */,\n  ArrayGet = 62 /* _BinaryenArrayGetId */,\n  ArraySet = 63 /* _BinaryenArraySetId */,\n  ArrayLen = 64 /* _BinaryenArrayLenId */,\n  ArrayCopy = 65 /* _BinaryenArrayCopyId */,\n  RefAs = 66 /* _BinaryenRefAsId */\n}\n\n/** Binaryen external kind constants. */\nexport enum ExternalKind {\n  Function = 0 /* _BinaryenExternalFunction */,\n  Table = 1 /* _BinaryenExternalTable */,\n  Memory = 2 /* _BinaryenExternalMemory */,\n  Global = 3 /* _BinaryenExternalGlobal */,\n  Tag = 4 /* _BinaryenExternalTag */\n}\n\n/** Binaryen unary operation constants. */\nexport enum UnaryOp {\n  /** i32.clz */\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  /** i64.clz */\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  /** i32.ctz */\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  /** i64.ctz */\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  /** i32.popcnt */\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  /** i64.popcnt */\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  /** f32.neg */\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  /** f64.neg */\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  /** f32.abs */\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  /** f64.abs */\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  /** f32.ceil */\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  /** f64.ceil */\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  /** f32.floor */\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  /** f64.floor */\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  /** f32.trunc */\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  /** f64.trunc */\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  /** f32.nearest */\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  /** f64.nearest */\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  /** f32.sqrt */\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  /** f64.sqrt */\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  /** i32.eqz */\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  /** i64.eqz */\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  /** i64.extend_i32_s */\n  ExtendI32ToI64 = 22 /* _BinaryenExtendSInt32 */,\n  /** i64.extend_i32_u */\n  ExtendU32ToU64 = 23 /* _BinaryenExtendUInt32 */,\n  /** i32.wrap_i64 */\n  WrapI64ToI32 = 24 /* _BinaryenWrapInt64 */,\n  /** i32.trunc_f32_s */\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  /** i64.trunc_f32_s */\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  /** i32.trunc_f32_u */\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  /** i64.trunc_f32_u */\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  /** i32.trunc_f64_s */\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  /** i64.trunc_f64_s */\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  /** i32.trunc_f64_u */\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  /** i64.trunc_f64_u */\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  /** i32.reinterpret_f32 */\n  ReinterpretF32ToI32 = 33 /* _BinaryenReinterpretFloat32 */,\n  /** i64.reinterpret_f64 */\n  ReinterpretF64ToI64 = 34 /* _BinaryenReinterpretFloat64 */,\n  /** f32.convert_i32_s */\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  /** f64.convert_i32_s */\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  /** f32.convert_i32_u */\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  /** f64.convert_i32_u */\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  /** f32.convert_i64_s */\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  /** f64.convert_i64_s */\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  /** f32.convert_i64_u */\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  /** f64.convert_i64_u */\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  /** f64.promote.f32 */\n  PromoteF32ToF64 = 43 /* _BinaryenPromoteFloat32 */,\n  /** f32.demote_f64 */\n  DemoteF64ToF32 = 44 /* _BinaryenDemoteFloat64 */,\n  /** f32.reinterpret_i32 */\n  ReinterpretI32ToF32 = 45 /* _BinaryenReinterpretInt32 */,\n  /** f64.reinterpret_i64 */\n  ReinterpretI64ToF64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n\n  /** i32.extend8_s */\n  Extend8I32 = 47 /* _BinaryenExtendS8Int32 */,\n  /** i32.extend16_s */\n  Extend16I32 = 48 /* _BinaryenExtendS16Int32 */,\n  /** i64.extend8_s */\n  Extend8I64 = 49 /* _BinaryenExtendS8Int64 */,\n  /** i64.extend16_s */\n  Extend16I64 = 50 /* _BinaryenExtendS16Int64 */,\n  /** i64.extend32_s (i64 in, i64 out) */\n  Extend32I64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n\n  /** i32.trunc_sat_f32_s */\n  TruncSatF32ToI32 = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  /** i32.trunc_sat_f32_u */\n  TruncSatF32ToU32 = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  /** i32.trunc_sat_f64_s */\n  TruncSatF64ToI32 = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  /** i32.trunc_sat_f64_u */\n  TruncSatF64ToU32 = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  /** i64.trunc_sat_f32_s */\n  TruncSatF32ToI64 = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  /** i64.trunc_sat_f32_u */\n  TruncSatF32ToU64 = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  /** i64.trunc_sat_f64_s */\n  TruncSatF64ToI64 = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  /** i64.trunc_sat_f64_u */\n  TruncSatF64ToU64 = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.splat */\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  /** i16x8.splat */\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  /** i32x4.splat */\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  /** i64x2.splat */\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  /** f32x4.splat */\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  /** f64x2.splat */\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  /** v128.not */\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  /** v128.any_true */\n  AnyTrueV128 = 67 /* _BinaryenAnyTrueVec128 */,\n  /** i8x16.abs */\n  AbsI8x16 = 68 /* _BinaryenAbsVecI8x16 */,\n  /** i8x16.neg */\n  NegI8x16 = 69 /* _BinaryenNegVecI8x16 */,\n  /** i8x16.all_true */\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  /** i8x16.bitmask */\n  BitmaskI8x16 = 71 /* _BinaryenBitmaskVecI8x16 */,\n  /** i8x16.popcnt */\n  PopcntI8x16 = 72 /* _BinaryenPopcntVecI8x16 */,\n  /** i16x8.abs */\n  AbsI16x8 = 73 /* _BinaryenAbsVecI16x8 */,\n  /** i16x8.neg */\n  NegI16x8 = 74 /* _BinaryenNegVecI16x8 */,\n  /** i16x8.all_true */\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  /** i16x8.bitmask */\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  /** i32x4.abs */\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  /** i32x4.neg */\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  /** i32x4.all_true */\n  AllTrueI32x4 = 79 /* _BinaryenAllTrueVecI32x4 */,\n  /** i32x4.bitmask */\n  BitmaskI32x4 = 80 /* _BinaryenBitmaskVecI32x4 */,\n  /** i64x2.abs */\n  AbsI64x2 = 81 /* _BinaryenAbsVecI64x2 */,\n  /** i64x2.neg */\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  /** i64x2.all_true */\n  AllTrueI64x2 = 83 /* _BinaryenAllTrueVecI64x2 */,\n  /** i64x2.bitmask */\n  BitmaskI64x2 = 84 /* _BinaryenBitmaskVecI64x2 */,\n  /** f32x4.abs */\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  /** f32x4.neg */\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  /** f32x4.sqrt */\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  /** f32x4.ceil */\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  /** f32x4.floor */\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  /** f32x4.trunc */\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  /** f32x4.nearest */\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  /** f64x2.abs */\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  /** f64x2.neg */\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  /** f64x2.sqrt */\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  /** f64x2.ceil */\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  /** f64x2.floor */\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  /** f64x2.trunc */\n  TruncF64x2 = 97 /* _BinaryenTruncVecF64x2 */,\n  /** f64x2.nearest */\n  NearestF64x2 = 98 /* _BinaryenNearestVecF64x2 */,\n  /** i16x8.extadd_pairwise_i8x16_s */\n  ExtaddPairwiseI8x16ToI16x8 = 99 /* _BinaryenExtAddPairwiseSVecI8x16ToI16x8 */,\n  /** i16x8.extadd_pairwise.i8x16_u */\n  ExtaddPairwiseU8x16ToU16x8 = 100 /* _BinaryenExtAddPairwiseUVecI8x16ToI16x8 */,\n  /** i32x4.extadd_pairwise.i16x8_s */\n  ExtaddPairwiseI16x8ToI32x4 = 101 /* _BinaryenExtAddPairwiseSVecI16x8ToI32x4 */,\n  /** i32x4.extadd_pairwise.i64x8_u */\n  ExtaddPairwiseU16x8ToU32x4 = 102 /* _BinaryenExtAddPairwiseUVecI16x8ToI32x4 */,\n  /** i32x4.trunc_sat_f32x4_s */\n  TruncSatF32x4ToI32x4 = 103 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  /** i32x4.trunc_sat_f32x4_u */\n  TruncSatF32x4ToU32x4 = 104 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertI32x4ToF32x4 = 105 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertU32x4ToF32x4 = 106 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  /** i16x8.extend_low_i8x16_s */\n  ExtendLowI8x16ToI16x8 = 107 /* _BinaryenExtendLowSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_s */\n  ExtendHighI8x16ToI16x8 = 108 /* _BinaryenExtendHighSVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_low_i8x16_u */\n  ExtendLowU8x16ToU16x8 = 109 /* _BinaryenExtendLowUVecI8x16ToVecI16x8 */,\n  /** i16x8.extend_high_i8x16_u */\n  ExtendHighU8x16ToU16x8 = 110 /* _BinaryenExtendHighUVecI8x16ToVecI16x8 */,\n  /** i32x4.extend_low_i16x8_s */\n  ExtendLowI16x8ToI32x4 = 111 /* _BinaryenExtendLowSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_s */\n  ExtendHighI16x8ToI32x4 = 112 /* _BinaryenExtendHighSVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_low_i16x8_u */\n  ExtendLowU16x8ToU32x4 = 113 /* _BinaryenExtendLowUVecI16x8ToVecI32x4 */,\n  /** i32x4.extend_high_i16x8_u */\n  ExtendHighU16x8ToU32x4 = 114 /* _BinaryenExtendHighUVecI16x8ToVecI32x4 */,\n  /** i64x2.extend_low_i32x4_s */\n  ExtendLowI32x4ToI64x2 = 115 /* _BinaryenExtendLowSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_s */\n  ExtendHighI32x4ToI64x2 = 116 /* _BinaryenExtendHighSVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_low_i32x4_u */\n  ExtendLowU32x4ToU64x2 = 117 /* _BinaryenExtendLowUVecI32x4ToVecI64x2 */,\n  /** i64x2.extend_high_i32x4_u */\n  ExtendHighU32x4ToU64x2 = 118 /* _BinaryenExtendHighUVecI32x4ToVecI64x2 */,\n  /** f32x4.convert_i32x4_s */\n  ConvertLowI32x4ToF64x2 = 119 /* _BinaryenConvertLowSVecI32x4ToVecF64x2 */,\n  /** f32x4.convert_i32x4_u */\n  ConvertLowU32x4ToF64x2 = 120 /* _BinaryenConvertLowUVecI32x4ToVecF64x2 */,\n  /** i32x4.trunc_sat_f64x2_s_zero */\n  TruncSatF64x2ToI32x4Zero = 121 /* _BinaryenTruncSatZeroSVecF64x2ToVecI32x4 */,\n  /** i32x4.trunc_sat_f64x2_u_zero */\n  TruncSatF64x2ToU32x4Zero = 122 /* _BinaryenTruncSatZeroUVecF64x2ToVecI32x4 */,\n  /** f32x4.demote_f64x2_zero */\n  DemoteZeroF64x2ToF32x4 = 123 /* _BinaryenDemoteZeroVecF64x2ToVecF32x4 */,\n  /** f64x2.promote_low_f32x4 */\n  PromoteLowF32x4ToF64x2 = 124 /* _BinaryenPromoteLowVecF32x4ToVecF64x2 */,\n\n  _last = PromoteLowF32x4ToF64x2,\n\n  // Target dependent\n\n  /** i32.clz or i64.clz, depending on target word size */\n  ClzSize,\n  /** i32.ctz or i64.ctz, depending on target word size */\n  CtzSize,\n  /** i32.popcnt or i64.popcnt, depending on target word size */\n  PopcntSize,\n  /** i32.eqz or i64.eqz, depending on target word size */\n  EqzSize\n}\n\n/** Binaryen binary operation constants. */\nexport enum BinaryOp {\n  /** i32.add */\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  /** i32.sub */\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  /** i32.mul */\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  /** i32.div_s */\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  /** i32.div_u */\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  /** i32.rem_s */\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  /** i32.rem_u */\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  /** i32.and */\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  /** i32.or */\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  /** i32.xor */\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  /** i32.shl */\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  /** i32.shr_s */\n  ShrI32 = 11 /* _BinaryenShrSInt32 */,\n  /** i32.shr_u */\n  ShrU32 = 12 /* _BinaryenShrUInt32 */,\n  /** i32.rotl */\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  /** i32.rotr */\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  /** i32.eq */\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  /** i32.ne */\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  /** i32.lt_s */\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  /** i32.lt_u */\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  /** i32.le_s */\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  /** i32.le_u */\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  /** i32.gt_s */\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  /** i32.gt_u */\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  /** i32.ge_s */\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  /** i32.ge_u */\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  /** i64.add */\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  /** i64.sub */\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  /** i64.mul */\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  /** i64.div_s */\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  /** i64.div_u */\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  /** i64.rem_s */\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  /** i64.rem_u */\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  /** i64.and */\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  /** i64.or */\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  /** i64.xor */\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  /** i64.shl */\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  /** i64.shr_s */\n  ShrI64 = 36 /* _BinaryenShrSInt64 */,\n  /** i64.shr_u */\n  ShrU64 = 37 /* _BinaryenShrUInt64 */,\n  /** i64.rotl */\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  /** i64.rotr */\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  /** i64.eq */\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  /** i64.ne */\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  /** i64.lt_s */\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  /** i64.lt_u */\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  /** i64.le_s */\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  /** i64.le_u */\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  /** i64.gt_s */\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  /** i64.gt_u */\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  /** i64.ge_s */\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  /** i64.ge_u */\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  /** f32.add */\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  /** f32.sub */\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  /** f32.mul */\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  /** f32.div */\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  /** f32.copysign */\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  /** f32.min */\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  /** f32.max */\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  /** f32.eq */\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  /** f32.ne */\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  /** f32.lt */\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  /** f32.le */\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  /** f32.gt */\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  /** f32.ge */\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  /** f64.add */\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  /** f64.sub */\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  /** f64.mul */\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  /** f64.div */\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  /** f64.copysign */\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  /** f64.min */\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  /** f64.max */\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  /** f64.eq */\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  /** f64.ne */\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  /** f64.lt */\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  /** f64.le */\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  /** f64.gt */\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  /** f64.ge */\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n\n  /** i8x16.eq */\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  /** i8x16.he */\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  /** i8x16.lt_s */\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  /** i8x16.lt_u */\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  /** i8x16.gt_s */\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  /** i8x16.gt_u */\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  /** i8x16.le_s */\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  /** i8x16.le_u */\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  /** i8x16.ge_s */\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  /** i8x16.ge_u */\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  /** i16x8.eq */\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  /** i16x8.ne */\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  /** i16x8.lt_s */\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  /** i16x8.lt_u */\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  /** i16x8.gt_s */\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  /** i16x8.gt_u */\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  /** i16x8.le_s */\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  /** i16x8.le_u */\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  /** i16x8.ge_s */\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  /** i16x8.ge_u */\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  /** i32x4.eq */\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  /** i32x4.ne */\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  /** i32x4.lt_s */\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  /** i32x4.lt_u */\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  /** i32x4.gt_s */\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  /** i32x4.gt_u */\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  /** i32x4.le_s */\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  /** i32x4.le_u */\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  /** i32x4.ge_s */\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  /** i32x4.ge_u */\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  /** i64x2.eq */\n  EqI64x2 = 106 /* _BinaryenEqVecI64x2 */,\n  /** i64x2.ne */\n  NeI64x2 = 107 /* _BinaryenNeVecI64x2 */,\n  /** i64x2.lt_s */\n  LtI64x2 = 108 /* _BinaryenLtSVecI64x2 */,\n  /** i64x2.gt_s */\n  GtI64x2 = 109 /* _BinaryenGtSVecI64x2 */,\n  /** i64x2.le_s */\n  LeI64x2 = 110 /* _BinaryenLeSVecI64x2 */,\n  /** i64x2.ge_s */\n  GeI64x2 = 111 /* _BinaryenGeSVecI64x2 */,\n  /** f32x4.eq */\n  EqF32x4 = 112 /* _BinaryenEqVecF32x4 */,\n  /** f32x4.ne */\n  NeF32x4 = 113 /* _BinaryenNeVecF32x4 */,\n  /** f32x4.lt */\n  LtF32x4 = 114 /* _BinaryenLtVecF32x4 */,\n  /** f32x4.gt */\n  GtF32x4 = 115 /* _BinaryenGtVecF32x4 */,\n  /** f32x4.le */\n  LeF32x4 = 116 /* _BinaryenLeVecF32x4 */,\n  /** f32x4.ge */\n  GeF32x4 = 117 /* _BinaryenGeVecF32x4 */,\n  /** f64x2.eq */\n  EqF64x2 = 118 /* _BinaryenEqVecF64x2 */,\n  /** f64x2.ne */\n  NeF64x2 = 119 /* _BinaryenNeVecF64x2 */,\n  /** f64x2.lt */\n  LtF64x2 = 120 /* _BinaryenLtVecF64x2 */,\n  /** f64x2.gt */\n  GtF64x2 = 121 /* _BinaryenGtVecF64x2 */,\n  /** f64x2.le */\n  LeF64x2 = 122 /* _BinaryenLeVecF64x2 */,\n  /** f64x2.ge */\n  GeF64x2 = 123 /* _BinaryenGeVecF64x2 */,\n  /** v128.and */\n  AndV128 = 124 /* _BinaryenAndVec128 */,\n  /** v128.or */\n  OrV128 = 125 /* _BinaryenOrVec128 */,\n  /** v128.xor */\n  XorV128 = 126 /* _BinaryenXorVec128 */,\n  /** v128.andnot */\n  AndnotV128 = 127 /* _BinaryenAndNotVec128 */,\n  /** i8x16.add */\n  AddI8x16 = 128 /* _BinaryenAddVecI8x16 */,\n  /** i8x16.add_sat_s */\n  AddSatI8x16 = 129 /* _BinaryenAddSatSVecI8x16 */,\n  /** i8x16.add_sat_u */\n  AddSatU8x16 = 130 /* _BinaryenAddSatUVecI8x16 */,\n  /** i8x16.sub */\n  SubI8x16 = 131 /* _BinaryenSubVecI8x16 */,\n  /** i8x16.sub_sat_s */\n  SubSatI8x16 = 132 /* _BinaryenSubSatSVecI8x16 */,\n  /** i8x16.sub_sat_u */\n  SubSatU8x16 = 133 /* _BinaryenSubSatUVecI8x16 */,\n  /** i8x16.min_s */\n  MinI8x16 = 134 /* _BinaryenMinSVecI8x16 */,\n  /** i8x16.min_u */\n  MinU8x16 = 135 /* _BinaryenMinUVecI8x16 */,\n  /** i8x16.max_s */\n  MaxI8x16 = 136 /* _BinaryenMaxSVecI8x16 */,\n  /** i8x16.max_u */\n  MaxU8x16 = 137 /* _BinaryenMaxUVecI8x16 */,\n  /** i8x16.avgr_u */\n  AvgrU8x16 = 138 /* _BinaryenAvgrUVecI8x16 */,\n  /** i16x8.add */\n  AddI16x8 = 139 /* _BinaryenAddVecI16x8 */,\n  /** i16x8.add_sat_s */\n  AddSatI16x8 = 140 /* _BinaryenAddSatSVecI16x8 */,\n  /** i16x8.add_sat_u */\n  AddSatU16x8 = 141 /* _BinaryenAddSatUVecI16x8 */,\n  /** i16x8.sub */\n  SubI16x8 = 142 /* _BinaryenSubVecI16x8 */,\n  /** i16x8.sub_sat_s */\n  SubSatI16x8 = 143 /* _BinaryenSubSatSVecI16x8 */,\n  /** i16x8.sub_sat_u */\n  SubSatU16x8 = 144 /* _BinaryenSubSatUVecI16x8 */,\n  /** i16x8.mul */\n  MulI16x8 = 145 /* _BinaryenMulVecI16x8 */,\n  /** i16x8.min_s */\n  MinI16x8 = 146 /* _BinaryenMinSVecI16x8 */,\n  /** i16x8.min_u */\n  MinU16x8 = 147 /* _BinaryenMinUVecI16x8 */,\n  /** i16x8.max_s */\n  MaxI16x8 = 148 /* _BinaryenMaxSVecI16x8 */,\n  /** i16x8.max_u */\n  MaxU16x8 = 149 /* _BinaryenMaxUVecI16x8 */,\n  /** i16x8.avgr_u */\n  AvgrU16x8 = 150 /* _BinaryenAvgrUVecI16x8 */,\n  /** i16x8.q15mulr_sat_s */\n  Q15mulrSatI16x8 = 151 /* _BinaryenQ15MulrSatSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_s */\n  ExtmulLowI16x8 = 152 /* _BinaryenExtMulLowSVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_s */\n  ExtmulHighI16x8 = 153 /* _BinaryenExtMulHighSVecI16x8 */,\n  /** i16x8.extmul_low_i8x16_u */\n  ExtmulLowU16x8 = 154 /* _BinaryenExtMulLowUVecI16x8 */,\n  /** i16x8.extmul_high_i8x16_u */\n  ExtmulHighU16x8 = 155 /* _BinaryenExtMulHighUVecI16x8 */,\n  /** i32x4.add */\n  AddI32x4 = 156 /* _BinaryenAddVecI32x4 */,\n  /** i32x4.sub */\n  SubI32x4 = 157 /* _BinaryenSubVecI32x4 */,\n  /** i32x4.mul */\n  MulI32x4 = 158 /* _BinaryenMulVecI32x4 */,\n  /** i32x4.min_s */\n  MinI32x4 = 159 /* _BinaryenMinSVecI32x4 */,\n  /** i32x4.min_u */\n  MinU32x4 = 160 /* _BinaryenMinUVecI32x4 */,\n  /** i32x4.max_s */\n  MaxI32x4 = 161 /* _BinaryenMaxSVecI32x4 */,\n  /** i32x4.max_u */\n  MaxU32x4 = 162 /* _BinaryenMaxUVecI32x4 */,\n  /** i32x4.dot_i16x8_s */\n  DotI16x8 = 163 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_s */\n  ExtmulLowI32x4 = 164 /* _BinaryenExtMulLowSVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_s */\n  ExtmulHighI32x4 = 165 /* _BinaryenExtMulHighSVecI32x4 */,\n  /** i32x4.extmul_low_i16x8_u */\n  ExtmulLowU32x4 = 166 /* _BinaryenExtMulLowUVecI32x4 */,\n  /** i32x4.extmul_high_i16x8_u */\n  ExtmulHighU32x4 = 167 /* _BinaryenExtMulHighUVecI32x4 */,\n  /** i64x2.add */\n  AddI64x2 = 168 /* _BinaryenAddVecI64x2 */,\n  /** i64x2.sub */\n  SubI64x2 = 169 /* _BinaryenSubVecI64x2 */,\n  /** i64x2.mul */\n  MulI64x2 = 170 /* _BinaryenMulVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_s */\n  ExtmulLowI64x2 = 171 /* _BinaryenExtMulLowSVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_s */\n  ExtmulHighI64x2 = 172 /* _BinaryenExtMulHighSVecI64x2 */,\n  /** i64x2.extmul_low_i32x4_u */\n  ExtmulLowU64x2 = 173 /* _BinaryenExtMulLowUVecI64x2 */,\n  /** i64x2.extmul_high_i32x4_u */\n  ExtmulHighU64x2 = 174 /* _BinaryenExtMulHighUVecI64x2 */,\n  /** f32x4.add */\n  AddF32x4 = 175 /* _BinaryenAddVecF32x4 */,\n  /** f32x4.sub */\n  SubF32x4 = 176 /* _BinaryenSubVecF32x4 */,\n  /** f32x4.mul */\n  MulF32x4 = 177 /* _BinaryenMulVecF32x4 */,\n  /** f32x4.div */\n  DivF32x4 = 178 /* _BinaryenDivVecF32x4 */,\n  /** f32x4.min */\n  MinF32x4 = 179 /* _BinaryenMinVecF32x4 */,\n  /** f32x4.max */\n  MaxF32x4 = 180 /* _BinaryenMaxVecF32x4 */,\n  /** f32x4.pmin */\n  PminF32x4 = 181 /* _BinaryenPMinVecF32x4 */,\n  /** f32x4.pmax */\n  PmaxF32x4 = 182 /* _BinaryenPMaxVecF32x4 */,\n  /** f64x2.add */\n  AddF64x2 = 183 /* _BinaryenAddVecF64x2 */,\n  /** f64x2.sub */\n  SubF64x2 = 184 /* _BinaryenSubVecF64x2 */,\n  /** f64x2.mul */\n  MulF64x2 = 185 /* _BinaryenMulVecF64x2 */,\n  /** f64x2.div */\n  DivF64x2 = 186 /* _BinaryenDivVecF64x2 */,\n  /** f64x2.min */\n  MinF64x2 = 187 /* _BinaryenMinVecF64x2 */,\n  /** f64x2.max */\n  MaxF64x2 = 188 /* _BinaryenMaxVecF64x2 */,\n  /** f64x2.pmin */\n  PminF64x2 = 189 /* _BinaryenPMinVecF64x2 */,\n  /** f64x2.pmax */\n  PmaxF64x2 = 190 /* _BinaryenPMaxVecF64x2 */,\n  /** i8x16.narrow_i16x8_s */\n  NarrowI16x8ToI8x16 = 191 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  /** i8x16.narrow_i16x8_u */\n  NarrowU16x8ToU8x16 = 192 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  /** i16x8.narrow_i32x4_s */\n  NarrowI32x4ToI16x8 = 193 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  /** i16x8.narrow_i32x4_u */\n  NarrowU32x4ToU16x8 = 194 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  /** i8x16.swizzle */\n  SwizzleI8x16 = 195 /* _BinaryenSwizzleVec8x16 */,\n\n  _last = SwizzleI8x16,\n\n  // Target dependent\n\n  /** i32.add or i64.add, depending on target word size */\n  AddSize,\n  /** i32.sub or i64.sub, depending on target word size */\n  SubSize,\n  /** i32.mul or i64.mul, depending on target word size */\n  MulSize,\n  /** i32.div_s or i64.div_s, depending on target word size */\n  DivISize,\n  /** i32.div_u or i64.div_u, depending on target word size */\n  DivUSize,\n  /** i32.rem_s or i64.rem_s, depending on target word size */\n  RemISize,\n  /** i32.rem_u or i64.rem_u, depending on target word size */\n  RemUSize,\n  /** i32.and or i64.and, depending on target word size */\n  AndSize,\n  /** i32.or or i64.or, depending on target word size */\n  OrSize,\n  /** i32.xor or i64.xor, depending on target word size */\n  XorSize,\n  /** i32.shl or i64.shl, depending on target word size */\n  ShlSize,\n  /** i32.shr_s or i64.shr_s, depending on target word size */\n  ShrISize,\n  /** i32.shr_u or i64.shr_u, depending on target word size */\n  ShrUSize,\n  /** i32.rotl or i64.rotl, depending on target word size */\n  RotlSize,\n  /** i32.rotr or i64.rotr, depending on target word size */\n  RotrSize,\n  /** i32.eq or i64.eq, depending on target word size */\n  EqSize,\n  /** i32.ne or i64.ne, depending on target word size */\n  NeSize,\n  /** i32.lt_s or i64.lt_s, depending on target word size */\n  LtISize,\n  /** i32.lt_u or i64.lt_u, depending on target word size */\n  LtUSize,\n  /** i32.le_s or i64.le_s, depending on target word size */\n  LeISize,\n  /** i32.le_u or i64.le_u, depending on target word size */\n  LeUSize,\n  /** i32.gt_s or i64.gt_s, depending on target word size */\n  GtISize,\n  /** i32.gt_u or i64.gt_u, depending on target word size */\n  GtUSize,\n  /** i32.ge_s or i64.ge_s, depending on target word size */\n  GeISize,\n  /** i32.ge_u or i64.ge_u, depending on target word size */\n  GeUSize\n}\n\n/** Binaryen atomic read-modify-write operation constants. */\nexport enum AtomicRMWOp {\n  /** i32.atomic.rmw.add, i32.atomic.rmw8.add_u, i32.atomic.rmw16.add_u, i64.atomic.rmw.add, i64.atomic.rmw8.add_u, i64.atomic.rmw16.add_u, i64.atomic.rmw32.add_u */\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  /** i32.atomic.rmw.sub, i32.atomic.rmw8.sub_u, i32.atomic.rmw16.sub_u, i64.atomic.rmw.sub, i64.atomic.rmw8.sub_u, i64.atomic.rmw16.sub_u, i64.atomic.rmw32.sub_u */\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  /** i32.atomic.rmw.and, i32.atomic.rmw8.and_u, i32.atomic.rmw16.and_u, i64.atomic.rmw.and, i64.atomic.rmw8.and_u, i64.atomic.rmw16.and_u, i64.atomic.rmw32.and_u */\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  /** i32.atomic.rmw.or, i32.atomic.rmw8.or_u, i32.atomic.rmw16.or_u, i64.atomic.rmw.or, i64.atomic.rmw8.or_u, i64.atomic.rmw16.or_u, i64.atomic.rmw32.or_u */\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  /** i32.atomic.rmw.xor, i32.atomic.rmw8.xor_u, i32.atomic.rmw16.xor_u, i64.atomic.rmw.xor, i64.atomic.rmw8.xor_u, i64.atomic.rmw16.xor_u, i64.atomic.rmw32.xor_u */\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  /** i32.atomic.rmw.xchg, i32.atomic.rmw8.xchg_u, i32.atomic.rmw16.xchg_u, i64.atomic.rmw.xchg, i64.atomic.rmw8.xchg_u, i64.atomic.rmw16.xchg_u, i64.atomic.rmw32.xchg_u */\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\n/** Binaryen SIMD extract operation constants. */\nexport enum SIMDExtractOp {\n  /** i8x16.extract_lane_s */\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  /** i8x16.extract_lane_u */\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  /** i16x8.extract_lane_s */\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  /** i16x8.extract_lane_u */\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  /** i32x4.extract_lane_s */\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  /** i32x4.extract_lane_u */\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  /** i64x2.extract_lane_s */\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  /** i64x2.extract_lane_u */\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\n/** Binaryen SIMD replace operation constants. */\nexport enum SIMDReplaceOp {\n  /** i8x16.replace_lane */\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  /** i16x8.replace_lane */\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  /** i32x4.replace_lane */\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  /** i64x2.replace_lane */\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  /** f32x4.replace_lane */\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  /** f64x2.replace_lane */\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\n/** Binaryen SIMD shift operation constants. */\nexport enum SIMDShiftOp {\n  /** i8x16.shl */\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  /** i8x16.shr_s */\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  /** i8x16.shr_u */\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  /** i16x8.shl */\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  /** i16x8.shr_s */\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  /** i16x8.shr_u */\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  /** i16x8.shl */\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  /** i32x4.shr_s */\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  /** i32x4.shr_u */\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  /** i64x2.shl */\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  /** i64x2.shr_u */\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\n/** Binaryen SIMD load operation constants. */\nexport enum SIMDLoadOp {\n  /** v128.load8_splat */\n  Load8Splat = 0 /* _BinaryenLoad8SplatVec128 */,\n  /** v128.load16_splat */\n  Load16Splat = 1 /* _BinaryenLoad16SplatVec128 */,\n  /** v128.load32_splat */\n  Load32Splat = 2 /* _BinaryenLoad32SplatVec128 */,\n  /** v128.load64_splat */\n  Load64Splat = 3 /* _BinaryenLoad64SplatVec128 */,\n  /** v128.load8x8_s */\n  Load8x8S = 4 /* _BinaryenLoad8x8SVec128 */,\n  /** v128.load8x8_u */\n  Load8x8U = 5 /* _BinaryenLoad8x8UVec128 */,\n  /** v128.load16x4_s */\n  Load16x4S = 6 /* _BinaryenLoad16x4SVec128 */,\n  /** v128.load16x4_u */\n  Load16x4U = 7 /* _BinaryenLoad16x4UVec128 */,\n  /** v128.load32x2_s */\n  Load32x2S = 8 /* _BinaryenLoad32x2SVec128 */,\n  /** v128.load32x2_u */\n  Load32x2U = 9 /* _BinaryenLoad32x2UVec128 */,\n  /** v128.load32_zero */\n  Load32Zero = 10 /* _BinaryenLoad32ZeroVec128 */,\n  /** v128.load64_zero */\n  Load64Zero = 11 /* _BinaryenLoad64ZeroVec128 */,\n}\n\n/** Binaryen SIMD load/store lane operation constants. */\nexport enum SIMDLoadStoreLaneOp {\n  /** v128.load8_lane */\n  Load8Lane = 0 /* _BinaryenLoad8LaneVec128 */,\n  /** v128.load16_lane */\n  Load16Lane = 1 /* _BinaryenLoad16LaneVec128 */,\n  /** v128.load32_lane */\n  Load32Lane = 2 /* _BinaryenLoad32LaneVec128 */,\n  /** v128.load64_lane */\n  Load64Lane = 3 /* _BinaryenLoad64LaneVec128 */,\n  /** v128.store8_lane */\n  Store8Lane = 4 /* _BinaryenStore8LaneVec128 */,\n  /** v128.store16_lane */\n  Store16Lane = 5 /* _BinaryenStore16LaneVec128 */,\n  /** v128.store32_lane */\n  Store32Lane = 6 /* _BinaryenStore32LaneVec128 */,\n  /** v128.store64_lane */\n  Store64Lane = 7 /* _BinaryenStore64LaneVec128 */,\n}\n\n/** Binaryen SIMD ternary operation constants. */\nexport enum SIMDTernaryOp {\n  /** v128.bitselect */\n  Bitselect = 0 /* _BinaryenBitselectVec128 */\n}\n\n/** Binaryen RefIs operation constants. */\nexport enum RefIsOp {\n  /** ref.is_null */\n  RefIsNull = 0 /* _BinaryenRefIsNull */,\n  /** ref.is_func */\n  RefIsFunc = 1 /* _BinaryenRefIsFunc */,\n  /** ref.is_data */\n  RefIsData = 2 /* _BinaryenRefIsData */,\n  /** ref.is_i31 */\n  RefIsI31 = 3 /* _BinaryenRefIsI31 */\n}\n\n/** Binaryen RefAs operation constants. */\nexport enum RefAsOp {\n  /** ref.as_non_null */\n  RefAsNonNull = 0 /* _BinaryenRefAsNonNull */,\n  /** ref.as_func */\n  RefAsFunc = 1 /* _BinaryenRefAsFunc */,\n  /** ref.as_data */\n  RefAsData = 2 /* _BinaryenRefAsData */,\n  /** ref.as_i31 */\n  RefAsI31 = 3 /* _BinaryenRefAsI31 */\n}\n\n/** Binaryen BrOn operation constants. */\nexport enum BrOnOp {\n  /** br_on_null */\n  BrOnNull = 0 /* TODO_BinaryenBrOnNull */,\n  /** br_on_cast */\n  BrOnCast = 1 /* TODO_BinaryenBrOnCast */,\n  /** br_on_func */\n  BrOnFunc = 2 /* TODO_BinaryenBrOnFunc */,\n  /** br_on_data */\n  BrOnData = 3 /* TODO_BinaryenBrOnData */,\n  /** br_on_i31 */\n  BrOnI31 = 4 /* TODO_BinaryenBrOnI31 */\n}\n\n/** Binaryen expression runner flags. */\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef,\n    /** Whether a shadow stack is used. */\n    public useShadowStack: bool,\n    /** Architecture-dependent size type. */\n    public sizeType: TypeRef\n  ) {\n    assert(sizeType == TypeRef.I32 || sizeType == TypeRef.I64);\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(useShadowStack: bool, sizeType: TypeRef): Module {\n    return new Module(binaryen._BinaryenModuleCreate(), useShadowStack, sizeType);\n  }\n\n  static createFrom(buffer: Uint8Array, useShadowStack: bool, sizeType: TypeRef): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length), useShadowStack, sizeType);\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // isize<T>(value: T): ExpressionRef {\n  //   if (i64_is(value)) {\n  //     if (this.sizeType == TypeRef.I64) {\n  //       return this.i64(i64_low(value), i64_high(value));\n  //     }\n  //     assert(i64_is_i32(value));\n  //     return this.i32(i64_low(value));\n  //   }\n  //   return this.sizeType == TypeRef.I64\n  //     ? this.i64(i32(value), i32(value) < 0 ? -1 : 0)\n  //     : this.i32(i32(value));\n  // }\n\n  usize<T>(value: T): ExpressionRef {\n    if (i64_is(value)) {\n      if (this.sizeType == TypeRef.I64) {\n        return this.i64(i64_low(value), i64_high(value));\n      }\n      assert(i64_is_u32(value));\n      return this.i32(i64_low(value));\n    }\n    return this.sizeType == TypeRef.I64\n      ? this.i64(i32(value))\n      : this.i32(i32(value));\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(type: TypeRef): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref, type);\n  }\n\n  ref_eq(left: ExpressionRef, right: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenRefEq(this.ref, left, right);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    value: ExpressionRef\n  ): ExpressionRef {\n    if (op > UnaryOp._last) {\n      let isWam64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case UnaryOp.ClzSize: return this.unary(isWam64 ? UnaryOp.ClzI64 : UnaryOp.ClzI32, value);\n        case UnaryOp.CtzSize: return this.unary(isWam64 ? UnaryOp.CtzI64 : UnaryOp.CtzI32, value);\n        case UnaryOp.PopcntSize: return this.unary(isWam64 ? UnaryOp.PopcntI64 : UnaryOp.PopcntI32, value);\n        case UnaryOp.EqzSize: return this.unary(isWam64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, value);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenUnary(this.ref, op, value);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    if (op > BinaryOp._last) {\n      let isWasm64 = this.sizeType == TypeRef.I64;\n      switch (op) {\n        case BinaryOp.AddSize: return this.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32, left, right);\n        case BinaryOp.SubSize: return this.binary(isWasm64 ? BinaryOp.SubI64 : BinaryOp.SubI32, left, right);\n        case BinaryOp.MulSize: return this.binary(isWasm64 ? BinaryOp.MulI64 : BinaryOp.MulI32, left, right);\n        case BinaryOp.DivISize: return this.binary(isWasm64 ? BinaryOp.DivI64 : BinaryOp.DivI32, left, right);\n        case BinaryOp.DivUSize: return this.binary(isWasm64 ? BinaryOp.DivU64 : BinaryOp.DivU32, left, right);\n        case BinaryOp.RemISize: return this.binary(isWasm64 ? BinaryOp.RemI64 : BinaryOp.RemI32, left, right);\n        case BinaryOp.RemUSize: return this.binary(isWasm64 ? BinaryOp.RemU64 : BinaryOp.RemU32, left, right);\n        case BinaryOp.AndSize: return this.binary(isWasm64 ? BinaryOp.AndI64 : BinaryOp.AndI32, left, right);\n        case BinaryOp.OrSize: return this.binary(isWasm64 ? BinaryOp.OrI64 : BinaryOp.OrI32, left, right);\n        case BinaryOp.XorSize: return this.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32, left, right);\n        case BinaryOp.ShlSize: return this.binary(isWasm64 ? BinaryOp.ShlI64 : BinaryOp.ShlI32, left, right);\n        case BinaryOp.ShrISize: return this.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32, left, right);\n        case BinaryOp.ShrUSize: return this.binary(isWasm64 ? BinaryOp.ShrU64 : BinaryOp.ShrU32, left, right);\n        case BinaryOp.RotlSize: return this.binary(isWasm64 ? BinaryOp.RotlI64 : BinaryOp.RotlI32, left, right);\n        case BinaryOp.RotrSize: return this.binary(isWasm64 ? BinaryOp.RotrI64 : BinaryOp.RotrI32, left, right);\n        case BinaryOp.EqSize: return this.binary(isWasm64 ? BinaryOp.EqI64 : BinaryOp.EqI32, left, right);\n        case BinaryOp.NeSize: return this.binary(isWasm64 ? BinaryOp.NeI64 : BinaryOp.NeI32, left, right);\n        case BinaryOp.LtISize: return this.binary(isWasm64 ? BinaryOp.LtI64 : BinaryOp.LtI32, left, right);\n        case BinaryOp.LtUSize: return this.binary(isWasm64 ? BinaryOp.LtU64 : BinaryOp.LtU32, left, right);\n        case BinaryOp.LeISize: return this.binary(isWasm64 ? BinaryOp.LeI64 : BinaryOp.LeI32, left, right);\n        case BinaryOp.LeUSize: return this.binary(isWasm64 ? BinaryOp.LeU64 : BinaryOp.LeU32, left, right);\n        case BinaryOp.GtISize: return this.binary(isWasm64 ? BinaryOp.GtI64 : BinaryOp.GtI32, left, right);\n        case BinaryOp.GtUSize: return this.binary(isWasm64 ? BinaryOp.GtU64 : BinaryOp.GtU32, left, right);\n        case BinaryOp.GeISize: return this.binary(isWasm64 ? BinaryOp.GeI64 : BinaryOp.GeI32, left, right);\n        case BinaryOp.GeUSize: return this.binary(isWasm64 ? BinaryOp.GeU64 : BinaryOp.GeU32, left, right);\n      }\n      assert(false);\n    }\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  memory_size(): ExpressionRef {\n    return binaryen._BinaryenMemorySize(this.ref);\n  }\n\n  memory_grow(delta: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenMemoryGrow(this.ref, delta);\n  }\n\n  local_get(\n    index: i32,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  tostack(value: ExpressionRef): ExpressionRef {\n    if (this.useShadowStack) {\n      let type = binaryen._BinaryenExpressionGetType(value);\n      assert(type == TypeRef.I32 || type == TypeRef.Unreachable);\n      return this.call(BuiltinNames.tostack, [ value ], type);\n    }\n    return value;\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    isManaged: bool,\n    type: TypeRef = TypeRef.Auto,\n  ): ExpressionRef {\n    if (type == TypeRef.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef,\n    isManaged: bool\n  ): ExpressionRef {\n    if (isManaged && this.useShadowStack) {\n      value = this.tostack(value);\n    }\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: TypeRef = TypeRef.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == TypeRef.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition, this.ref) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: TypeRef\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(\"0\"); // TODO: multiple tables\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, cStr, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    tableName: string,\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: TypeRef,\n    results: TypeRef\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  // try(\n  //   body: ExpressionRef,\n  //   catchTags: string[],\n  //   catchBodies: ExpressionRef[]\n  // ): ExpressionRef {\n  //   var numCatchTags = catchTags.length;\n  //   var strs = new Array<TagRef>(numCatchTags);\n  //   for (let i = 0; i < numCatchTags; ++i) {\n  //     strs[i] = this.allocStringCached(catchTags[i]);\n  //   }\n  //   var cArr1 = allocPtrArray(strs);\n  //   var cArr2 = allocPtrArray(catchBodies);\n  //   var ret = binaryen._BinaryenTry(this.ref, body, cArr1, numCatchTags, cArr2, catchBodies.length);\n  //   binaryen._free(cArr2);\n  //   binaryen._free(cArr1);\n  //   return ret;\n  // }\n\n  throw(\n    tagName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(tagName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    target: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    return binaryen._BinaryenRethrow(this.ref, cStr);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: TypeRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  simd_loadstorelane(\n    op: SIMDLoadStoreLaneOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32,\n    index: u8,\n    vec: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoadStoreLane(this.ref, op, offset, align, index, ptr, vec);\n  }\n\n  // reference types / gc\n\n  ref_is(\n    op: RefIsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIs(this.ref, op, expr);\n  }\n\n  ref_as(\n    op: RefAsOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefAs(this.ref, op, expr);\n  }\n\n  ref_func(\n    name: string,\n    type: TypeRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr, type);\n  }\n\n  i31_new(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenI31New(this.ref, value);\n  }\n\n  i31_get(\n    expr: ExpressionRef,\n    signed: bool\n  ): ExpressionRef {\n    return binaryen._BinaryenI31Get(this.ref, expr, signed);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: TypeRef,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // tags\n\n  addTag(\n    name: string,\n    params: TypeRef,\n    results: TypeRef\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddTag(this.ref, cStr, params, results);\n  }\n\n  getTag(\n    name: string\n  ): TagRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetTag(this.ref, cStr);\n  }\n\n  removeTag(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveTag(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: TypeRef,\n    results: TypeRef,\n    varTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  hasFunction(name: string): bool {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr) != 0;\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: TypeRef,\n    paramTypes: TypeRef[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addTagExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTagExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  hasExport(externalName: string): bool {\n    var cStr = this.allocStringCached(externalName);\n    return binaryen._BinaryenGetExport(this.ref, cStr) != 0;\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: TypeRef,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addTagImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: TypeRef,\n    results: TypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTagImport(\n      this.ref, cStr1, cStr2, cStr3, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  addFunctionTable(\n    name: string,\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var cStr = this.allocStringCached(name);\n    var numNames = funcs.length;\n    var names = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    var tableRef = binaryen._BinaryenGetTable(this.ref, cStr);\n    if (!tableRef) {\n      tableRef = binaryen._BinaryenAddTable(this.ref, cStr, initial, maximum, TypeRef.Funcref);\n    } else {\n      binaryen._BinaryenTableSetInitial(tableRef, initial);\n      binaryen._BinaryenTableSetMax(tableRef, maximum);\n    }\n    binaryen._BinaryenAddActiveElementSegment(this.ref, cStr, cStr, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  /* setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<CString>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  } */\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getZeroFilledMemory(): bool {\n    return binaryen._BinaryenGetZeroFilledMemory();\n  }\n\n  setZeroFilledMemory(on: bool): void {\n    binaryen._BinaryenSetZeroFilledMemory(on);\n  }\n\n  getFastMath(): bool {\n    return binaryen._BinaryenGetFastMath();\n  }\n\n  setFastMath(on: bool): void {\n    binaryen._BinaryenSetFastMath(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  getAllowInliningFunctionsWithLoops(): bool {\n    return binaryen._BinaryenGetAllowInliningFunctionsWithLoops();\n  }\n\n  setAllowInliningFunctionsWithLoops(enabled: bool): void {\n    binaryen._BinaryenSetAllowInliningFunctionsWithLoops(enabled);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<StringRef>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames - 1; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(\n    optimizeLevel: i32,\n    shrinkLevel: i32,\n    debugInfo: bool = false,\n    zeroFilledMemory: bool = false\n  ): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    this.setOptimizeLevel(optimizeLevel);\n    this.setShrinkLevel(shrinkLevel);\n    this.setDebugInfo(debugInfo);\n    this.setZeroFilledMemory(zeroFilledMemory);\n    this.setFastMath(true);\n    this.clearPassArguments();\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel == 0) {\n      this.setAlwaysInlineMaxSize(12);\n      this.setFlexibleInlineMaxSize(70);\n      this.setOneCallerInlineMaxSize(200);\n      this.setAllowInliningFunctionsWithLoops(optimizeLevel >= 3);\n    } else {\n      this.setAlwaysInlineMaxSize(\n        optimizeLevel <= 1 || shrinkLevel >= 2\n          ? 2\n          : 6\n      );\n      this.setFlexibleInlineMaxSize(65);\n      this.setOneCallerInlineMaxSize(80);\n      this.setAllowInliningFunctionsWithLoops(false);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n      if (optimizeLevel >= 2) {\n        passes.push(\"once-reduction\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"local-cse\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"precompute-propagate\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"simplify-locals-nostructure\");\n        passes.push(\"flatten\");\n        passes.push(\"vacuum\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"licm\");\n        passes.push(\"merge-locals\");\n        passes.push(\"reorder-locals\");\n        passes.push(\"dae-optimizing\");\n        passes.push(\"code-folding\");\n      }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"inlining\");\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"simplify-locals-notee-nostructure\");\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"local-cse\");\n      }\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      passes.push(\"vacuum\");\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (this.getLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel > 1 && (this.getFeatures() & FeatureFlags.GC) != 0) {\n        passes.push(\"heap2local\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n          passes.push(\"local-cse\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(watFormat: bool = true): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStringsToPointers: Map<string,usize> = new Map();\n  private cachedPointersToStrings: Map<usize,string | null> = new Map();\n\n  allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cached = this.cachedStringsToPointers;\n    if (cached.has(str)) return changetype<usize>(cached.get(str));\n    var ptr = allocString(str);\n    cached.set(str, ptr);\n    return ptr;\n  }\n\n  readStringCached(ptr: usize): string | null {\n    // Binaryen internalizes names, so using this method where it's safe can\n    // avoid quite a bit of unnecessary garbage.\n    if (ptr == 0) return null;\n    var cached = this.cachedPointersToStrings;\n    if (cached.has(ptr)) return changetype<string>(this.cachedPointersToStrings.get(ptr));\n    var str = readString(ptr);\n    cached.set(ptr, str);\n    return str;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStringsToPointers), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStringsToPointers.clear();\n    this.cachedPointersToStrings.clear();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  /** Makes a copy of a trivial expression (doesn't contain subexpressions). Returns `0` if non-trivial. */\n  tryCopyTrivialExpression(expr: ExpressionRef): ExpressionRef {\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.LocalGet:\n      case ExpressionId.GlobalGet:\n      case ExpressionId.Const:\n      case ExpressionId.MemorySize:\n      case ExpressionId.Nop:\n      case ExpressionId.Unreachable:\n      case ExpressionId.DataDrop:\n      case ExpressionId.RefNull:\n      case ExpressionId.RttCanon: return this.copyExpression(expr);\n    }\n    return 0;\n  }\n\n  /** Makes a copy of any expression including all subexpressions. */\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    // TODO: Copy debug location as well (needs Binaryen support)\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: TypeRef[] | null): TypeRef {\n  if (!types) return TypeRef.None;\n  switch (types.length) {\n    case 0: return TypeRef.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: TypeRef): TypeRef[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<TypeRef>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): TypeRef {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function isConstZero(expr: ExpressionRef): bool {\n  if (getExpressionId(expr) != ExpressionId.Const) return false;\n  var type = getExpressionType(expr);\n  if (type == TypeRef.I32) return getConstValueI32(expr) == 0;\n  if (type == TypeRef.I64) return getConstValueI64Low(expr) == 0 && getConstValueI64High(expr) == 0;\n  if (type == TypeRef.F32) return getConstValueF32(expr) == 0;\n  if (type == TypeRef.F64) return getConstValueF64(expr) == 0;\n  return false;\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getMemoryGrowDelta(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenMemoryGrowGetDelta(expr);\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): TypeRef {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): TypeRef[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<TypeRef>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): TypeRef {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// tags\n\nexport function getTagName(tag: TagRef): string | null {\n  return readString(binaryen._BinaryenTagGetName(tag));\n}\n\nexport function getTagParams(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetParams(tag);\n}\n\nexport function getTagResults(tag: TagRef): TypeRef {\n  return binaryen._BinaryenTagGetResults(tag);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition, false); // u32\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, TypeRef.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  TrapsNeverHappen = 4096 /* _BinaryenSideEffectTrapsNeverHappen */,\n  Any = 8191 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, module: ModuleRef): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, module);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, module: ModuleRef): bool {\n  return getSideEffects(expr, module) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nexport function allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != TypeRef.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  CharCode,\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n\n    if (!parameters) parameters = [];\n\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.skip(Token.TEMPLATELITERAL)) {\n          return this.parseTemplateLiteral(tn, identifier);\n        }\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.TEMPLATELITERAL: {\n        return this.parseTemplateLiteral(tn);\n      }\n      case Token.INTEGERLITERAL: {\n        let value = tn.readInteger();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createIntegerLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        let value = tn.readFloat();\n        tn.checkForIdentifierStartAfterNumericLiteral();\n        return Node.createFloatLiteralExpression(value, tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          if (tn.skip(Token.TEMPLATELITERAL)) {\n            expr = this.parseTemplateLiteral(tn, expr);\n            if (!expr) return null;\n          } else {\n            expr = this.maybeParseCallExpression(tn, expr, true);\n          }\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private parseTemplateLiteral(tn: Tokenizer, tag: Expression | null = null): Expression | null {\n    // at '`': ... '`'\n    var startPos = tag ? tag.range.start : tn.tokenPos;\n    var parts = new Array<string>();\n    var rawParts = new Array<string>();\n    var exprs = new Array<Expression>();\n    parts.push(tn.readString(0, tag != null));\n    rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    while (tn.readingTemplateString) {\n      let expr = this.parseExpression(tn);\n      if (!expr) return null;\n      exprs.push(expr);\n      if (!tn.skip(Token.CLOSEBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"}\"\n        );\n        return null;\n      }\n      parts.push(tn.readString(CharCode.BACKTICK, tag != null));\n      rawParts.push(tn.source.text.substring(tn.readStringStart, tn.readStringEnd));\n    }\n    return Node.createTemplateLiteralExpression(tag, parts, rawParts, exprs, tn.range(startPos, tn.pos));\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n    tn.readingTemplateString = false;\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL:{\n          tn.readString();\n          break;\n        }\n        case Token.TEMPLATELITERAL: {\n          tn.readString();\n          while(tn.readingTemplateString){\n            this.skipBlock(tn);\n            tn.readString(CharCode.BACKTICK);\n          }\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          tn.checkForIdentifierStartAfterNumericLiteral();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Utility to find all locals used in an expression.\n * @license Apache-2.0\n */\n\nimport {\n  Visitor\n} from \"./pass\";\n\nimport {\n  ExpressionRef\n} from \"../module\";\n\nimport {\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex\n} from \"../glue/binaryen\";\n\nclass FindUsedLocalsVisitor extends Visitor {\n  used: Set<i32>;\n\n  constructor(used: Set<i32> = new Set()) {\n    super();\n    this.used = used;\n  }\n  \n  /** @override */\n  visitLocalGet(localGet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalGetGetIndex(localGet));\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    this.used.add(<i32>_BinaryenLocalSetGetIndex(localSet));\n  }\n}\n\nvar singleton: FindUsedLocalsVisitor | null = null;\n\n/** Finds the indexes of all locals used in the specified expression. */\nexport function findUsedLocals(\n  expr: ExpressionRef,\n  used: Set<i32> = new Set()\n): Set<i32> {\n  var visitor = singleton;\n  if (!visitor) singleton = visitor = new FindUsedLocalsVisitor(used);\n  else visitor.used = used;\n  visitor.visit(expr);\n  return used;\n}\n","/**\n * @fileoverview Infrastructure for custom Binaryen passes.\n * @license Apache-2.0\n */\n\nimport {\n  Module,\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  GlobalRef,\n  Index,\n  StringRef\n} from \"../module\";\n\nimport {\n  _BinaryenExpressionGetId,\n  _BinaryenBlockGetNumChildren,\n  _BinaryenBlockGetChildAt,\n  _BinaryenIfGetCondition,\n  _BinaryenIfGetIfTrue,\n  _BinaryenIfGetIfFalse,\n  _BinaryenLoopGetBody,\n  _BinaryenBreakGetCondition,\n  _BinaryenBreakGetValue,\n  _BinaryenGetNumFunctions,\n  _BinaryenGetFunctionByIndex,\n  _BinaryenGetNumGlobals,\n  _BinaryenGetGlobalByIndex,\n  _BinaryenFunctionGetBody,\n  _BinaryenSwitchGetCondition,\n  _BinaryenSwitchGetValue,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenLocalSetGetValue,\n  _BinaryenGlobalSetGetValue,\n  _BinaryenGlobalGetInitExpr,\n  _BinaryenLoadGetPtr,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreGetValue,\n  _BinaryenUnaryGetValue,\n  _BinaryenBinaryGetLeft,\n  _BinaryenBinaryGetRight,\n  _BinaryenSelectGetIfTrue,\n  _BinaryenSelectGetIfFalse,\n  _BinaryenSelectGetCondition,\n  _BinaryenDropGetValue,\n  _BinaryenBlockSetChildAt,\n  _BinaryenCallIndirectGetTarget,\n  _BinaryenReturnGetValue,\n  _BinaryenMemoryGrowGetDelta,\n  _BinaryenAtomicRMWGetPtr,\n  _BinaryenAtomicRMWGetValue,\n  _BinaryenAtomicCmpxchgGetPtr,\n  _BinaryenAtomicCmpxchgGetExpected,\n  _BinaryenAtomicCmpxchgGetReplacement,\n  _BinaryenAtomicWaitGetPtr,\n  _BinaryenAtomicWaitGetExpected,\n  _BinaryenAtomicWaitGetTimeout,\n  _BinaryenAtomicNotifyGetPtr,\n  _BinaryenSIMDExtractGetVec,\n  _BinaryenSIMDReplaceGetVec,\n  _BinaryenSIMDReplaceGetValue,\n  _BinaryenSIMDShuffleGetLeft,\n  _BinaryenSIMDShuffleGetRight,\n  _BinaryenSIMDTernaryGetA,\n  _BinaryenSIMDTernaryGetB,\n  _BinaryenSIMDTernaryGetC,\n  _BinaryenSIMDShiftGetVec,\n  _BinaryenSIMDShiftGetShift,\n  _BinaryenSIMDLoadGetPtr,\n  _BinaryenMemoryInitGetDest,\n  _BinaryenMemoryInitGetOffset,\n  _BinaryenMemoryInitGetSize,\n  _BinaryenMemoryCopyGetDest,\n  _BinaryenMemoryCopyGetSource,\n  _BinaryenMemoryCopyGetSize,\n  _BinaryenMemoryFillGetDest,\n  _BinaryenMemoryFillGetValue,\n  _BinaryenMemoryFillGetSize,\n  _BinaryenRefIsGetValue,\n  _BinaryenTryGetBody,\n  _BinaryenTryGetNumCatchBodies,\n  _BinaryenTryGetCatchBodyAt,\n  _BinaryenThrowGetNumOperands,\n  _BinaryenThrowGetOperandAt,\n  _BinaryenTupleMakeGetOperandAt,\n  _BinaryenTupleMakeGetNumOperands,\n  _BinaryenIfSetCondition,\n  _BinaryenIfSetIfTrue,\n  _BinaryenIfSetIfFalse,\n  _BinaryenLoopSetBody,\n  _BinaryenBreakSetCondition,\n  _BinaryenBreakSetValue,\n  _BinaryenSwitchSetCondition,\n  _BinaryenSwitchSetValue,\n  _BinaryenCallSetOperandAt,\n  _BinaryenCallIndirectSetTarget,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenLocalSetSetValue,\n  _BinaryenGlobalSetSetValue,\n  _BinaryenLoadSetPtr,\n  _BinaryenStoreSetPtr,\n  _BinaryenStoreSetValue,\n  _BinaryenUnarySetValue,\n  _BinaryenExpressionFinalize,\n  _BinaryenBinarySetLeft,\n  _BinaryenBinarySetRight,\n  _BinaryenSelectSetIfTrue,\n  _BinaryenSelectSetIfFalse,\n  _BinaryenSelectSetCondition,\n  _BinaryenDropSetValue,\n  _BinaryenReturnSetValue,\n  _BinaryenMemoryGrowSetDelta,\n  _BinaryenAtomicRMWSetPtr,\n  _BinaryenAtomicRMWSetValue,\n  _BinaryenAtomicCmpxchgSetPtr,\n  _BinaryenAtomicCmpxchgSetExpected,\n  _BinaryenAtomicCmpxchgSetReplacement,\n  _BinaryenAtomicWaitSetPtr,\n  _BinaryenAtomicWaitSetExpected,\n  _BinaryenAtomicWaitSetTimeout,\n  _BinaryenAtomicNotifySetPtr,\n  _BinaryenSIMDExtractSetVec,\n  _BinaryenSIMDReplaceSetVec,\n  _BinaryenSIMDReplaceSetValue,\n  _BinaryenSIMDShuffleSetLeft,\n  _BinaryenSIMDShuffleSetRight,\n  _BinaryenSIMDTernarySetA,\n  _BinaryenSIMDTernarySetB,\n  _BinaryenSIMDTernarySetC,\n  _BinaryenSIMDShiftSetVec,\n  _BinaryenSIMDShiftSetShift,\n  _BinaryenSIMDLoadSetPtr,\n  _BinaryenSIMDLoadStoreLaneGetPtr,\n  _BinaryenSIMDLoadStoreLaneGetVec,\n  _BinaryenSIMDLoadStoreLaneSetPtr,\n  _BinaryenSIMDLoadStoreLaneSetVec,\n  _BinaryenMemoryInitSetDest,\n  _BinaryenMemoryInitSetOffset,\n  _BinaryenMemoryInitSetSize,\n  _BinaryenMemoryCopySetDest,\n  _BinaryenMemoryCopySetSource,\n  _BinaryenMemoryCopySetSize,\n  _BinaryenMemoryFillSetDest,\n  _BinaryenMemoryFillSetValue,\n  _BinaryenMemoryFillSetSize,\n  _BinaryenRefIsSetValue,\n  _BinaryenTrySetBody,\n  _BinaryenTrySetCatchBodyAt,\n  _BinaryenThrowSetOperandAt,\n  _BinaryenTupleMakeSetOperandAt,\n  _BinaryenBlockGetName,\n  _BinaryenLoopGetName,\n  _BinaryenBreakGetName,\n  _BinaryenSwitchGetDefaultName,\n  _BinaryenSwitchGetNumNames,\n  _BinaryenSwitchGetNameAt,\n  _BinaryenCallGetTarget,\n  _BinaryenLocalGetGetIndex,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenGlobalGetGetName,\n  _BinaryenGlobalSetGetName,\n  _BinaryenAtomicNotifyGetNotifyCount,\n  _BinaryenAtomicNotifySetNotifyCount,\n  _BinaryenRefFuncGetFunc,\n  _BinaryenThrowGetTag,\n  _BinaryenTupleExtractGetTuple,\n  _BinaryenTupleExtractSetTuple,\n  _BinaryenRefEqGetLeft,\n  _BinaryenRefEqGetRight,\n  _BinaryenRefEqSetLeft,\n  _BinaryenRefEqSetRight,\n  _BinaryenFunctionSetBody,\n  _BinaryenI31NewGetValue,\n  _BinaryenI31GetGetI31,\n  _BinaryenI31NewSetValue,\n  _BinaryenI31GetSetI31\n} from \"../glue/binaryen\";\n\n/** Base class of custom Binaryen visitors. */\nexport abstract class Visitor {\n  /** Expression stack. */\n  private stack: ExpressionRef[] = new Array<ExpressionRef>();\n\n  /** Gets the current expression being walked. */\n  get currentExpression(): ExpressionRef {\n    var currentExpression = this._currentExpression;\n    if (!currentExpression) throw new Error(\"not walking expressions\");\n    return currentExpression;\n  }\n  _currentExpression: ExpressionRef = 0;\n\n  /** Gets the parent expression of the current expression being walked. Returns zero if already the top-most expression. */\n  get parentExpressionOrNull(): ExpressionRef {\n    var stack = this.stack;\n    var length = stack.length;\n    return length ? stack[length - 1] : 0;\n  }\n\n  // Expressions\n\n  visitBlock(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitIf(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBreak(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSwitch(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCall(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirectPre(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallIndirect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLocalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitGlobalSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStore(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitConst(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBinary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSelect(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitReturn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemorySize(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryGrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitNop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitUnreachable(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicRMW(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicCmpxchg(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicWait(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicNotify(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitAtomicFence(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDReplace(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShuffle(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDTernary(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDShift(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoad(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitSIMDLoadStoreLane(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryInit(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitDataDrop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryCopy(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitMemoryFill(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitPop(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefNull(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefIs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefFunc(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefEq(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTry(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitThrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRethrow(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleMake(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitTupleExtract(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31New(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitI31Get(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitCallRef(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefTest(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefCast(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitBrOn(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttCanon(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRttSub(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitStructSet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayNew(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayGet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArraySet(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitArrayLen(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  visitRefAs(expr: ExpressionRef): void {\n    // unimp\n  }\n\n  // Immediates\n\n  visitName(name: StringRef): void {\n    // unimp\n  }\n\n  visitLabel(name: StringRef): void {\n    // unimp\n  }\n\n  visitIndex(index: Index): void {\n    // unimp\n  }\n\n  visitTag(name: StringRef): void {\n    // unimp\n  }\n\n  // Delegate\n\n  /** Visits any expression, delegating to the respective visitor methods. */\n  visit(expr: ExpressionRef): void {\n    let previousExpression = this._currentExpression;\n    this._currentExpression = assert(expr);\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Block: {\n        this.stack.push(expr);\n        let name = _BinaryenBlockGetName(expr);\n        if (name) this.visitLabel(name);\n        for (let i: Index = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n          this.visit(_BinaryenBlockGetChildAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitBlock(expr);\n        break;\n      }\n      case ExpressionId.If: {\n        this.stack.push(expr);\n        this.visit(_BinaryenIfGetCondition(expr));\n        this.visit(_BinaryenIfGetIfTrue(expr));\n        let ifFalse = _BinaryenIfGetIfFalse(expr);\n        if (ifFalse) this.visit(ifFalse);\n        assert(this.stack.pop() == expr);\n        this.visitIf(expr);\n        break;\n      }\n      case ExpressionId.Loop: {\n        this.stack.push(expr);\n        let name = _BinaryenLoopGetName(expr);\n        if (name) this.visitLabel(name);\n        this.visit(_BinaryenLoopGetBody(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoop(expr);\n        break;\n      }\n      case ExpressionId.Break: {\n        this.stack.push(expr);\n        this.visitLabel(_BinaryenBreakGetName(expr));\n        let condition = _BinaryenBreakGetCondition(expr);\n        if (condition) this.visit(condition);\n        let value = _BinaryenBreakGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitBreak(expr);\n        break;\n      }\n      case ExpressionId.Switch: {\n        this.stack.push(expr);\n        let defaultName = _BinaryenSwitchGetDefaultName(expr);\n        if (defaultName) this.visitLabel(defaultName);\n        let numNames = _BinaryenSwitchGetNumNames(expr);\n        for (let i: Index = 0; i < numNames; ++i) {\n          this.visitLabel(_BinaryenSwitchGetNameAt(expr, i));\n        }\n        this.visit(_BinaryenSwitchGetCondition(expr));\n        let value = _BinaryenSwitchGetValue(expr);\n        if (value) this.visit(value);\n        assert(this.stack.pop() == expr);\n        this.visitSwitch(expr);\n        break;\n      }\n      case ExpressionId.Call: {\n        this.visitCallPre(expr);\n        this.stack.push(expr);\n        this.visitName(_BinaryenCallGetTarget(expr));\n        let numOperands = _BinaryenCallGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenCallGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCall(expr);\n        break;\n      }\n      case ExpressionId.CallIndirect: {\n        this.visitCallIndirectPre(expr);\n        this.stack.push(expr);\n        this.visit(_BinaryenCallIndirectGetTarget(expr));\n        for (let i: Index = 0, k = _BinaryenCallIndirectGetNumOperands(expr); i < k; ++i) {\n          this.visit(_BinaryenCallIndirectGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitCallIndirect(expr);\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalGetGetIndex(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalGet(expr);\n        break;\n      }\n      case ExpressionId.LocalSet: {\n        this.stack.push(expr);\n        this.visitIndex(_BinaryenLocalSetGetIndex(expr));\n        this.visit(_BinaryenLocalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLocalSet(expr);\n        break;\n      }\n      case ExpressionId.GlobalGet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalGetGetName(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalGet(expr);\n        break;\n      }\n      case ExpressionId.GlobalSet: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenGlobalSetGetName(expr));\n        this.visit(_BinaryenGlobalSetGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitGlobalSet(expr);\n        break;\n      }\n      case ExpressionId.Load: {\n        this.stack.push(expr);\n        this.visit(_BinaryenLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitLoad(expr);\n        break;\n      }\n      case ExpressionId.Store: {\n        this.stack.push(expr);\n        this.visit(_BinaryenStoreGetPtr(expr));\n        this.visit(_BinaryenStoreGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitStore(expr);\n        break;\n      }\n      case ExpressionId.Const: {\n        this.visitConst(expr);\n        break;\n      }\n      case ExpressionId.Unary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenUnaryGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitUnary(expr);\n        break;\n      }\n      case ExpressionId.Binary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenBinaryGetLeft(expr));\n        this.visit(_BinaryenBinaryGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitBinary(expr);\n        break;\n      }\n      case ExpressionId.Select: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSelectGetIfTrue(expr));\n        this.visit(_BinaryenSelectGetIfFalse(expr));\n        this.visit(_BinaryenSelectGetCondition(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSelect(expr);\n        break;\n      }\n      case ExpressionId.Drop: {\n        this.stack.push(expr);\n        this.visit(_BinaryenDropGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitDrop(expr);\n        break;\n      }\n      case ExpressionId.Return: {\n        let value = _BinaryenReturnGetValue(expr);\n        if (value) {\n          this.stack.push(expr);\n          this.visit(value);\n          assert(this.stack.pop() == expr);\n        }\n        this.visitReturn(expr);\n        break;\n      }\n      case ExpressionId.MemorySize: {\n        this.visitMemorySize(expr);\n        break;\n      }\n      case ExpressionId.MemoryGrow: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryGrowGetDelta(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryGrow(expr);\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.visitNop(expr);\n        break;\n      }\n      case ExpressionId.Unreachable: {\n        this.visitUnreachable(expr);\n        break;\n      }\n      case ExpressionId.AtomicRMW: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicRMWGetPtr(expr));\n        this.visit(_BinaryenAtomicRMWGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicRMW(expr);\n        break;\n      }\n      case ExpressionId.AtomicCmpxchg: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicCmpxchgGetPtr(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetExpected(expr));\n        this.visit(_BinaryenAtomicCmpxchgGetReplacement(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicCmpxchg(expr);\n        break;\n      }\n      case ExpressionId.AtomicWait: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicWaitGetPtr(expr));\n        this.visit(_BinaryenAtomicWaitGetExpected(expr));\n        this.visit(_BinaryenAtomicWaitGetTimeout(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicWait(expr);\n        break;\n      }\n      case ExpressionId.AtomicNotify: {\n        this.stack.push(expr);\n        this.visit(_BinaryenAtomicNotifyGetPtr(expr));\n        this.visit(_BinaryenAtomicNotifyGetNotifyCount(expr));\n        assert(this.stack.pop() == expr);\n        this.visitAtomicNotify(expr);\n        break;\n      }\n      case ExpressionId.AtomicFence: {\n        this.visitAtomicFence(expr);\n        break;\n      }\n      case ExpressionId.SIMDExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDExtractGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDExtract(expr);\n        break;\n      }\n      case ExpressionId.SIMDReplace: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDReplaceGetVec(expr));\n        this.visit(_BinaryenSIMDReplaceGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDReplace(expr);\n        break;\n      }\n      case ExpressionId.SIMDShuffle: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShuffleGetLeft(expr));\n        this.visit(_BinaryenSIMDShuffleGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShuffle(expr);\n        break;\n      }\n      case ExpressionId.SIMDTernary: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDTernaryGetA(expr));\n        this.visit(_BinaryenSIMDTernaryGetB(expr));\n        this.visit(_BinaryenSIMDTernaryGetC(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDTernary(expr);\n        break;\n      }\n      case ExpressionId.SIMDShift: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDShiftGetVec(expr));\n        this.visit(_BinaryenSIMDShiftGetShift(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDShift(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoad: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadGetPtr(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoad(expr);\n        break;\n      }\n      case ExpressionId.SIMDLoadStoreLane: {\n        this.stack.push(expr);\n        this.visit(_BinaryenSIMDLoadStoreLaneGetPtr(expr));\n        this.visit(_BinaryenSIMDLoadStoreLaneGetVec(expr));\n        assert(this.stack.pop() == expr);\n        this.visitSIMDLoadStoreLane(expr);\n        break;\n      }\n      case ExpressionId.MemoryInit: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryInitGetDest(expr));\n        this.visit(_BinaryenMemoryInitGetOffset(expr));\n        this.visit(_BinaryenMemoryInitGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryInit(expr);\n        break;\n      }\n      case ExpressionId.DataDrop: {\n        this.visitDataDrop(expr);\n        break;\n      }\n      case ExpressionId.MemoryCopy: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryCopyGetDest(expr));\n        this.visit(_BinaryenMemoryCopyGetSource(expr));\n        this.visit(_BinaryenMemoryCopyGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryCopy(expr);\n        break;\n      }\n      case ExpressionId.MemoryFill: {\n        this.stack.push(expr);\n        this.visit(_BinaryenMemoryFillGetDest(expr));\n        this.visit(_BinaryenMemoryFillGetValue(expr));\n        this.visit(_BinaryenMemoryFillGetSize(expr));\n        assert(this.stack.pop() == expr);\n        this.visitMemoryFill(expr);\n        break;\n      }\n      case ExpressionId.Pop: {\n        this.visitPop(expr);\n        break;\n      }\n      case ExpressionId.RefNull: {\n        this.visitRefNull(expr);\n        break;\n      }\n      case ExpressionId.RefIs: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefIsGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefIs(expr);\n        break;\n      }\n      case ExpressionId.RefFunc: {\n        this.stack.push(expr);\n        this.visitName(_BinaryenRefFuncGetFunc(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefFunc(expr);\n        break;\n      }\n      case ExpressionId.RefEq: {\n        this.stack.push(expr);\n        this.visit(_BinaryenRefEqGetLeft(expr));\n        this.visit(_BinaryenRefEqGetRight(expr));\n        assert(this.stack.pop() == expr);\n        this.visitRefEq(expr);\n        break;\n      }\n      case ExpressionId.Try: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTryGetBody(expr));\n        let numCatchBodies = _BinaryenTryGetNumCatchBodies(expr);\n        for (let i: Index = 0; i < numCatchBodies; ++i) {\n          this.visit(_BinaryenTryGetCatchBodyAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitTry(expr);\n        break;\n      }\n      case ExpressionId.Throw: {\n        this.stack.push(expr);\n        this.visitTag(_BinaryenThrowGetTag(expr));\n        let numOperands = _BinaryenThrowGetNumOperands(expr);\n        for (let i: Index = 0; i < numOperands; ++i) {\n          this.visit(_BinaryenThrowGetOperandAt(expr, i));\n        }\n        assert(this.stack.pop() == expr);\n        this.visitThrow(expr);\n        break;\n      }\n      case ExpressionId.Rethrow: {\n        this.visitRethrow(expr);\n        break;\n      }\n      case ExpressionId.TupleMake: {\n        let numOperands = _BinaryenTupleMakeGetNumOperands(expr);\n        if (numOperands) {\n          this.stack.push(expr);\n          for (let i: Index = 0; i < numOperands; ++i) {\n            this.visit(_BinaryenTupleMakeGetOperandAt(expr, i));\n          }\n          assert(this.stack.pop() == expr);\n        }\n        this.visitTupleMake(expr);\n        break;\n      }\n      case ExpressionId.TupleExtract: {\n        this.stack.push(expr);\n        this.visit(_BinaryenTupleExtractGetTuple(expr));\n        assert(this.stack.pop() == expr);\n        this.visitTupleExtract(expr);\n        break;\n      }\n      case ExpressionId.I31New: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31NewGetValue(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31New(expr);\n        break;\n      }\n      case ExpressionId.I31Get: {\n        this.stack.push(expr);\n        this.visit(_BinaryenI31GetGetI31(expr));\n        assert(this.stack.pop() == expr);\n        this.visitI31Get(expr);\n        break;\n      }\n      case ExpressionId.CallRef: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitCallRef(expr);\n        break;\n      }\n      case ExpressionId.RefTest: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefTest(expr);\n        break;\n      }\n      case ExpressionId.RefCast: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefCast(expr);\n        break;\n      }\n      case ExpressionId.BrOn: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitBrOn(expr);\n        break;\n      }\n      case ExpressionId.RttCanon: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttCanon(expr);\n        break;\n      }\n      case ExpressionId.RttSub: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRttSub(expr);\n        break;\n      }\n      case ExpressionId.StructNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructNew(expr);\n        break;\n      }\n      case ExpressionId.StructGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructGet(expr);\n        break;\n      }\n      case ExpressionId.StructSet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitStructSet(expr);\n        break;\n      }\n      case ExpressionId.ArrayNew: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayNew(expr);\n        break;\n      }\n      case ExpressionId.ArrayGet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayGet(expr);\n        break;\n      }\n      case ExpressionId.ArraySet: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArraySet(expr);\n        break;\n      }\n      case ExpressionId.ArrayLen: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitArrayLen(expr);\n        break;\n      }\n      case ExpressionId.RefAs: {\n        this.stack.push(expr);\n        assert(false); // TODO\n        assert(this.stack.pop() == expr);\n        this.visitRefAs(expr);\n        break;\n      }\n      default: throw new Error(\"unexpected expression kind\");\n    }\n    this._currentExpression = previousExpression;\n  }\n}\n\n/** Base class of custom Binaryen passes. */\nexport abstract class Pass extends Visitor {\n\n  /** Gets the current function being walked. */\n  get currentFunction(): FunctionRef {\n    var currentFunction = this._currentFunction;\n    if (!currentFunction) throw new Error(\"not walking a function\");\n    return currentFunction;\n  }\n  private _currentFunction: FunctionRef = 0;\n\n  /** Gets the current global being walked. */\n  get currentGlobal(): GlobalRef {\n    var currentGlobal = this._currentGlobal;\n    if (!currentGlobal) throw new Error(\"not walking a global\");\n    return currentGlobal;\n  }\n  private _currentGlobal: GlobalRef = 0;\n\n  /** Constructs a new Binaryen pass. */\n  constructor(readonly module: Module) {\n    super();\n  }\n\n  // Walking\n\n  /** Walks the entire module. */\n  walkModule(): void {\n    this.walkFunctions();\n    this.walkGlobals();\n  }\n\n  /** Walks all functions. */\n  walkFunctions(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumFunctions(moduleRef); i < k; ++i) {\n      this.walkFunction(_BinaryenGetFunctionByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific function. */\n  walkFunction(func: FunctionRef): void {\n    var body = _BinaryenFunctionGetBody(func);\n    if (body) {\n      this._currentFunction = func;\n      this.visit(body);\n      this._currentFunction = 0;\n    }\n  }\n\n  /** Walks all global variables. */\n  walkGlobals(): void {\n    var moduleRef = this.module.ref;\n    for (let i: Index = 0, k = _BinaryenGetNumGlobals(moduleRef); i < k; ++i) {\n      this.walkGlobal(_BinaryenGetGlobalByIndex(moduleRef, i));\n    }\n  }\n\n  /** Walks a specific global variable. */\n  walkGlobal(global: GlobalRef): void {\n    this._currentGlobal = global;\n    var init = _BinaryenGlobalGetInitExpr(global);\n    if (init) this.visit(init);\n    this._currentGlobal = 0;\n  }\n\n  // Utility\n\n  /** Replaces the current expression with the specified replacement. */\n  replaceCurrent(replacement: ExpressionRef): void {\n    var search = this.currentExpression;\n    var func = this.currentFunction;\n    var body = _BinaryenFunctionGetBody(func);\n    if (body == search) {\n      _BinaryenFunctionSetBody(func, replacement);\n    } else {\n      var parent = assert(this.parentExpressionOrNull);\n      var replaced = replaceChild(parent, search, replacement);\n      if (!replaced) throw Error(\"failed to replace expression\");\n      _BinaryenExpressionFinalize(parent);\n    }\n  }\n}\n\n/** Replaces an expression within a parent expression. Returns the replaced expression on success, otherwise `0`. */\nexport function replaceChild(\n  /** Parent expression containing `search`. */\n  parent: ExpressionRef,\n  /** Expression to replace. */\n  search: ExpressionRef,\n  /** Expression to replace `search` with. */\n  replacement: ExpressionRef\n): ExpressionRef {\n  switch (_BinaryenExpressionGetId(parent)) {\n    case ExpressionId.Block: {\n      let numChildren = _BinaryenBlockGetNumChildren(parent);\n      for (let i: Index = 0; i < numChildren; ++i) {\n        let child = _BinaryenBlockGetChildAt(parent, i);\n        if (child == search) {\n          _BinaryenBlockSetChildAt(parent, i, replacement);\n          return child;\n        }\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      let condition = _BinaryenIfGetCondition(parent);\n      if (condition == search) {\n        _BinaryenIfSetCondition(parent, replacement);\n        return condition;\n      }\n      let ifTrue = _BinaryenIfGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenIfSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenIfGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenIfSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      break;\n    }\n    case ExpressionId.Loop: {\n      let body = _BinaryenLoopGetBody(parent);\n      if (body == search) {\n        _BinaryenLoopSetBody(parent, replacement);\n        return body;\n      }\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(parent);\n      if (condition == search) {\n        _BinaryenBreakSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenBreakGetValue(parent);\n      if (value == search) {\n        _BinaryenBreakSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Switch: {\n      let condition = _BinaryenSwitchGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSwitchSetCondition(parent, replacement);\n        return condition;\n      }\n      let value = _BinaryenSwitchGetValue(parent);\n      if (value == search) {\n        _BinaryenSwitchSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Call: {\n      let numOperands = _BinaryenCallGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      let target = _BinaryenCallIndirectGetTarget(parent);\n      if (target == search) {\n        _BinaryenCallIndirectSetTarget(parent, replacement);\n        return target;\n      }\n      let numOperands = _BinaryenCallIndirectGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenCallIndirectGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenCallIndirectSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      let value = _BinaryenLocalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenLocalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      let value = _BinaryenGlobalSetGetValue(parent);\n      if (value == search) {\n        _BinaryenGlobalSetSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Load: {\n      let ptr = _BinaryenLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.Store: {\n      let ptr = _BinaryenStoreGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenStoreSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenStoreGetValue(parent);\n      if (value == search) {\n        _BinaryenStoreSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      let value = _BinaryenUnaryGetValue(parent);\n      if (value == search) {\n        _BinaryenUnarySetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Binary: {\n      let left = _BinaryenBinaryGetLeft(parent);\n      if (left == search) {\n        _BinaryenBinarySetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenBinaryGetRight(parent);\n      if (right == search) {\n        _BinaryenBinarySetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Select: {\n      let ifTrue = _BinaryenSelectGetIfTrue(parent);\n      if (ifTrue == search) {\n        _BinaryenSelectSetIfTrue(parent, replacement);\n        return ifTrue;\n      }\n      let ifFalse = _BinaryenSelectGetIfFalse(parent);\n      if (ifFalse == search) {\n        _BinaryenSelectSetIfFalse(parent, replacement);\n        return ifFalse;\n      }\n      let condition = _BinaryenSelectGetCondition(parent);\n      if (condition == search) {\n        _BinaryenSelectSetCondition(parent, replacement);\n        return condition;\n      }\n      break;\n    }\n    case ExpressionId.Drop: {\n      let value = _BinaryenDropGetValue(parent);\n      if (value == search) {\n        _BinaryenDropSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.Return: {\n      let value = _BinaryenReturnGetValue(parent);\n      if (value == search) {\n        _BinaryenReturnSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.MemorySize: {\n      break;\n    }\n    case ExpressionId.MemoryGrow: {\n      let delta = _BinaryenMemoryGrowGetDelta(parent);\n      if (delta == search) {\n        _BinaryenMemoryGrowSetDelta(parent, replacement);\n        return delta;\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      let ptr = _BinaryenAtomicRMWGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicRMWSetPtr(parent, replacement);\n        return ptr;\n      }\n      let value = _BinaryenAtomicRMWGetValue(parent);\n      if (value == search) {\n        _BinaryenAtomicRMWSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      let ptr = _BinaryenAtomicCmpxchgGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicCmpxchgSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicCmpxchgGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicCmpxchgSetExpected(parent, replacement);\n        return expected;\n      }\n      let repl = _BinaryenAtomicCmpxchgGetReplacement(parent);\n      if (repl == search) {\n        _BinaryenAtomicCmpxchgSetReplacement(parent, replacement);\n        return repl;\n      }\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      let ptr = _BinaryenAtomicWaitGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicWaitSetPtr(parent, replacement);\n        return ptr;\n      }\n      let expected = _BinaryenAtomicWaitGetExpected(parent);\n      if (expected == search) {\n        _BinaryenAtomicWaitSetExpected(parent, replacement);\n        return expected;\n      }\n      let timeout = _BinaryenAtomicWaitGetTimeout(parent);\n      if (timeout == search) {\n        _BinaryenAtomicWaitSetTimeout(parent, replacement);\n        return timeout;\n      }\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      let ptr = _BinaryenAtomicNotifyGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenAtomicNotifySetPtr(parent, replacement);\n        return ptr;\n      }\n      let notifyCount = _BinaryenAtomicNotifyGetNotifyCount(parent);\n      if (notifyCount == search) {\n        _BinaryenAtomicNotifySetNotifyCount(parent, replacement);\n        return notifyCount;\n      }\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      let vec = _BinaryenSIMDExtractGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDExtractSetVec(parent, replacement);\n        return vec;\n      }\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      let vec = _BinaryenSIMDReplaceGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDReplaceSetVec(parent, replacement);\n        return vec;\n      }\n      let value = _BinaryenSIMDReplaceGetValue(parent);\n      if (value == search) {\n        _BinaryenSIMDReplaceSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      let left = _BinaryenSIMDShuffleGetLeft(parent);\n      if (left == search) {\n        _BinaryenSIMDShuffleSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenSIMDShuffleGetRight(parent);\n      if (right == search) {\n        _BinaryenSIMDShuffleSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      let a = _BinaryenSIMDTernaryGetA(parent);\n      if (a == search) {\n        _BinaryenSIMDTernarySetA(parent, replacement);\n        return a;\n      }\n      let b = _BinaryenSIMDTernaryGetB(parent);\n      if (b == search) {\n        _BinaryenSIMDTernarySetB(parent, replacement);\n        return b;\n      }\n      let c = _BinaryenSIMDTernaryGetC(parent);\n      if (c == search) {\n        _BinaryenSIMDTernarySetC(parent, replacement);\n        return c;\n      }\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      let vec = _BinaryenSIMDShiftGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDShiftSetVec(parent, replacement);\n        return vec;\n      }\n      let shift = _BinaryenSIMDShiftGetShift(parent);\n      if (shift == search) {\n        _BinaryenSIMDShiftSetShift(parent, replacement);\n        return shift;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      let ptr = _BinaryenSIMDLoadGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadSetPtr(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.SIMDLoadStoreLane: {\n      let ptr = _BinaryenSIMDLoadStoreLaneGetPtr(parent);\n      if (ptr == search) {\n        _BinaryenSIMDLoadStoreLaneSetPtr(parent, replacement);\n        return ptr;\n      }\n      let vec = _BinaryenSIMDLoadStoreLaneGetVec(parent);\n      if (vec == search) {\n        _BinaryenSIMDLoadStoreLaneSetVec(parent, replacement);\n        return ptr;\n      }\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      let dest = _BinaryenMemoryInitGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryInitSetDest(parent, replacement);\n        return dest;\n      }\n      let offset = _BinaryenMemoryInitGetOffset(parent);\n      if (offset == search) {\n        _BinaryenMemoryInitSetOffset(parent, replacement);\n        return offset;\n      }\n      let size = _BinaryenMemoryInitGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryInitSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      let dest = _BinaryenMemoryCopyGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryCopySetDest(parent, replacement);\n        return dest;\n      }\n      let source = _BinaryenMemoryCopyGetSource(parent);\n      if (source == search) {\n        _BinaryenMemoryCopySetSource(parent, replacement);\n        return source;\n      }\n      let size = _BinaryenMemoryCopyGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryCopySetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      let dest = _BinaryenMemoryFillGetDest(parent);\n      if (dest == search) {\n        _BinaryenMemoryFillSetDest(parent, replacement);\n        return dest;\n      }\n      let value = _BinaryenMemoryFillGetValue(parent);\n      if (value == search) {\n        _BinaryenMemoryFillSetValue(parent, replacement);\n        return value;\n      }\n      let size = _BinaryenMemoryFillGetSize(parent);\n      if (size == search) {\n        _BinaryenMemoryFillSetSize(parent, replacement);\n        return size;\n      }\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIs: {\n      let value = _BinaryenRefIsGetValue(parent);\n      if (value == search) {\n        _BinaryenRefIsSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.RefEq: {\n      let left = _BinaryenRefEqGetLeft(parent);\n      if (left == search) {\n        _BinaryenRefEqSetLeft(parent, replacement);\n        return left;\n      }\n      let right = _BinaryenRefEqGetRight(parent);\n      if (right == search) {\n        _BinaryenRefEqSetRight(parent, replacement);\n        return right;\n      }\n      break;\n    }\n    case ExpressionId.Try: {\n      let body = _BinaryenTryGetBody(parent);\n      if (body == search) {\n        _BinaryenTrySetBody(parent, replacement);\n        return body;\n      }\n      let numCatchBodies = _BinaryenTryGetNumCatchBodies(parent);\n      for (let i: Index = 0; i < numCatchBodies; ++i) {\n        let catchBody = _BinaryenTryGetCatchBodyAt(parent, i);\n        if (catchBody == search) {\n          _BinaryenTrySetCatchBodyAt(parent, i, replacement);\n          return catchBody;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Throw: {\n      let numOperands = _BinaryenThrowGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenThrowGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenThrowSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      let numOperands = _BinaryenTupleMakeGetNumOperands(parent);\n      for (let i: Index = 0; i < numOperands; ++i) {\n        let operand = _BinaryenTupleMakeGetOperandAt(parent, i);\n        if (operand == search) {\n          _BinaryenTupleMakeSetOperandAt(parent, i, replacement);\n          return operand;\n        }\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      let tuple = _BinaryenTupleExtractGetTuple(parent);\n      if (tuple == search) {\n        _BinaryenTupleExtractSetTuple(parent, replacement);\n        return tuple;\n      }\n      break;\n    }\n    case ExpressionId.I31New: {\n      let value = _BinaryenI31NewGetValue(parent);\n      if (value == search) {\n        _BinaryenI31NewSetValue(parent, replacement);\n        return value;\n      }\n      break;\n    }\n    case ExpressionId.I31Get: {\n      let i31Expr = _BinaryenI31GetGetI31(parent);\n      if (i31Expr == search) {\n        _BinaryenI31GetSetI31(parent, replacement);\n        return i31Expr;\n      }\n      break;\n    }\n    case ExpressionId.CallRef: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefTest: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefCast: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.BrOn: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttCanon: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RttSub: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.StructSet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayNew: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayGet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArraySet: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.ArrayLen: {\n      assert(false); // TODO\n      break;\n    }\n    case ExpressionId.RefAs: {\n      assert(false); // TODO\n      break;\n    }\n    default: throw new Error(\"unexpected expression id\");\n  }\n  return 0;\n}\n","/**\n * @fileoverview A lightweight store instrumentation pass.\n * \n * Can be used to find rogue stores to protected memory addresses like object\n * headers or similar, without going overboard with instrumentation. Also\n * passes a flag whether a store originates within the runtime or other code.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  Compiler\n} from \"../compiler\";\n\nimport {\n  createType,\n  ExpressionRef,\n  TypeRef\n} from \"../module\";\n\nimport {\n  _BinaryenFunctionGetName,\n  _BinaryenStoreGetBytes,\n  _BinaryenStoreGetOffset,\n  _BinaryenStoreGetPtr,\n  _BinaryenStoreSetPtr\n} from \"../glue/binaryen\";\n\n/** Instruments stores to also call an import. */\nexport class RtraceMemory extends Pass {\n  /** Whether we've seen any stores. */\n  seenStores: bool = false;\n  /** Target pointer type. */\n  ptrType: TypeRef;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.ptrType = compiler.options.sizeTypeRef;\n  }\n\n  checkRT(): bool {\n    var functionName = this.module.readStringCached(_BinaryenFunctionGetName(this.currentFunction))!;\n    return functionName.startsWith(\"~lib/rt/\");\n  }\n\n  /** @override */\n  visitStore(store: ExpressionRef): void {\n    var module = this.module;\n    var ptr = _BinaryenStoreGetPtr(store);\n    var offset = _BinaryenStoreGetOffset(store);\n    var bytes = _BinaryenStoreGetBytes(store);\n    // onstore(ptr: usize, offset: i32, bytes: i32, isRT: bool) -> ptr\n    _BinaryenStoreSetPtr(store,\n      module.call(\"~onstore\", [\n        ptr,\n        module.i32(offset),\n        module.i32(bytes),\n        module.i32(i32(this.checkRT()))\n      ], this.ptrType)\n    );\n    this.seenStores = true;\n  }\n\n  // TODO: MemoryFill, Atomics\n\n  /** @override */\n  walkModule(): void {\n    super.walkModule();\n    if (this.seenStores) {\n      this.module.addFunctionImport(\"~onstore\", \"rtrace\", \"onstore\",\n        createType([ this.ptrType, TypeRef.I32, TypeRef.I32, TypeRef.I32 ]),\n        this.ptrType\n      );\n    }\n  }\n}\n","/**\n * @fileoverview Shadow stack instrumentation for a precise GC.\n * \n * Instruments function arguments and local assignments marked with a 'tostack'\n * call to also do stores to a shadow stack of managed values only.\n * \n * Consider a simple call to a function looking like the following, taking\n * managed arguments, plus assigning managed values to locals:\n * \n *   function foo(a: Obj, b: Obj): Obj {\n *     var c = __tostack(a) // slot 2\n *     __collect()\n *     return b\n *   }\n *   \n *   foo(__tostack(a), __tostack(b)) // slot 0, 1\n * \n * At the call to `__collect()` the 32-bit stack frame of the function is:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed argument 'a'\n *      4   | Second managed argument 'b'\n *   -------|----------------------------\n *      8   | First managed local 'c'\n * \n * We are splitting the frame in two halves as annotated since both halves are\n * only known separately for indirect calls, with the first half becoming an\n * extension of the calling function's stack frame by means of treating the\n * arguments as if these were locals beyond the caller's `numLocals`. Function\n * arguments stay a bit longer on the stack than usually, but we also don't have\n * to modify the stack pointer pre-call at all this way. The caller's amended\n * stack frame when assuming one managed local may look like this:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local '?'\n *      4   | Extended with first managed argument 'a'\n *      8   | Extended with second managed argument 'b'\n * \n * with the callee's stack frame becoming just:\n * \n *   Offset | Value stored\n *   -------|----------------------------\n *      0   | First managed local 'c'\n * \n * Instrumentation added below looks about like the following, with the stack\n * growing downwards and 't' and 'r' being new temporary locals:\n * \n *   // callee frameSize = 1 * sizeof<usize>()\n *   function foo(a: usize, b: usize): usize {\n *     memory.fill(__stack_pointer -= frameSize, 0, frameSize)\n *     store<usize>(__stack_pointer, c = a, 0 * sizeof<usize>())\n *     __collect()\n *     var r = b\n *     __stack_pointer += frameSize\n *     return r\n *   }\n * \n *   // caller frameSize = (numLocalSlots + 2 [by extension]) * sizeof<usize>()\n *   (\n *     r = foo(\n *       ( t = a,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 0) * sizeof<usize>()),\n *         t ),\n *       ( t = b,\n *         store<usize>(__stack_pointer, t, (numLocalSlots + 1) * sizeof<usize>()),\n *         t )\n *     ),\n *     r\n *   )\n * \n * Also note that we have to `memory.fill` the second half because the first\n * assignment to a local may happen at a later point within the function. The\n * invariant we need to maintain for a precise GC is that it only sees zeroes\n * or valid pointers, but never an invalid pointer left on the stack earlier.\n * Since most frames are small, we unroll a sequence of `store`s up to a frame\n * size of 16 bytes, and `memory.fill`, if available, beyond.\n * \n * @license Apache-2.0\n */\n\nimport {\n  Pass\n} from \"./pass\";\n\nimport {\n  _BinaryenAddFunction,\n  _BinaryenAddFunctionExport,\n  _BinaryenCallGetNumOperands,\n  _BinaryenCallGetOperandAt,\n  _BinaryenCallGetTarget,\n  _BinaryenCallIndirectGetNumOperands,\n  _BinaryenCallIndirectGetOperandAt,\n  _BinaryenCallIndirectSetOperandAt,\n  _BinaryenCallSetOperandAt,\n  _BinaryenExportGetKind,\n  _BinaryenExportGetName,\n  _BinaryenExportGetValue,\n  _BinaryenExpressionGetId,\n  _BinaryenExpressionGetType,\n  _BinaryenFunctionGetBody,\n  _BinaryenFunctionGetName,\n  _BinaryenFunctionGetNumLocals,\n  _BinaryenFunctionGetNumVars,\n  _BinaryenFunctionGetParams,\n  _BinaryenFunctionGetResults,\n  _BinaryenFunctionGetVar,\n  _BinaryenFunctionSetBody,\n  _BinaryenGetExport,\n  _BinaryenGetFunction,\n  _BinaryenLocalSetGetIndex,\n  _BinaryenLocalSetGetValue,\n  _BinaryenLocalSetIsTee,\n  _BinaryenLocalSetSetValue,\n  _BinaryenRemoveExport,\n  _BinaryenRemoveFunction,\n  _BinaryenReturnGetValue,\n  _BinaryenReturnSetValue,\n  _free\n} from \"../glue/binaryen\";\n\nimport {\n  ExpressionId,\n  ExpressionRef,\n  FunctionRef,\n  Index,\n  BinaryOp,\n  TypeRef,\n  allocPtrArray,\n  Module,\n  ExternalKind,\n  ExportRef,\n  expandType,\n  isConstZero\n} from \"../module\";\n\nimport {\n  Compiler,\n  Options\n} from \"../compiler\";\n\nimport {\n  Feature\n} from \"../common\";\n\nimport {\n  BuiltinNames\n} from \"../builtins\";\n\ntype LocalIndex = Index;\ntype SlotIndex = Index;\ntype SlotMap = Map<LocalIndex,SlotIndex>;\ntype TempMap = Map<TypeRef,LocalIndex>;\n\n/** Attempts to match the `__tostack(value)` pattern. Returns `value` if a match, otherwise `0`.  */\nfunction matchPattern(module: Module, expr: ExpressionRef): ExpressionRef {\n  if (_BinaryenExpressionGetId(expr) == ExpressionId.Call && module.readStringCached(_BinaryenCallGetTarget(expr)) == BuiltinNames.tostack) {\n    assert(_BinaryenCallGetNumOperands(expr) == 1);\n    return _BinaryenCallGetOperandAt(expr, 0);\n  }\n  return 0;\n}\n\n/** Tests whether a `value` matched by `matchTostack` needs a slot. */\nfunction needsSlot(module: Module, value: ExpressionRef): bool {\n  switch (_BinaryenExpressionGetId(value)) {\n    // no need to stack null pointers\n    case ExpressionId.Const: return !isConstZero(value);\n    // already kept in another slot\n    case ExpressionId.LocalGet:\n    case ExpressionId.LocalSet: return false; // tee\n  }\n  return true;\n}\n\n/** Instruments a module with a shadow stack for precise GC. */\nexport class ShadowStackPass extends Pass {\n  /** Stack frame slots, per function. */\n  slotMaps: Map<FunctionRef, SlotMap> = new Map();\n  /** Temporary locals, per function. */\n  tempMaps: Map<FunctionRef, TempMap> = new Map();\n  /** Exports (with managed operands) map. */\n  exportMap: Map<string,i32[]> = new Map();\n  /** Compiler reference. */\n  compiler: Compiler;\n\n  constructor(compiler: Compiler) {\n    super(compiler.module);\n    this.compiler = compiler;\n  }\n\n  /** Compiler options. */\n  get options(): Options { return this.compiler.options; }\n  /** Target pointer type. */\n  get ptrType(): TypeRef { return this.options.sizeTypeRef; }\n  /** Target pointer size. */\n  get ptrSize(): i32 { return this.ptrType == TypeRef.I64 ? 8 : 4; }\n  /** Target pointer addition operation. */\n  get ptrBinaryAdd(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.AddI64 : BinaryOp.AddI32; }\n  /** Target pointer subtraction operation. */\n  get ptrBinarySub(): BinaryOp { return this.ptrType == TypeRef.I64 ? BinaryOp.SubI64 : BinaryOp.SubI32; }\n\n  /** Gets a constant with the specified value of the target pointer type. */\n  ptrConst(value: i32): ExpressionRef {\n    return this.ptrType == TypeRef.I64\n      ? this.module.i64(value)\n      : this.module.i32(value);\n  }\n\n  /** Notes the presence of a slot for the specified (imaginary) local, returning the slot index. */\n  noteSlot(func: FunctionRef, localIndex: Index): i32 {\n    let slotMap: SlotMap;\n    if (this.slotMaps.has(func)) {\n      slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      if (slotMap.has(localIndex)) {\n        return changetype<i32>(slotMap.get(localIndex));\n      }\n    } else {\n      slotMap = new Map();\n      this.slotMaps.set(func, slotMap);\n    }\n    let slotIndex = slotMap.size;\n    slotMap.set(localIndex, slotIndex);\n    return slotIndex;\n  }\n\n  /** Notes the presence of an exported function taking managed operands. */\n  noteExport(name: string, managedOperandIndices: i32[]): void {\n    if (!managedOperandIndices.length) return;\n    this.exportMap.set(name, managedOperandIndices);\n  }\n\n  /** Gets a shared temporary local of the given type in the specified functions. */\n  getSharedTemp(func: FunctionRef, type: TypeRef): Index {\n    let tempMap: TempMap;\n    if (this.tempMaps.has(func)) {\n      tempMap = changetype<TempMap>(this.tempMaps.get(func));\n      if (tempMap.has(type)) {\n        return changetype<Index>(tempMap.get(type));\n      }\n    } else {\n      tempMap = new Map();\n      this.tempMaps.set(func, tempMap);\n    }\n    let numLocals = _BinaryenFunctionGetNumLocals(func);\n    let localIndex = numLocals + tempMap.size;\n    tempMap.set(type, localIndex);\n    return localIndex;\n  }\n\n  /** Makes an expression modifying the stack pointer by the given offset. */\n  makeStackOffset(offset: i32): ExpressionRef {\n    assert(offset != 0);\n    var module = this.module;\n    var expr = module.global_set(BuiltinNames.stack_pointer,\n      module.binary(offset >= 0 ? this.ptrBinaryAdd : this.ptrBinarySub,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        this.ptrConst(abs(offset))\n      )\n    );\n    if (offset > 0) return expr;\n    return module.block(null, [\n      expr,\n      this.makeStackCheck()\n    ], TypeRef.None);\n  }\n\n  /** Makes a sequence of expressions zeroing the stack frame. */\n  makeStackFill(frameSize: i32, stmts: ExpressionRef[]): void {\n    assert(frameSize > 0);\n    var module = this.module;\n    if (this.options.hasFeature(Feature.BULK_MEMORY) && frameSize > 16) {\n      stmts.push(\n        module.memory_fill(\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.i32(0), // TODO: Wasm64 also i32?\n          this.ptrConst(frameSize)\n        )\n      );\n    } else {\n      let remain = frameSize;\n      while (remain >= 8) {\n        // store<i64>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(8,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i64(0),\n            TypeRef.I64,\n            frameSize - remain\n          )\n        );\n        remain -= 8;\n      }\n      if (remain) {\n        assert(remain == 4);\n        // store<i32>(__stack_pointer, 0, frameSize - remain)\n        stmts.push(\n          module.store(4,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.i32(0),\n            TypeRef.I32,\n            frameSize - remain\n          )\n        );\n      }\n    }\n  }\n\n  private hasStackCheckFunction: bool = false;\n\n  /** Makes a check that the current stack pointer is valid. */\n  makeStackCheck(): ExpressionRef {\n    var module = this.module;\n    if (!this.hasStackCheckFunction) {\n      this.hasStackCheckFunction = true;\n      module.addFunction(\"~stack_check\", TypeRef.None, TypeRef.None, null,\n        module.if(\n          module.binary(BinaryOp.LtI32,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.global_get(BuiltinNames.data_end, this.ptrType)\n          ),\n          this.compiler.makeStaticAbort(this.compiler.ensureStaticString(\"stack overflow\"), this.compiler.program.nativeSource)\n        )\n      );\n    }\n    return module.call(\"~stack_check\", null, TypeRef.None);\n  }\n\n  private updateCallOperands(operands: ExpressionRef[]): i32 {\n    var module = this.module;\n    var numSlots = 0;\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      let operand = operands[i];\n      let match = matchPattern(module, operand);\n      if (!match) continue;\n      if (!needsSlot(module, match)) {\n        operands[i] = match;\n        continue;\n      }\n      let currentFunction = this.currentFunction;\n      let numLocals = _BinaryenFunctionGetNumLocals(currentFunction);\n      let slotIndex = this.noteSlot(currentFunction, numLocals + this.callSlotOffset + i);\n      let temp = this.getSharedTemp(currentFunction, this.ptrType);\n      let stmts = new Array<ExpressionRef>();\n      // t = value\n      stmts.push(\n        module.local_set(temp, match, false)\n      );\n      // store<usize>(__stack_pointer, t, slotIndex * ptrSize)\n      stmts.push(\n        module.store(this.ptrSize,\n          module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n          module.local_get(temp, this.ptrType),\n          this.ptrType, slotIndex * this.ptrSize\n        )\n      );\n      // -> t\n      stmts.push(\n        module.local_get(temp, this.ptrType)\n      );\n      operands[i] = module.block(null, stmts, this.ptrType);\n      ++numSlots;\n    }\n    return numSlots;\n  }\n\n  /** Slot offset accounting for nested calls. */\n  private callSlotOffset: i32 = 0;\n  /** Slot offset stack in nested calls. */\n  private callSlotStack: i32[] = new Array();\n\n  /** @override */\n  visitCallPre(call: ExpressionRef): void {\n    var numOperands = _BinaryenCallGetNumOperands(call);\n    var operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallGetOperandAt(call, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallSetOperandAt(call, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCall(call: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitCallIndirectPre(callIndirect: ExpressionRef): void {\n    let numOperands = _BinaryenCallIndirectGetNumOperands(callIndirect);\n    let operands = new Array<ExpressionRef>(numOperands);\n    for (let i: Index = 0; i < numOperands; ++i) {\n      operands[i] = _BinaryenCallIndirectGetOperandAt(callIndirect, i);\n    }\n    let numSlots = this.updateCallOperands(operands);\n    for (let i = 0, k = operands.length; i < k; ++i) {\n      _BinaryenCallIndirectSetOperandAt(callIndirect, i, operands[i]);\n    }\n    if (numSlots) {\n      // Reserve these slots for us so nested calls use their own\n      this.callSlotOffset += numSlots;\n    }\n    this.callSlotStack.push(numSlots);\n  }\n\n  /** @override */\n  visitCallIndirect(callIndirect: ExpressionRef): void {\n    let numSlots = this.callSlotStack.pop();\n    if (numSlots) this.callSlotOffset -= numSlots;\n  }\n\n  /** @override */\n  visitLocalSet(localSet: ExpressionRef): void {\n    let module = this.module;\n    let value = _BinaryenLocalSetGetValue(localSet);\n    let match = matchPattern(module, value);\n    if (!match) return;\n    if (!needsSlot(module, match)) {\n      _BinaryenLocalSetSetValue(localSet, match);\n      return;\n    }\n    let index = _BinaryenLocalSetGetIndex(localSet);\n    let slotIndex = this.noteSlot(this.currentFunction, index);\n    let stmts = new Array<ExpressionRef>();\n    // store<usize>(__stack_pointer, local = match, slotIndex * ptrSize)\n    stmts.push(\n      module.store(this.ptrSize,\n        module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n        module.local_tee(index, match, false),\n        this.ptrType, slotIndex * this.ptrSize\n      )\n    );\n    if (_BinaryenLocalSetIsTee(localSet)) {\n      // -> local\n      stmts.push(\n        module.local_get(index, this.ptrType)\n      );\n      this.replaceCurrent(module.flatten(stmts, this.ptrType));\n    } else {\n      this.replaceCurrent(module.flatten(stmts, TypeRef.None));\n    }\n  }\n\n  /** Updates a function with additional locals etc. */\n  updateFunction(funcRef: FunctionRef): void {\n    let name = _BinaryenFunctionGetName(funcRef);\n    let params = _BinaryenFunctionGetParams(funcRef);\n    let results = _BinaryenFunctionGetResults(funcRef);\n    let body = assert(_BinaryenFunctionGetBody(funcRef));\n    let numVars = _BinaryenFunctionGetNumVars(funcRef);\n    let vars = new Array<TypeRef>();\n    for (let i: Index = 0; i < numVars; ++i) {\n      vars[i] = _BinaryenFunctionGetVar(funcRef, i);\n    }\n    let tempMaps = this.tempMaps;\n    if (tempMaps.has(funcRef)) {\n      let tempMap = changetype<TempMap>(tempMaps.get(funcRef));\n      for (let _keys = Map_keys(tempMap), i = 0, k = _keys.length; i < k; ++i) {\n        vars.push(_keys[i]);\n      }\n    }\n    let moduleRef = this.module.ref;\n    _BinaryenRemoveFunction(moduleRef, name);\n    let cArr = allocPtrArray(vars);\n    _BinaryenAddFunction(moduleRef, name, params, results, cArr, vars.length, body);\n    _free(cArr);\n  }\n\n  /** Updates a function export taking managed arguments. */\n  updateExport(exportRef: ExportRef, managedOperandIndices: i32[]): void {\n    var module = this.module;\n    var moduleRef = module.ref;\n    assert(_BinaryenExportGetKind(exportRef) == ExternalKind.Function);\n\n    var internalNameRef = _BinaryenExportGetValue(exportRef);\n    var internalName = module.readStringCached(internalNameRef)!;\n    var externalNameRef = _BinaryenExportGetName(exportRef);\n    var funcRef = _BinaryenGetFunction(moduleRef, internalNameRef);\n    var params = _BinaryenFunctionGetParams(funcRef);\n    var paramTypes = expandType(params);\n    var numParams = paramTypes.length;\n    var results = _BinaryenFunctionGetResults(funcRef);\n    var numLocals = numParams;\n    var vars = new Array<TypeRef>();\n    var numSlots = assert(managedOperandIndices.length);\n    var frameSize = numSlots * this.ptrSize;\n    var wrapperName = \"export:\" + internalName;\n    var wrapperNameRef = module.allocStringCached(wrapperName);\n\n    if (_BinaryenGetFunction(moduleRef, wrapperNameRef) == 0) {\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      for (let slotIndex = 0; slotIndex < numSlots; ++slotIndex) {\n        // store<usize>(__stack_pointer, $local, slotIndex * ptrSize)\n        stmts.push(\n          module.store(this.ptrSize,\n            module.global_get(BuiltinNames.stack_pointer, this.ptrType),\n            module.local_get(managedOperandIndices[slotIndex], this.ptrType),\n            this.ptrType, slotIndex * this.ptrSize\n          )\n        );\n      }\n      let forwardedOperands = new Array<ExpressionRef>(numParams);\n      for (let i = 0; i < numParams; ++i) {\n        forwardedOperands[i] = module.local_get(i, paramTypes[i]);\n      }\n      if (results != TypeRef.None) {\n        let tempIndex = numLocals++;\n        vars.push(results);\n        // t = original(...)\n        stmts.push(\n          module.local_set(tempIndex,\n            module.call(internalName, forwardedOperands, results),\n            false // internal\n          )\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(tempIndex, results)\n        );\n      } else {\n        // original(...)\n        stmts.push(\n          module.call(internalName, forwardedOperands, results)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      }\n      let cArr = allocPtrArray(vars);\n      _BinaryenAddFunction(moduleRef, wrapperNameRef, params, results, cArr, vars.length,\n        module.block(null, stmts, results)\n      );\n      _free(cArr);\n    }\n    _BinaryenRemoveExport(moduleRef, externalNameRef);\n    _BinaryenAddFunctionExport(moduleRef, wrapperNameRef, externalNameRef);\n  }\n\n  /** @override */\n  walkModule(): void {\n    // Run the pass normally\n    super.walkModule();\n\n    // Instrument returns in functions utilizing stack slots\n    var module = this.module;\n    var instrumentReturns = new InstrumentReturns(this);\n    for (let _keys = Map_keys(this.slotMaps), i = 0, k = _keys.length; i < k; ++i) {\n      let func = _keys[i];\n      let slotMap = changetype<SlotMap>(this.slotMaps.get(func));\n      let frameSize = slotMap.size * this.ptrSize;\n\n      // Instrument function returns\n      instrumentReturns.frameSize = frameSize;\n      instrumentReturns.walkFunction(func);\n\n      // Instrument function entry\n      let stmts = new Array<ExpressionRef>();\n      // __stack_pointer -= frameSize\n      stmts.push(\n        this.makeStackOffset(-frameSize)\n      );\n      // memory.fill(__stack_pointer, 0, frameSize)\n      this.makeStackFill(frameSize, stmts);\n      \n      // Handle implicit return\n      let body = _BinaryenFunctionGetBody(func);\n      let bodyType = _BinaryenExpressionGetType(body);\n      if (bodyType == TypeRef.Unreachable) {\n        // body\n        stmts.push(\n          body\n        );\n      } else if (bodyType == TypeRef.None) {\n        // body\n        stmts.push(\n          body\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n      } else {\n        let temp = this.getSharedTemp(func, bodyType);\n        // t = body\n        stmts.push(\n          module.local_set(temp, body, false)\n        );\n        // __stack_pointer += frameSize\n        stmts.push(\n          this.makeStackOffset(+frameSize)\n        );\n        // -> t\n        stmts.push(\n          module.local_get(temp, bodyType)\n        );\n      }\n      _BinaryenFunctionSetBody(func, module.flatten(stmts, bodyType));\n    }\n\n    // Update functions we added more locals to\n    // TODO: _BinaryenFunctionAddVar ?\n    for (let _keys = Map_keys(this.tempMaps), i = 0, k = _keys.length; i < k; ++i) {\n      this.updateFunction(_keys[i]);\n    }\n\n    // Update exports taking managed arguments\n    var exportMap = this.exportMap;\n    for (let _keys = Map_keys(exportMap), i = 0, k = _keys.length; i < k; ++i) {\n      let exportName = _keys[i];\n      let exportRef = _BinaryenGetExport(module.ref, module.allocStringCached(exportName));\n      let managedOperandIndices = changetype<i32[]>(exportMap.get(exportName));\n      this.updateExport(exportRef, managedOperandIndices);\n    }\n  }\n}\n\n/** Companion pass instrumenting `return` statements to restore the stack frame. */\nclass InstrumentReturns extends Pass {\n  /** Parent pass. */\n  parentPass: ShadowStackPass;\n  /** Frame size of the current function being processed. */\n  frameSize: i32 = 0;\n\n  constructor(shadowStack: ShadowStackPass) {\n    super(shadowStack.module);\n    this.parentPass = shadowStack;\n  }\n\n  /** @override */\n  visitReturn(ret: ExpressionRef): void {\n    assert(this.frameSize);\n    var module = this.module;\n    var value = _BinaryenReturnGetValue(ret);\n    var stmts = new Array<ExpressionRef>();\n    if (value) {\n      let returnType = _BinaryenExpressionGetType(value);\n      let temp = this.parentPass.getSharedTemp(this.currentFunction, returnType);\n      // t = value\n      stmts.push(\n        module.local_set(temp, value, false)\n      );\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return t\n      _BinaryenReturnSetValue(ret, module.local_get(temp, returnType));\n    } else {\n      // __stack_pointer += frameSize\n      stmts.push(\n        this.parentPass.makeStackOffset(+this.frameSize)\n      );\n      // return\n    }\n    stmts.push(\n      ret\n    );\n    this.replaceCurrent(module.flatten(stmts, TypeRef.Unreachable));\n  }\n}","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n// Memory manager constants\nconst AL_SIZE = 16;\nconst AL_MASK = AL_SIZE - 1;\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code range. */\n  get nativeRange(): Range { return this.nativeSource.range; }\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `Object` instance. */\n  get objectInstance(): Class {\n    var cached = this._objectInstance;\n    if (!cached) this._objectInstance = cached = this.requireClass(CommonNames.Object);\n    return cached;\n  }\n  private _objectInstance: Class | null = null;\n\n  /** Gets the standard `TemplateStringsArray` instance. */\n  get templateStringsArrayInstance(): Class {\n    var cached = this._templateStringsArrayInstance;\n    if (!cached) this._templateStringsArrayInstance = cached = this.requireClass(CommonNames.TemplateStringsArray);\n    return cached;\n  }\n  private _templateStringsArrayInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    var prototype = this.lookup(CommonNames.abort);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__new(size: usize, id: u32): usize` instance. */\n  get newInstance(): Function {\n    var cached = this._newInstance;\n    if (!cached) this._newInstance = cached = this.requireFunction(CommonNames.new_);\n    return cached;\n  }\n  private _newInstance: Function | null = null;\n\n  /** Gets the runtime `__renew(ptr: usize, size: usize): usize` instance. */\n  get renewInstance(): Function {\n    var cached = this._renewInstance;\n    if (!cached) this._renewInstance = cached = this.requireFunction(CommonNames.renew);\n    return cached;\n  }\n  private _renewInstance: Function | null = null;\n\n  /** Gets the runtime `__link(parentPtr: usize, childPtr: usize, expectMultiple: bool): void` instance. */\n  get linkInstance(): Function {\n    var cached = this._linkInstance;\n    if (!cached) this._linkInstance = cached = this.requireFunction(CommonNames.link);\n    return cached;\n  }\n  private _linkInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__newBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get newBufferInstance(): Function {\n    var cached = this._newBufferInstance;\n    if (!cached) this._newBufferInstance = cached = this.requireFunction(CommonNames.newBuffer);\n    return cached;\n  }\n  private _newBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__newArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get newArrayInstance(): Function {\n    var cached = this._newArrayInstance;\n    if (!cached) this._newArrayInstance = cached = this.requireFunction(CommonNames.newArray);\n    return cached;\n  }\n  private _newArrayInstance: Function | null = null;\n\n  /** Gets the runtime's internal `BLOCK` instance. */\n  get BLOCKInstance(): Class {\n    var cached = this._BLOCKInstance;\n    if (!cached) this._BLOCKInstance = cached = this.requireClass(CommonNames.BLOCK);\n    return cached;\n  }\n  private _BLOCKInstance: Class | null = null;\n\n  /** Gets the runtime's internal `OBJECT` instance. */\n  get OBJECTInstance(): Class {\n    var cached = this._OBJECTInstance;\n    if (!cached) this._OBJECTInstance = cached = this.requireClass(CommonNames.OBJECT);\n    return cached;\n  }\n  private _OBJECTInstance: Class | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the overhead of a memory manager block. */\n  get blockOverhead(): i32 {\n    // BLOCK | data...\n    //       ^ 16b alignment\n    return this.BLOCKInstance.nextMemoryOffset;\n  }\n\n  /** Gets the overhead of a managed object, excl. block overhead, incl. alignment. */\n  get objectOverhead(): i32 {\n    // OBJECT+align | data...\n    //        └ 0 ┘ ^ 16b alignment\n    return (this.OBJECTInstance.nextMemoryOffset - this.blockOverhead + AL_MASK) & ~AL_MASK;\n  }\n\n  /** Gets the total overhead of a managed object, incl. block overhead. */\n  get totalOverhead(): i32 {\n    // BLOCK | OBJECT+align | data...\n    // └     = TOTAL      ┘ ^ 16b alignment\n    return this.blockOverhead + this.objectOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart(currentOffset: i32): i32 {\n    var blockOverhead = this.blockOverhead;\n    return ((currentOffset + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n  }\n\n  /** Computes the next properly aligned offset of a memory manager block, given the current bump offset. */\n  computeBlockStart64(currentOffset: i64): i64 {\n    var blockOverhead = i64_new(this.blockOverhead);\n    return i64_sub(i64_align(i64_add(currentOffset, blockOverhead), AL_SIZE), blockOverhead);\n  }\n\n  /** Computes the size of a memory manager block, excl. block overhead. */\n  computeBlockSize(payloadSize: i32, isManaged: bool): i32 {\n    // see: std/rt/tlsf.ts, computeSize; becomes mmInfo\n    if (isManaged) payloadSize += this.objectOverhead;\n    // we know that payload must be aligned, and that block sizes must be chosen\n    // so that blocks are adjacent with the next payload aligned. hence, block\n    // size is payloadSize rounded up to where the next block would start:\n    var blockSize = this.computeBlockStart(payloadSize);\n    // make sure that block size is valid according to TLSF requirements\n    var blockOverhead = this.blockOverhead;\n    var blockMinsize = ((3 * this.options.usizeType.byteSize + blockOverhead + AL_MASK) & ~AL_MASK) - blockOverhead;\n    if (blockSize < blockMinsize) blockSize = blockMinsize;\n    const blockMaxsize = 1 << 30; // 1 << (FL_BITS + SB_BITS - 1), exclusive\n    const tagsMask = 3;\n    if (blockSize >= blockMaxsize || (blockSize & tagsMask) != 0) {\n      throw new Error(\"invalid block size\");\n    }\n    return blockSize;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.nonnull, new TypeDefinition(\n      CommonNames.nonnull,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.nonnull, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.funcref, Type.funcref);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n    this.registerNativeType(CommonNames.anyref, Type.anyref);\n    this.registerNativeType(CommonNames.eqref, Type.eqref);\n    this.registerNativeType(CommonNames.i31ref, Type.i31ref);\n    this.registerNativeType(CommonNames.dataref, Type.dataref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n    this.registerConstantInteger(CommonNames.ASC_EXPORT_RUNTIME, Type.bool,\n      i64_new(options.exportRuntime ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MAJOR, Type.i32,\n      i64_new(options.bundleMajorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_MINOR, Type.i32,\n      i64_new(options.bundleMinorVersion));\n    this.registerConstantInteger(CommonNames.ASC_VERSION_PATCH, Type.i32,\n      i64_new(options.bundlePatchVersion));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_GC, Type.bool,\n      i64_new(options.hasFeature(Feature.GC) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MEMORY64, Type.bool,\n      i64_new(options.hasFeature(Feature.MEMORY64) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        // File must be found here, as it would otherwise already have been reported by the parser\n        let foreignFile = assert(this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt));\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            foreignFile,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let localFile = queuedImport.localFile;\n          let localName = localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asAliasNamespace(\n              localName,\n              localFile,\n              localIdentifier\n            ),\n            localIdentifier // isImport\n          );\n          queuedImports.splice(i, 1);\n          madeProgress = true;\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          // File must be found here, as it would otherwise already have been reported by the parser\n          let foreignFile = assert(this.lookupForeignFile(foreignPath, assert(queuedExport.foreignPathAlt)));\n          let element = this.lookupForeign(localName, foreignFile, queuedExports);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.getMember(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookup(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) {\n      this.registerWrapperClass(Type.funcref, CommonNames.Funcref);\n      this.registerWrapperClass(Type.externref, CommonNames.Externref);\n      if (options.hasFeature(Feature.GC)) {\n        this.registerWrapperClass(Type.anyref, CommonNames.Anyref);\n        this.registerWrapperClass(Type.eqref, CommonNames.Eqref);\n        this.registerWrapperClass(Type.i31ref, CommonNames.I31ref);\n        this.registerWrapperClass(Type.dataref, CommonNames.Dataref);\n      }\n    }\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range,\n                  baseMember.identifierNode.text\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookup(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookup(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component kind: \" + name);\n    return element;\n  }\n\n  /** Requires that a global variable is present and returns it. */\n  requireGlobal(name: string): Global {\n    return <Global>this.require(name, ElementKind.GLOBAL);\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Requires that a global function is present and returns it. */\n  requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookup(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** The other file. */\n    foreignFile: File,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      // check if already resolved\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // follow queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n\n          // re-exported from another file\n          if (queuedExportForeignPath) {\n            let otherFile = this.lookupForeignFile(queuedExportForeignPath, assert(queuedExport.foreignPathAlt));\n            if (!otherFile) return null;\n            foreignName = queuedExport.localIdentifier.text;\n            foreignFile = otherFile;\n            continue;\n          }\n\n          // exported from this file\n          element = foreignFile.getMember(queuedExport.localIdentifier.text);\n          if (element) return element;\n        }\n      }\n      break;\n    } while (true);\n\n    // follow star exports\n    var exportsStar = foreignFile.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = this.lookupForeign(foreignName, exportsStar[i], queuedExports);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.getMember(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n    if (foreignFile) {\n      var element = this.lookupForeign(declaration.foreignName.text, foreignFile, queuedExports);\n      if (element) {\n        parent.add(declaration.name.text, element, declaration.name /* isImport */);\n        return;\n      }\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.getMember(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // keep original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Get the member with the specified name, if any. */\n  getMember(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element. */\n  lookup(name: string, isType: bool = false): Element | null {\n    return this.parent.lookup(name, isType);\n  }\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.getMember(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  getMember(name: string): DeclaredElement | null {\n    var element = super.getMember(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].getMember(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var element = this.getMember(name);\n    if (element) return element;\n    return this.program.lookup(name); // has no meaningful parent\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string,\n    parent: Element,\n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var member = this.getMember(name);\n    if (member) return member;\n    return super.lookup(name, isType);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    var member = this.getMember(name);\n    if (member) return member;\n    return super.lookup(name, isType);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    var parentKind = parent.kind;\n    if (parentKind == ElementKind.PROPERTY_PROTOTYPE) parentKind = parent.parent.kind;\n    return parentKind == ElementKind.CLASS || parentKind == ElementKind.INTERFACE;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n  /** Original function, if a stub. Otherwise `this`. */\n  original!: Function;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.original = this;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Gets the class or interface this function belongs to, if an instance method. */\n  getClassOrInterface(): Class | null {\n    var parent = this.parent;\n    if (parent.kind == ElementKind.PROPERTY) parent = parent.parent;\n    if (parent.kind == ElementKind.CLASS || parent.kind == ElementKind.INTERFACE) {\n      return <Class>parent;\n    }\n    return null;\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.original.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.original = this.original;\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string, isType: bool = false): Element | null {\n    if (!isType) {\n      let locals = this.localsByName;\n      if (locals.has(name)) return assert(locals.get(name));\n    }\n    return super.lookup(name, isType);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempFuncrefs: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempEqrefs: Local[] | null = null;\n  tempI31refs: Local[] | null = null;\n  tempDatarefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the field's `this` type. */\n  get thisType(): Type {\n    var parent = this.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    return (<Class>parent).type;\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    var cached = this._internalGetterName;\n    if (cached === null) this._internalGetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalGetterName: string | null = null;\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    var cached = this._internalSetterName;\n    if (cached === null) this._internalSetterName = cached = this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n    return cached;\n  }\n  private _internalSetterName: string | null = null;\n\n  /** Gets the signature of the respective getter function. */\n  get internalGetterSignature(): Signature {\n    var cached = this._internalGetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, null, this.type, this.thisType);\n    return cached;\n  }\n  private _internalGetterSignature: Signature | null = null;\n\n  /** Gets the signature of the respective setter function. */\n  get internalSetterSignature(): Signature {\n    var cached = this._internalSetterSignature;\n    if (!cached) this._internalGetterSignature = cached = new Signature(this.program, [ this.type ], Type.void, this.thisType);\n    return cached;\n  }\n  private _internalSetterSignature: Signature | null = null;\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n  /** Runtime visitor function reference. */\n  visitRef: FunctionRef = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.getMember(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads != null && overloads.has(kind)) {\n        return assert(overloads.get(kind));\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /** Gets the method of the specified name, resolved with the given type arguments. */\n  getMethod(name: string, typeArguments: Type[] | null = null): Function | null {\n    var member = this.getMember(name);\n    if (member && member.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      return this.program.resolver.resolveFunction(<FunctionPrototype>member, typeArguments);\n    }\n    return null;\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var member = assert(this.getMember(fieldName));\n    assert(member.kind == ElementKind.FIELD);\n    return (<Field>member).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var program = this.program;\n    var payloadSize = this.nextMemoryOffset + overhead;\n    var blockSize = program.computeBlockSize(payloadSize, true); // excl. overhead\n    var buffer = new Uint8Array(program.blockOverhead + blockSize);\n    var OBJECT = program.OBJECTInstance;\n    OBJECT.writeField(\"mmInfo\", blockSize, buffer, 0);\n    OBJECT.writeField(\"gcInfo\", 0, buffer, 0);\n    OBJECT.writeField(\"gcInfo2\", 0, buffer, 0);\n    OBJECT.writeField(\"rtId\", this.id, buffer, 0);\n    OBJECT.writeField(\"rtSize\", payloadSize, buffer, 0);\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.totalOverhead): i32 {\n    var member = this.getMember(name);\n    if (member !== null && member.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>member;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is pointerfree. Useful to know for the GC. */\n  get isPointerfree(): bool {\n    var program = this.program;\n\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n\n      // Check that there are no managed instance fields\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isManaged) return false;\n        }\n      }\n\n      // Check that this isn't a managed collection\n      if (instanceMembers.has(CommonNames.visit)) {\n        let prototype = this.prototype;\n        if (\n          prototype == program.arrayPrototype ||\n          prototype == program.staticArrayPrototype ||\n          prototype == program.setPrototype ||\n          prototype == program.mapPrototype\n        ) {\n          // Note that we cannot know for sure anymore as soon as the collection\n          // is extended, because user code may implement a custom visitor.\n          let typeArguments = assert(this.getTypeArgumentsTo(prototype));\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (typeArguments[i].isManaged) return false;\n          }\n          return true;\n        }\n        return false; // has a custom __visit\n      }\n    }\n    return true;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n  /** Whether a new overload has been discovered. */\n  discoveredOverload: bool = false;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.nonnull) return this.resolveBuiltinNotNullableType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // update\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNode.range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNode.range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNotNullableType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    const typeArgumentNode = this.ensureOneTypeArgument(node, reportMode);\n    if (!typeArgumentNode) return null;\n    var typeArgument = this.resolveType(typeArgumentNode, ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    if (!typeArgument.isNullableReference) return typeArgument;\n    return typeArgument.nonNullableType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text, true);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.getMember(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. Updated in place with the new set of contextual types. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    var oldCtxTypes = uniqueMap<string,Type>(ctxTypes);\n    ctxTypes.clear();\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            oldCtxTypes, // update\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            uniqueMap<string,Type>(ctxTypes), // don't update\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let typeParameterNode = typeParameterNodes[i];\n        let name = typeParameterNode.name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n          let defaultType = typeParameterNode.defaultType;\n          if (defaultType) {\n            let resolvedDefaultType = this.resolveType(defaultType, ctxFlow.actualFunction, contextualTypeArguments, reportMode);\n            if (!resolvedDefaultType) return null;\n            resolvedTypeArguments[i] = resolvedDefaultType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    var outerFlow = ctxFlow.outer;\n    if (outerFlow) {\n      if (element = outerFlow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return ctxType; // TODO: nullable?\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let ownMember = target.getMember(propertyName);\n          if (!ownMember) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let member = target.getMember(propertyName);\n          if (member) {\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let member = target.getMember(propertyName);\n        if (member) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      case Token.DOT_DOT_DOT: {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            node.range, \"Spread operator\"\n          );\n        }\n        return null;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING:\n      case LiteralKind.TEMPLATE: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n                node.range, \"T\"\n              );\n            }\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n      case LiteralKind.OBJECT: {\n        if (ctxType.isClass) return ctxType.classReference;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            node.range\n          );\n        }\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // remember discovered overloads for virtual stub finalization\n    if (classInstance) {\n      let methodOrPropertyName = instance.declaration.name.text;\n      let baseClass = classInstance.base;\n      while (baseClass) {\n        let baseMembers = baseClass.members;\n        if (baseMembers && baseMembers.has(methodOrPropertyName)) {\n          this.discoveredOverload = true;\n          break;\n        }\n        baseClass = baseClass.base;\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves reachable overloads of the given instance method. */\n  resolveOverloads(instance: Function): Function[] | null {\n    var overloadPrototypes = instance.prototype.overloads;\n    if (!overloadPrototypes) return null;\n\n    var parentClassInstance = assert(instance.getClassOrInterface());\n    var overloads = new Set<Function>();\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (!classInstances) continue;\n      for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n        let classInstance = _values[j];\n        // Check if the parent class is a subtype of instance's class\n        if (!classInstance.isAssignableTo(parentClassInstance)) continue;\n        let overloadInstance: Function | null;\n        if (isProperty) {\n          let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n          assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n          let boundPropertyInstance = this.resolveProperty(<PropertyPrototype>boundProperty);\n          if (!boundPropertyInstance) continue;\n          if (instance.is(CommonFlags.GET)) {\n            overloadInstance = boundPropertyInstance.getterInstance;\n          } else {\n            assert(instance.is(CommonFlags.SET));\n            overloadInstance = boundPropertyInstance.setterInstance;\n          }\n        } else {\n          let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n          assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          overloadInstance = this.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n        }\n        if (overloadInstance) overloads.add(overloadInstance);\n      }\n    }\n    return Set_values(overloads);\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.getMember(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      if (overloadPrototype.is(CommonFlags.GENERIC)) {\n        // Already errored during initialization: AS212: Decorator '@operator' is not valid here\n        continue;\n      }\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes, // update\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n\n  private ensureOneTypeArgument(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): TypeNode | null {\n    var typeArgumentNodes = node.typeArguments;\n    let numTypeArguments = 0;\n    if (!typeArgumentNodes || (numTypeArguments = typeArgumentNodes.length) != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    return typeArgumentNodes[0];\n  }\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n  TEMPLATELITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE: {\n          this.pos = pos;\n          return Token.STRINGLITERAL;\n        }\n        case CharCode.BACKTICK: {\n          this.pos = pos;\n          return Token.TEMPLATELITERAL;\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            let posBefore = pos;\n            while (\n              ++pos < end &&\n              isIdentifierPart(c = text.charCodeAt(pos))\n            ) { /* nop */ }\n            if (identifierHandling != IdentifierHandling.ALWAYS) {\n              let maybeKeywordToken = tokenFromKeyword(text.substring(posBefore, pos));\n              if (\n                maybeKeywordToken !== Token.INVALID &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(maybeKeywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return maybeKeywordToken;\n              }\n            }\n            this.pos = posBefore;\n            return Token.IDENTIFIER;\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readingTemplateString: bool = false;\n  readStringStart: i32 = 0;\n  readStringEnd: i32 = 0;\n\n  readString(quote: i32 = 0, isTaggedTemplate: bool = false): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    if (!quote) quote = text.charCodeAt(pos++);\n    var start = pos;\n    this.readStringStart = start;\n    var result = \"\";\n\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        this.readStringEnd = end;\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        this.readStringEnd = pos;\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence(isTaggedTemplate);\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (quote == CharCode.BACKTICK) {\n        if (c == CharCode.DOLLAR && pos + 1 < end && text.charCodeAt(pos + 1) == CharCode.OPENBRACE) {\n          result += text.substring(start, pos);\n          this.readStringEnd = pos;\n          this.pos = pos + 2;\n          this.readingTemplateString = true;\n          return result;\n        }\n      } else if (isLineBreak(c)) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        this.readStringEnd = pos;\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    this.readingTemplateString = false;\n    return result;\n  }\n\n  readEscapeSequence(isTaggedTemplate: bool = false): string {\n    // for context on isTaggedTemplate, see: https://tc39.es/proposal-template-literal-revision/\n    var start = this.pos;\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: {\n        if (isTaggedTemplate && this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n          return text.substring(start, this.pos);\n        }\n        return \"\\0\";\n      }\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(isTaggedTemplate ? start : -1); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(isTaggedTemplate ? start : -1); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(2, isTaggedTemplate ? start : - 1); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2, startIfTaggedTemplate: i32 = -1): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else if (~startIfTaggedTemplate) {\n        this.pos = --pos;\n        return text.substring(startIfTaggedTemplate, pos);\n      } else {\n        this.pos = pos;\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) { // invalid\n      this.pos = pos;\n      if (~startIfTaggedTemplate) {\n        return text.substring(startIfTaggedTemplate, pos);\n      }\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  checkForIdentifierStartAfterNumericLiteral(): void {\n    // TODO: BigInt n\n    var pos = this.pos;\n    if (pos < this.end && isIdentifierStart(this.source.text.charCodeAt(pos))) {\n      this.error(\n        DiagnosticCode.An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal,\n        this.range(pos)\n      );\n    }\n  }\n\n  readUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    return this.readHexadecimalEscape(4, startIfTaggedTemplate);\n  }\n\n  private readExtendedUnicodeEscape(startIfTaggedTemplate: i32 = -1): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unexpected_end_of_text,\n          this.range(start, end)\n        );\n      }\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      if (startIfTaggedTemplate == -1) {\n        this.error(\n          DiagnosticCode.Unterminated_Unicode_escape_sequence,\n          this.range(start, this.pos)\n        );\n      }\n      invalid = true;\n    }\n\n    if (invalid) {\n      return ~startIfTaggedTemplate\n        ? text.substring(startIfTaggedTemplate, this.pos)\n        : \"\";\n    }\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  TypeRef,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Function reference. */\n  FUNCREF,\n  /** External reference. */\n  EXTERNREF,\n  /** Any reference. */\n  ANYREF,\n  /** Equatable reference. */\n  EQREF,\n  /** 31-bit integer reference. */\n  I31REF,\n  /** Data reference. */\n  DATAREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    if (this.isExternalReference) {\n      return this; // TODO\n    }\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.isExternalReference && (this.kind == target.kind || (target.kind == TypeKind.ANYREF && this.kind != TypeKind.EXTERNREF))) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      } else {\n        let signatureReference = this.getSignature();\n        if (signatureReference) {\n          return this.isNullableReference\n            ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n            : signatureReference.toString(validWat);\n        }\n      }\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.FUNCREF: return \"funcref\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      case TypeKind.ANYREF: return \"anyref\";\n      case TypeKind.EQREF: return \"eqref\";\n      case TypeKind.I31REF: return \"i31ref\";\n      case TypeKind.DATAREF: return \"dataref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective type reference. */\n  toRef(): TypeRef {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return TypeRef.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return TypeRef.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return TypeRef.I64;\n      case TypeKind.F32: return TypeRef.F32;\n      case TypeKind.F64: return TypeRef.F64;\n      case TypeKind.V128: return TypeRef.V128;\n      // TODO: nullable/non-nullable refs have different type refs\n      case TypeKind.FUNCREF: return TypeRef.Funcref;\n      case TypeKind.EXTERNREF: return TypeRef.Externref;\n      case TypeKind.ANYREF: return TypeRef.Anyref;\n      case TypeKind.EQREF: return TypeRef.Eqref;\n      case TypeKind.I31REF: return TypeRef.I31ref;\n      case TypeKind.DATAREF: return TypeRef.Dataref;\n      case TypeKind.VOID: return TypeRef.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Function reference. */\n  static readonly funcref: Type = new Type(TypeKind.FUNCREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** External reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Any reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Equatable reference. */\n  static readonly eqref: Type = new Type(TypeKind.EQREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** 31-bit integer reference. */\n  static readonly i31ref: Type = new Type(TypeKind.I31REF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** Data reference. */\n  static readonly dataref: Type = new Type(TypeKind.DATAREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.NULLABLE   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of type references. */\nexport function typesToRefs(types: Type[]): TypeRef[] {\n  var numTypes = types.length;\n  var ret = new Array<TypeRef>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toRef();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get paramRefs(): TypeRef {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return TypeRef.None;\n      return thisType.toRef();\n    }\n    if (thisType) {\n      let typeRefs = new Array<TypeRef>(1 + numParameterTypes);\n      typeRefs[0] = thisType.toRef();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        typeRefs[i + 1] = parameterTypes[i].toRef();\n      }\n      return createType(typeRefs);\n    }\n    return createType(typesToRefs(parameterTypes));\n  }\n\n  get resultRefs(): TypeRef {\n    return this.returnType.toRef();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Tests if this signature has at least one managed operand. */\n  get hasManagedOperands(): bool {\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) return true;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) return true;\n    }\n    return false;\n  }\n\n  /** Gets the indices of all managed operands. */\n  getManagedOperandIndices(): i32[] {\n    var indices = new Array<i32>();\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (thisType.isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    var parameterTypes = this.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (parameterTypes[i].isManaged) {\n        indices.push(index);\n      }\n      ++index;\n    }\n    return indices;\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return i32(buffer[offset    ])\n       | i32(buffer[offset + 1]) << 8\n       | i32(buffer[offset + 2]) << 16\n       | i32(buffer[offset + 3]) << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./terminal\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Terminal utility.\n * @license Apache-2.0\n */\n\n/** Gray terminal color code. */\nexport const COLOR_GRAY = \"\\u001b[90m\";\n/** Red terminal color code. */\nexport const COLOR_RED = \"\\u001b[91m\";\n/** Green terminal color code. */\nexport const COLOR_GREEN = \"\\u001b[92m\";\n/** Yellow terminal color code. */\nexport const COLOR_YELLOW = \"\\u001b[93m\";\n/** Blue terminal color code. */\nexport const COLOR_BLUE = \"\\u001b[94m\";\n/** Magenta terminal color code. */\nexport const COLOR_MAGENTA = \"\\u001b[95m\";\n/** Cyan terminal color code. */\nexport const COLOR_CYAN = \"\\u001b[96m\";\n/** White terminal color code. */\nexport const COLOR_WHITE = \"\\u001b[97m\";\n/** Terminal color reset code. */\nexport const COLOR_RESET = \"\\u001b[0m\";\n\n/** Whether terminal colors are enabled or not. */\nvar colorsEnabled = true;\n\n/** Checks whether terminal colors are enabled or not. */\nexport function isColorsEnabled(): bool {\n  return colorsEnabled;\n}\n\n/** Sets whether terminal colors are enabled or not. */\nexport function setColorsEnabled(isEnabled: bool): bool {\n  var wasEnabled = isEnabled;\n  colorsEnabled = isEnabled;\n  return wasEnabled;\n}\n\n/** Wraps the specified text in the specified terminal color code. */\nexport function colorize(text: string, color: string): string {\n  return colorsEnabled ? color + text + COLOR_RESET : text;\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid hexadecimal digit. */\nexport function isHexDigit(c: i32): bool {\n  return isDecimalDigit(c) || ((c | 32) >= CharCode.a && (c | 32) <= CharCode.f);\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  let c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9, // see: https://github.com/WebAssembly/multi-value\n  /** Garbage collection. */\n  GC = 1 << 10, // see: https://github.com/WebAssembly/gc\n  /** Memory64. */\n  MEMORY64 = 1 << 11 // see: https://github.com/WebAssembly/memory64\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n    case Feature.GC: return \"gc\";\n    case Feature.MEMORY64: return \"memory64\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type has no outgoing pointers. */\n  POINTERFREE = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__725__;","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText(watFormat = true) {\n  if (watFormat) {\n    // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n    // of unreachable statements not actually emitted by the compiler. Optimizing\n    // StackIR removes these again, but may also suppress useless code emitted by\n    // the compiler that's then no longer visible in tests. Both not ideal.\n    return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n  } else {\n    return binaryen.wrapModule(this.ref).emitText();\n  }\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @fileoverview Floating point glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\nif (typeof globalScope.ASC_TARGET === \"undefined\") {\n\n  globalScope.ASC_TARGET = 0; // Target.JS\n  globalScope.ASC_NO_ASSERT = false;\n  globalScope.ASC_MEMORY_BASE = 0;\n  globalScope.ASC_OPTIMIZE_LEVEL = 3;\n  globalScope.ASC_SHRINK_LEVEL = 0;\n  globalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\n  globalScope.ASC_FEATURE_SIGN_EXTENSION = false;\n  globalScope.ASC_FEATURE_BULK_MEMORY = false;\n  globalScope.ASC_FEATURE_SIMD = false;\n  globalScope.ASC_FEATURE_THREADS = false;\n\n  var F64 = new Float64Array(1);\n  var U64 = new Uint32Array(F64.buffer);\n\n  Object.defineProperties(\n    globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n    {\n      \"MIN_VALUE\": { value: -128, writable: false },\n      \"MAX_VALUE\": { value:  127, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n    {\n      \"MIN_VALUE\": { value: -32768, writable: false },\n      \"MAX_VALUE\": { value:  32767, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n    {\n      \"MIN_VALUE\": { value: -2147483648, writable: false },\n      \"MAX_VALUE\": { value:  2147483647, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n    {\n      \"MIN_VALUE\": { value:   0, writable: false },\n      \"MAX_VALUE\": { value: 255, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n    {\n      \"MIN_VALUE\": { value:     0, writable: false },\n      \"MAX_VALUE\": { value: 65535, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n    {\n      \"MIN_VALUE\": { value:          0, writable: false },\n      \"MAX_VALUE\": { value: 4294967295, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"bool\"] = function bool(value) { return !!value; },\n    {\n      \"MIN_VALUE\": { value: false, writable: false },\n      \"MAX_VALUE\": { value: true,  writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n    {\n      \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n      \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n      \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n      \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n      \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n      \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n      \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n      \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n      \"NaN\": { value: NaN, writable: false }\n    }\n  );\n\n  Object.defineProperties(\n    globalScope[\"f64\"] = function f64(value) { return +value; },\n    {\n      \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n      \"MIN_VALUE\": { value:                  5e-324, writable: false },\n      \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n      \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n      \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n      \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n      \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n      \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n      \"NaN\": { value: NaN, writable: false }\n    }\n  );\n\n  globalScope[\"clz\"] = Math.clz32;\n\n  globalScope[\"ctz\"] = function ctz(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  };\n\n  globalScope[\"popcnt\"] = function popcnt(value) {\n    value -= value >>> 1 & 0x55555555;\n    value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n    return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n  };\n\n  globalScope[\"rotl\"] = function rotl(value, shift) {\n    shift &= 31;\n    return (value << shift) | (value >>> (32 - shift));\n  };\n\n  globalScope[\"rotr\"] = function rotr(value, shift) {\n    shift &= 31;\n    return (value >>> shift) | (value << (32 - shift));\n  };\n\n  globalScope[\"abs\"] = Math.abs;\n\n  globalScope[\"max\"] = Math.max;\n\n  globalScope[\"min\"] = Math.min;\n\n  globalScope[\"ceil\"] = Math.ceil;\n\n  globalScope[\"floor\"] = Math.floor;\n\n  // Adopt code from https://github.com/rfk/wasm-polyfill\n  globalScope[\"nearest\"] = function nearest(value) {\n    if (Math.abs(value - Math.trunc(value)) === 0.5) {\n      return 2.0 * Math.round(value * 0.5);\n    }\n    return Math.round(value);\n  };\n\n  globalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n    return condition ? ifTrue : ifFalse;\n  };\n\n  globalScope[\"sqrt\"] = Math.sqrt;\n\n  globalScope[\"trunc\"] = Math.trunc;\n\n  globalScope[\"copysign\"] = function copysign(x, y) {\n    return Math.abs(x) * Math.sign(y);\n  };\n\n  globalScope[\"bswap\"] = function bswap(value) {\n    var a = value >> 8 & 0x00FF00FF;\n    var b = (value & 0x00FF00FF) << 8;\n    value = a | b;\n    a = value >> 16 & 0x0000FFFF;\n    b = (value & 0x0000FFFF) << 16;\n    return a | b;\n  };\n\n  globalScope[\"bswap16\"] = function bswap16(value) {\n    return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n  };\n\n  function UnreachableError() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, UnreachableError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  UnreachableError.prototype = Object.create(Error.prototype);\n  UnreachableError.prototype.name = \"UnreachableError\";\n  UnreachableError.prototype.message = \"unreachable\";\n\n  globalScope[\"unreachable\"] = function unreachable() {\n    throw new UnreachableError();\n  };\n\n  function AssertionError(message) {\n    this.message = message || \"assertion failed\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AssertionError);\n    } else {\n      this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n    }\n  }\n  AssertionError.prototype = Object.create(Error.prototype);\n  AssertionError.prototype.name = \"AssertionError\";\n\n  globalScope[\"assert\"] = function assert(isTrueish, message) {\n    if (isTrueish) return isTrueish;\n    throw new AssertionError(message);\n  };\n\n  globalScope[\"changetype\"] = function changetype(value) {\n    return value;\n  };\n\n  String[\"fromCharCodes\"] = function fromCharCodes(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCharCode.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCharCode.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  String[\"fromCodePoints\"] = function fromCodePoints(arr) {\n    const CHUNKSIZE = 1 << 13;\n    const len = arr.length;\n    if (len <= CHUNKSIZE) {\n      return String.fromCodePoint.apply(String, arr);\n    }\n    let index = 0;\n    let parts = '';\n    while (index < len) {\n      parts += String.fromCodePoint.apply(\n        String,\n        arr.slice(index, Math.min(index + CHUNKSIZE, len))\n      );\n      index += CHUNKSIZE;\n    }\n    return parts;\n  };\n\n  if (!String.prototype.at) {\n    Object.defineProperty(String.prototype, \"at\", {\n      value: function at(index) {\n        return this.charAt(index >= 0 ? index : index + this.length);\n      },\n      configurable: true\n    });\n  }\n\n  if (!String.prototype.replaceAll) {\n    Object.defineProperty(String.prototype, \"replaceAll\", {\n      value: function replaceAll(search, replacment) {\n        var res = this.split(search).join(replacment);\n        if (!search.length) res = replacment + res + replacment;\n        return res;\n      },\n      configurable: true\n    });\n  }\n\n  function defaultComparator(a, b) {\n    if (a === b) {\n      if (a !== 0) return 0;\n      a = 1 / a, b = 1 / b;\n    } else {\n      var nanA = a != a, nanB = b != b;\n      if (nanA | nanB) return nanA - nanB;\n      if (a == null) a = String(a);\n      if (b == null) b = String(b);\n    }\n    return a > b ? 1 : -1;\n  }\n\n  const arraySort = Array.prototype.sort;\n  Array.prototype.sort = function sort(comparator) {\n    return arraySort.call(this, comparator || defaultComparator);\n  };\n\n  [ Array,\n    Uint8ClampedArray,\n    Uint8Array, Int8Array,\n    Uint16Array, Int16Array,\n    Uint32Array, Int32Array,\n    Float32Array, Float64Array\n  ].forEach(Ctr => {\n    if (!Ctr.prototype.at) {\n      Object.defineProperty(Ctr.prototype, \"at\", {\n        value: function at(index) {\n          return this[index >= 0 ? index : index + this.length];\n        },\n        configurable: true\n      });\n    }\n\n    if (!Ctr.prototype.findLastIndex) {\n      Object.defineProperty(Ctr.prototype, \"findLastIndex\", {\n        value: function findLastIndex(fn) {\n          for (let i = this.length - 1; i >= 0; --i) {\n            if (fn(this[i], i, this)) return i;\n          }\n          return -1;\n        },\n        configurable: true\n      });\n    }\n  });\n\n  globalScope[\"isInteger\"] = Number.isInteger;\n\n  globalScope[\"isFloat\"] = function isFloat(arg) {\n    return typeof arg === \"number\";\n  };\n\n  globalScope[\"isNullable\"] = function isNullable(arg) {\n    return true;\n  };\n\n  globalScope[\"isReference\"] = function isReference(arg) {\n    return typeof arg === \"object\" || typeof arg === \"string\";\n  };\n\n  globalScope[\"isFunction\"] = function isFunction(arg) {\n    return typeof arg === \"function\";\n  };\n\n  globalScope[\"isString\"] = function isString(arg) {\n    return typeof arg === \"string\" || arg instanceof String;\n  };\n\n  globalScope[\"isArray\"] = Array.isArray;\n  globalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n    return expr\n      && typeof expr === 'object'\n      && typeof expr.length === 'number'\n      && expr.length >= 0\n      && Math.trunc(expr.length) === expr.length;\n  };\n\n  globalScope[\"isDefined\"] = function isDefined(expr) {\n    return typeof expr !== \"undefined\";\n  };\n\n  globalScope[\"isConstant\"] = function isConstant(expr) {\n    return false;\n  };\n\n  globalScope[\"unchecked\"] = function unchecked(expr) {\n    return expr;\n  };\n\n  globalScope[\"fmod\"] = function fmod(x, y) {\n    return x % y;\n  };\n\n  globalScope[\"fmodf\"] = function fmodf(x, y) {\n    return Math.fround(x % y);\n  };\n\n  globalScope[\"JSMath\"] = Math;\n\n  Object.defineProperties(globalScope[\"JSMath\"], {\n    sincos_sin: { value: 0.0, writable: true },\n    sincos_cos: { value: 0.0, writable: true },\n    signbit: {\n      value: function signbit(x) {\n        F64[0] = x; return Boolean(U64[1] >>> 31);\n      }\n    },\n    sincos: {\n      value: function sincos(x) {\n        this.sincos_sin = Math.sin(x);\n        this.sincos_cos = Math.cos(x);\n      }\n    },\n    exp2: {\n      value: function exp2(x) {\n        return Math.pow(2, x);\n      }\n    }\n  });\n\n  globalScope[\"unmanaged\"] = function() { /* nop */ };\n\n  globalScope[\"trace\"] = function(message, n) {\n    if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n    console.error(\"trace: \" + message);\n  };\n\n  Object.defineProperty(Int8Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int8Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint8Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint8Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint8ClampedArray, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint8ClampedArray(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Int16Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int16Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint16Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint16Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Int32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Int32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Uint32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Uint32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Float32Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Float32Array(buffer, byteOffset, length);\n    }\n  });\n\n  Object.defineProperty(Float64Array, \"wrap\", {\n    value: function wrap(buffer, byteOffset, length) {\n      return new Float64Array(buffer, byteOffset, length);\n    }\n  });\n} else {\n  console.warn(\"compiler mismatch: std/portable included twice\");\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n__webpack_require__(308);\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(780);\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__725__","Long","wasm","WebAssembly","Instance","Module","Uint8Array","e","low","high","unsigned","isLong","obj","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","result","i","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","constructor","kind","range","static","name","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","text","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","property","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","tag","parts","rawParts","TemplateLiteralExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","expr","CompiledExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","isLiteralKind","literalKind","LITERAL","changetype","isNumericLiteral","FLOAT","INTEGER","compilesToConst","STRING","NULL","TRUE","FALSE","isAccessOn","node","CALL","PROPERTYACCESS","isAccessOnThis","THIS","isAccessOnSuper","SUPER","TypeNode","super","hasGenericComponent","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","k","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","assert","TYPENAME","hasTypeArguments","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","CommonFlags","NONE","is","flag","isAny","set","nameNode","IDENTIFIER","nameStr","charCodeAt","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","typeArgumentsRange","numTypeArguments","Range","join","argumentsRange","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","TEMPLATE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","COMPILED","Statement","sourceKind","normalizedPath","SOURCE","Array","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","PATH_DELIMITER","simplePath","source","isNative","LIBRARY_SUBST","isLibrary","LIBRARY","LIBRARY_ENTRY","lineAt","off","end","push","l","r","m","s","unchecked","columnAt","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","isGeneric","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","LIBRARY_PREFIX","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","len","cur","isTrivialAlphanum","decorator","BuiltinNames","start","started","argumentsLength","setArgumentsLength","abort","trace","seed","isInteger","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","clz","ctz","popcnt","rotl","rotr","abs","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","call_indirect","instantiate","idof","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_add","i64_add","f32_add","f64_add","i32_sub","i64_sub","f32_sub","f64_sub","i32_mul","i64_mul","f32_mul","f64_mul","i32_div_s","i32_div_u","i64_div_s","i64_div_u","f32_div","f64_div","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load_zero","v128_load_lane","v128_store_lane","v128_load","v128_load8x8_s","v128_load8x8_u","v128_load16x4_s","v128_load16x4_u","v128_load32x2_s","v128_load32x2_u","v128_load8_splat","v128_load16_splat","v128_load32_splat","v128_load64_splat","v128_load32_zero","v128_load64_zero","v128_load8_lane","v128_load16_lane","v128_load32_lane","v128_load64_lane","v128_store8_lane","v128_store16_lane","v128_store32_lane","v128_store64_lane","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_sat","v128_sub_sat","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_popcnt","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_convert_low","v128_trunc_sat","v128_trunc_sat_zero","v128_narrow","v128_extend_low","v128_extend_high","v128_extadd_pairwise","v128_demote_zero","v128_promote_low","v128_q15mulr_sat","v128_extmul_low","v128_extmul_high","i8x16","i16x8","i32x4","i64x2","f32x4","f64x2","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_sat_s","i8x16_add_sat_u","i8x16_sub_sat_s","i8x16_sub_sat_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_all_true","i8x16_bitmask","i8x16_popcnt","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i8x16_shuffle","i8x16_swizzle","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_sat_s","i16x8_add_sat_u","i16x8_sub_sat_s","i16x8_sub_sat_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_extend_low_i8x16_s","i16x8_extend_low_i8x16_u","i16x8_extend_high_i8x16_s","i16x8_extend_high_i8x16_u","i16x8_extadd_pairwise_i8x16_s","i16x8_extadd_pairwise_i8x16_u","i16x8_q15mulr_sat_s","i16x8_extmul_low_i8x16_s","i16x8_extmul_low_i8x16_u","i16x8_extmul_high_i8x16_s","i16x8_extmul_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_trunc_sat_f64x2_s_zero","i32x4_trunc_sat_f64x2_u_zero","i32x4_extend_low_i16x8_s","i32x4_extend_low_i16x8_u","i32x4_extend_high_i16x8_s","i32x4_extend_high_i16x8_u","i32x4_extadd_pairwise_i16x8_s","i32x4_extadd_pairwise_i16x8_u","i32x4_extmul_low_i16x8_s","i32x4_extmul_low_i16x8_u","i32x4_extmul_high_i16x8_s","i32x4_extmul_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_mul","i64x2_abs","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_all_true","i64x2_bitmask","i64x2_eq","i64x2_ne","i64x2_lt_s","i64x2_lt_u","i64x2_le_s","i64x2_le_u","i64x2_gt_s","i64x2_gt_u","i64x2_ge_s","i64x2_ge_u","i64x2_extend_low_i32x4_s","i64x2_extend_low_i32x4_u","i64x2_extend_high_i32x4_s","i64x2_extend_high_i32x4_u","i64x2_extmul_low_i32x4_s","i64x2_extmul_low_i32x4_u","i64x2_extmul_high_i32x4_s","i64x2_extmul_high_i32x4_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_demote_f64x2_zero","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_low_i32x4_s","f64x2_convert_low_i32x4_u","f64x2_promote_low_f32x4","i31_new","i31_get","data_end","stack_pointer","heap_base","rtti_base","visit_globals","visit_members","tostack","isFinite","ERROR","WARNING","INFO","Function","memory_size","memory_grow","memory_copy","memory_fill","memory_data","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Int64Array","Uint64Array","Float32Array","Float64Array","String_raw","wasiAbort","wasiTrace","wasiSeed","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","arg0","compileExpression","operands","Type","currentType","isValue","unary","UnaryOp","ClzI32","options","isWasm64","ClzI64","error","DiagnosticCode","Operation_0_cannot_be_applied_to_type_1","reportNode","builtin_ctz","CtzI32","CtzI64","builtin_popcnt","PopcntI32","PopcntI64","builtin_rotl","arg1","flow","currentFlow","temp1","getTempLocal","findUsedLocals","setLocalFlag","index","LocalFlags","WRAPPED","temp2","ret","binary","BinaryOp","OrI32","ShlI32","local_tee","AndI32","ShrU32","local_get","TypeRef","I32","SubI32","freeTempLocal","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","auto","XorI32","AddI32","ShrI32","usizeType","XorI64","AddI64","ShrI64","sizeTypeRef","I64","AbsF32","AbsF64","builtin_max","op","GtI32","GtU32","GtI64","GtU64","MaxF32","MaxF64","typeRef","toRef","builtin_min","LtI32","LtU32","LtI64","LtU64","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32ToI32","ReinterpretF64ToI64","ReinterpretI32ToF32","ReinterpretI64ToF64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","isIntegerValue","numOperands","immOffset","immAlign","byteSize","evaluateImmediateOffset","evaluateImmediateAlign","isSignedIntegerValue","builtin_store","void","contextIsExact","inType","convertExpression","builtin_add","isNumericValue","makeAdd","builtin_sub","makeSub","builtin_mul","makeMul","builtin_div","makeDiv","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","AtomicRMWOp","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","arg2","builtin_atomic_wait","builtin_diagnostic","category","checkTypeAbsent","emitDiagnostic","User_defined_0","DiagnosticCategory","nop","builtin_conversion","builtin_i8x16","precomp","runExpression","ExpressionRunnerFlags","PreserveSideeffects","writeI8","getConstValueI32","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","idx","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","SIMDExtractOp","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","SIMDReplaceOp","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","isPowerOf2","mask","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleI8x16","builtin_v128_load_splat","simd_load","SIMDLoadOp","Load8Splat","Load16Splat","Load32Splat","Load64Splat","builtin_v128_load_ext","Load8x8S","Load8x8U","Load16x4S","Load16x4U","Load32x2S","Load32x2U","builtin_v128_load_zero","Load32Zero","Load64Zero","builtin_v128_load_lane","simd_loadstorelane","SIMDLoadStoreLaneOp","Load8Lane","Load16Lane","Load32Lane","Load64Lane","builtin_v128_store_lane","Store8Lane","Store16Lane","Store32Lane","Store64Lane","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI16x8","MulI32x4","MulI64x2","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_sat","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_sat","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqI64x2","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeI64x2","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtI64x2","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeI64x2","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtI64x2","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeI64x2","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsI64x2","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","builtin_v128_convert_low","ConvertLowI32x4ToF64x2","ConvertLowU32x4ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","builtin_v128_trunc_sat_zero","TruncSatF64x2ToI32x4Zero","TruncSatF64x2ToU32x4Zero","builtin_v128_extend_low","ExtendLowI8x16ToI16x8","ExtendLowU8x16ToU16x8","ExtendLowI16x8ToI32x4","ExtendLowU16x8ToU32x4","ExtendLowI32x4ToI64x2","ExtendLowU32x4ToU64x2","builtin_v128_extend_high","ExtendHighI8x16ToI16x8","ExtendHighU8x16ToU16x8","ExtendHighI16x8ToI32x4","ExtendHighU16x8ToU32x4","ExtendHighI32x4ToI64x2","ExtendHighU32x4ToU64x2","builtin_v128_shl","simd_shift","SIMDShiftOp","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","BitmaskI64x2","builtin_v128_popcnt","PopcntI8x16","builtin_v128_extadd_pairwise","ExtaddPairwiseI8x16ToI16x8","ExtaddPairwiseU8x16ToU16x8","ExtaddPairwiseI16x8ToI32x4","ExtaddPairwiseU16x8ToU32x4","builtin_v128_demote_zero","DemoteZeroF64x2ToF32x4","builtin_v128_promote_low","PromoteLowF32x4ToF64x2","builtin_v128_q15mulr_sat","Q15mulrSatI16x8","builtin_v128_extmul_low","ExtmulLowI16x8","ExtmulLowU16x8","ExtmulLowI32x4","ExtmulLowU32x4","ExtmulLowI64x2","ExtmulLowU64x2","builtin_v128_extmul_high","ExtmulHighI16x8","ExtmulHighU16x8","ExtmulHighI32x4","ExtmulHighU32x4","ExtmulHighI64x2","ExtmulHighU64x2","ensureVisitMembersOf","instance","visitRef","program","sizeTypeSize","visitInstance","base","call","internalName","None","hasVisitImpl","isDeclaredInLibrary","visitPrototype","getMember","ElementKind","FUNCTION_PROTOTYPE","resolver","resolveFunction","compileFunction","visitSignature","visitThisType","thisType","parameterTypes","isStrictlyAssignableTo","needsTempValue","_values","Map_values","j","member","FIELD","parent","fieldOffset","memoryOffset","if","addFunction","createType","flatten","typeToRuntimeFlags","alignLog2","evaluateConstantType","Expected_0_type_arguments_but_got_1","Expected_0_arguments_but_got_1","usize64","getConstValueI64High","getConstValueI64Low","usize32","naturalAlign","align","_0_must_be_a_power_of_two","feature","hasFeature","Feature_0_is_not_enabled","featureToString","setCurrentTypeOnError","Type_0_is_not_generic","expected","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","i64_is_i32","i64_low","i64_is_u32","i64_high","thisOperand","builtins","Map","function_builtins","isFloatValue","isBooleanValue","classReference","getClass","isAssignableTo","stringInstance","extends","arrayPrototype","isNullableReference","element","lookupExpression","ReportMode","SWALLOW","getExpressionId","ExpressionId","Const","signatureReference","Type_0_has_no_call_signatures","i64_new","getClassOrWrapper","firstOperand","String_literal_expected","fieldName","classMembers","has","get","Type_0_has_no_property_1","nextMemoryOffset","resultType","isInternalReference","getSignature","ensureStaticString","id","hasDecorator","DecoratorFlags","maybeDropCondition","LocalGet","NeF32","getLocalGetIndex","F32","temp","NeF64","F64","EqF32","SubF32","EqF64","SubF64","makeIsTrueish","compileCallDirect","offset","elementType","valuesOperand","Array_literal_expected","numElements","exprs","isStatic","makeZero","buf","writeStaticBuffer","byteLength","addAlignedMemorySegment","i31ref","fromType","isChangeableTo","Type_0_cannot_be_changed_to_type_1","nonNullableType","noAssert","evaled","Default","getExpressionType","getConstValueF32","getConstValueF64","makeAbort","EqzI32","EqzI64","ref_is","RefIsOp","RefIsNull","alreadyUnchecked","unset","indexArg","operandExprs","paramTypeRefs","classInstance","This_expression_is_not_constructable","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","functionPrototype","ftype","requiredParameters","functionArg","shift","thisArg","_this_cannot_be_referenced_in_current_location","compileCallIndirect","Not_implemented_0","isizeType","writeI16","writeI32","writeF32","writeF64","AndV128","OrV128","XorV128","AndnotV128","builtin_v128_bitwise_unary","NotV128","simd_ternary","builtin_v128_bitwise_ternary","SIMDTernaryOp","Bitselect","AnyTrueV128","runtimeFeatures","elementsByName","global","INLINED","constantIntegerValue","global_get","block","managedClasses","nextId","_keys","Map_keys","instanceId","isPointerfree","return","current","switch","SubI64","count","data","abvInstance","arrayBufferViewInstance","abvPrototype","setPrototype","mapPrototype","staticArrayPrototype","lastId","getArrayValueType","getTypeArgumentsTo","rttiFlags","segment","addGlobal","instanceofInstance","stmts","instances","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","funcref","externref","anyref","eqref","dataref","u8x16","u16x8","u32x4","u64x2","void_","number","boolean","string","native","indexof","valueof","returnof","nonnull","null_","true_","false_","this_","super_","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_EXPORT_RUNTIME","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","ASC_FEATURE_GC","ASC_FEATURE_MEMORY64","ASC_VERSION_MAJOR","ASC_VERSION_MINOR","ASC_VERSION_PATCH","I8","I16","Isize","U8","U16","U32","U64","Usize","Bool","V128","Funcref","Externref","Anyref","Eqref","I31ref","Dataref","String","StaticArray","Set","ArrayBufferView","ArrayBuffer","Mathf","NativeMath","NativeMathf","TemplateStringsArray","ipow32","ipow64","alloc","realloc","free","new_","renew","link","collect","typeinfo","instanceof_","visit","newBuffer","newArray","Feature","Target","Typeinfo","TypeinfoFlags","ExportNames","target","WASM32","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","zeroFilledMemory","importTable","exportTable","sourceMap","explicitStart","memoryBase","tableBase","globalAliases","features","noUnsafe","pedantic","lowMemoryLimit","exportRuntime","stackSize","bundleMajorVersion","bundleMinorVersion","bundlePatchVersion","optimizeLevelHint","shrinkLevelHint","WASM64","isize64","isize32","willOptimize","Constraints","RuntimeFeatures","memory","table","runtimeFunctions","runtimeGlobals","Compiler","DiagnosticEmitter","diagnostics","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualStubs","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","_reusableCallExpression","create","setLowMemoryUnused","featureFlags","FeatureFlags","SignExt","MutableGloabls","TruncSat","BulkMemory","SIMD","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","GC","Memory64","setFeatures","startFunctionInstance","makeNativeFunction","Signature","currentBody","shadowStack","ShadowStackPass","compile","hasShadowStack","initialize","actualFunction","startFunctionBody","files","filesByName","file","USER_ENTRY","compileFile","compileExports","ensureModuleExports","requireFunction","hasExport","addFunctionExport","requireGlobal","compileGlobal","addGlobalExport","functionsToCompile","Set_values","clear","compileClassInstanceOf","VIRTUAL","INSTANCE","ensureVirtualStub","ensureVarargsStub","virtualStubsSeen","discoveredOverload","overloadInstances","resolveOverloads","finalizeVirtualStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","UNLIMITED_MEMORY","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","addTableImport","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","functionTableNames","addFunctionTable","UNLIMITED_TABLE","global_set","ensureArgumentsLength","startIsEmpty","isWasi","unshift","funcRef","paramRefs","resultRefs","typesToRefs","additionalLocals","finalize","setStart","walkModule","lookup","RtraceMemory","elementName","ensureModuleExport","exportsStar","prefix","functionInstances","instanceName","GENERIC","fullName","Exported_generic_function_or_class_has_no_concrete_instances","identifierNode","CLASS_PROTOTYPE","classPrototype","classInstances","PROPERTY_PROTOTYPE","propertyInstance","CONST","STATIC","READONLY","exportName","Cannot_export_a_mutable_global","ENUMVALUE","enumValue","isImmutable","functionInstance","hasManagedOperands","noteExport","getManagedOperandIndices","PROPERTY","getterInstance","setterInstance","fieldInstance","getterExportName","compileFieldGetter","internalGetterName","internalGetterSignature","setterExportName","compileFieldSetter","internalSetterName","internalSetterSignature","isUnmanaged","ENUM","INTERFACE_PROTOTYPE","NAMESPACE","TYPEDEFINITION","subPrefix","implicitExport","SCOPED","memberName","PRIVATE","compileElement","compileMembers","compileEnum","resolveClass","compileClass","resolveProperty","compileProperty","exportStar","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","File_0_not_found","startFunction","startSignature","previousBody","previousFlow","compileTopLevelStatement","locals","localsByIndex","numLocals","varTypes","ERRORED","initExpr","typeNode","initializerNode","RESOLVED","resolvedType","resolveType","delete","Type_expected","setType","checkTypeSupported","atEnd","Type_0_is_not_assignable_to_type_1","AMBIENT","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","initializeInStart","GlobalGet","fromName","getGlobalGetName","isGlobalMutable","getGlobal","warning","Mutable_value_cannot_be_inlined","constantValueKind","constantFloatValue","compileInlineConstant","Decorator_0_is_not_valid_here","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","setConstantIntegerValue","MODULE_EXPORT","forceStdAlternative","numParameters","visited","paramIdentifier","paramName","Duplicate_identifier_0","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","addFunctionImport","getFunction","ABSTRACT","INTERFACE","Function_implementation_is_missing_or_not_immediately_following_the_declaration","thisLocal","lookupLocal","bodyStartIndex","compileStatements","GET","SET","canOverflow","isNonnull","allocStmts","makeConditionalAllocation","makeFieldInitializationInConstructor","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","staticMembers","instanceMembers","compileField","getterRef","valueTypeRef","thisTypeRef","setterRef","bodyExpr","linkInstance","compilePropertyGetter","compilePropertySetter","buffer","alignment","MemorySegment","addRuntimeMemorySegment","computeBlockStart64","stringValue","ptr","ensureStaticStringPtr","stringSegment","totalOverhead","segments","createBuffer","elementTypeRef","writeI64","addStaticBuffer","arrayBufferInstance","OBJECTInstance","writeField","addStaticArrayHeader","bufferSegment","arrayInstance","bufferLength","readI32","arrayLength","bufferAddress","ensureRuntimeFunction","STUB","memorySegment","rtInstance","memberStatements","getElementByDeclaration","exportStatement","importStatement","stmt","compileStatement","Nop","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","Block","getBlockName","getBlockChildCount","getBlockChildAt","needsExplicitUnreachable","outerFlow","innerFlow","fork","freeScopedLocals","inherit","labelNode","breakLabel","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","loopLabel","bodyFlow","bodyStmts","possiblyContinues","condFlow","condExpr","condKind","evaluateCondition","drop","Flow","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","tcond","loopStmts","local_set","inheritNonnullIfTrue","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritNonnullIfFalse","inheritMutual","valueExpression","constraints","inlineReturnLabel","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","message","newArgs","numDeclarations","initializers","uniqueMap","contextualTypeArguments","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","local","Local","parentFunction","setConstantFloatValue","scopedLocals","existing","errorRelated","_const_declarations_must_be_initialized","LET","existingLocal","getScopedLocal","addScopedLocal","CONSTANT","addLocal","makeLocalAssignment","isShortIntegerValue","doCompileWhileStatement","computeSmallIntegerShift","computeSmallIntegerMask","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","compiled","wrap","ensureSmallIntegerWrap","explicit","makeRuntimeNonNullCheck","isExternalReference","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32ToF64","DemoteF64ToF32","saturating","isLongIntegerValue","TruncSatF32ToI64","TruncF32ToI64","TruncSatF32ToI32","TruncF32ToI32","TruncSatF32ToU64","TruncF32ToU64","TruncSatF32ToU32","TruncF32ToU32","TruncSatF64ToI64","TruncF64ToI64","TruncSatF64ToI32","TruncF64ToI32","TruncSatF64ToU64","TruncF64ToU64","TruncSatF64ToU32","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64ToI32","ExtendI32ToI64","ExtendU32ToU64","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","PREFIX","AS","NONNULL","exceptVoid","info","Expression_is_never_null","leftExpr","leftType","rightExpr","rightType","commonType","compound","Token","LESSTHAN","overload","lookupOverload","OperatorKind","LT","compileBinaryOverload","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","makeLt","GREATERTHAN","GT","makeGt","LESSTHAN_EQUALS","LE","makeLe","GREATERTHAN_EQUALS","GE","makeGe","EQUALS_EQUALS_EQUALS","EQUALS_EQUALS","EQ","operatorTokenToString","makeEq","EXCLAMATION_EQUALS_EQUALS","EXCLAMATION_EQUALS","NE","makeNe","EQUALS","compileAssignment","PLUS_EQUALS","PLUS","ADD","The_0_operator_cannot_be_applied_to_type_1","MINUS_EQUALS","MINUS","SUB","ASTERISK_EQUALS","ASTERISK","MUL","ASTERISK_ASTERISK_EQUALS","ASTERISK_ASTERISK","POW","makePow","SLASH_EQUALS","SLASH","DIV","PERCENT_EQUALS","PERCENT","REM","makeRem","LESSTHAN_LESSTHAN_EQUALS","LESSTHAN_LESSTHAN","intType","BITWISE_SHL","makeShl","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN","BITWISE_SHR","makeShr","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","BITWISE_SHR_U","makeShru","AMPERSAND_EQUALS","AMPERSAND","BITWISE_AND","makeAnd","BAR_EQUALS","BAR","BITWISE_OR","makeOr","CARET_EQUALS","CARET","BITWISE_XOR","makeXor","AMPERSAND_AMPERSAND","rightFlow","tryCopyTrivialExpression","BAR_BAR","targetType","getTypeOfElement","makeAssignment","currentThisExpression","currentElementExpression","LtF32","LtF64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","ref_eq","NeI32","AddF32","AddF64","MulI32","MulI64","MulF32","MulF64","Cannot_find_name_0","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","ShlI64","ShrU64","AndI64","OrI64","compileUnaryOverload","operatorInstance","valueExpr","thisExpression","LOCAL","Variable_0_used_before_its_declaration","checkUnsafe","propertyPrototype","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","INDEXED_SET","INDEXED_GET","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","Indexed_access_may_involve_bounds_checking","indexExpression","tee","isLocalFlag","isConstructor","setThisFieldFlag","FieldFlags","INITIALIZED","fieldParent","makeFieldAssignment","thisExpr","returnTypeRef","tempThis","elementExpr","tempTarget","tempElement","localIndex","unsetLocalFlag","field","fieldType","fieldTypeRef","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","_super_can_only_be_referenced_in_a_derived_class","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","maybeInferCall","inlinedValue","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Expression_cannot_be_represented_by_a_type","compileCallExpressionLike","createCallExpression","resolveTypeArguments","callee","BuiltinContext","fn","methodName","checkCallSignature","hasThis","The_this_types_of_each_signature_are_incompatible","hasRest","minimum","maximum","relatedReportNode","Operation_is_unsafe","argumentExpressions","includes","makeCallInline","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","paramType","paramExpr","immediatelyDropped","createInline","usedLocals","argumentLocal","getParameterName","addScopedAlias","initType","checkFieldInitializationInFlow","original","stub","varargsStub","originalSignature","originalParameterTypes","originalParameterDeclarations","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","numNames","ofN","Optional_parameter_must_have_an_initializer","virtualStub","ref","tempIndex","builder","SwitchBuilder","overloadInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","n","needsVarargsStub","calledName","getClassOrInterface","addCase","extendees","getAllExtendees","a","b","extendee","removeFunction","render","operandsTostack","isConstZero","Function_0_is_virtual_and_will_not_be_inlined","theOperands","slice","allOptionalsAreConstant","resolved","lastOperand","getSideEffects","SideEffects","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","targetExpression","resolveExpression","indexedGet","isNamed","isSemanticallyAnonymous","FunctionPrototype","nextAnonymousId","contextualSignature","signatureNode","numPresentParameters","parameterNode","isTypeOmitted","thisTypeNode","outer","worked","fname","maybeCompileEnclosingSource","asNullable","Expression_resolves_to_unusual_type_0","_this_cannot_be_referenced_in_constructor_arguments","_super_cannot_be_referenced_in_constructor_arguments","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","lookupIdentifierExpression","localType","globalType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","Expression_refers_to_a_static_element_that_does_not_compile_to_a_value_at_runtime","namedType","resolveTypeName","makeInstanceofClass","expectedType","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","intValue","determineIntegerLiteralType","i64_to_f32","i64_to_f64","compileStringLiteral","compileTemplateLiteral","compileObjectLiteral","numParts","stringType","lhsLen","rhsLen","makeToString","hasPrefix","lhs","rhs","concatMethod","getMethod","exprA","exprB","joinInstance","indexedSetInstance","temps","tsaArrayInstance","templateStringsArrayInstance","first","arraySegment","partExprs","rawExprs","rawHeaderSegment","createCompiledExpression","nativeRange","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","arrayAddress","makeNewArray","arrayTypeRef","dataStartMember","newArrayInstance","bufferSize","newBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","ctorPrototype","constructorPrototype","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","classTypeRef","omittedFields","memberKey","Property_0_does_not_exist_on_type_1","Property_0_is_private_and_only_accessible_within_class_1","PROTECTED","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","resolveClassInclTypeArguments","constructorInstance","baseClass","baseCtor","makeNativeFunctionDeclaration","setResolvedInstance","relatedNode","didCheckFieldInitialization","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","ctorInstance","ctxType","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","Unreachable","PLUS_PLUS","POSTFIX_INC","getLocalSetValue","makeOne","MINUS_MINUS","POSTFIX_DEC","setValue","NegF32","NegF64","PREFIX_INC","PREFIX_DEC","EXCLAMATION","NOT","TILDE","BITWISE_NOT","makeNegOne","TYPEOF","compileTypeof","DOT_DOT_DOT","typeString","REPORT","Extend8I32","Extend16I32","addDebugInfoFile","debugInfoRef","debugLocations","supported","parameterReportNode","v128_zero","ref_null","toStringInstance","toStringSignature","identifierAndSignatureRange","toStringReturnType","makeAllocation","allocInstance","newInstance","thisIndex","thisLocalIndex","nonParameterFields","fieldPrototype","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","mangleInternalName","arg","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","sb","indentLevel","build","indent","typeToString","visitInterface","originalName","TSDBuilder","remainingMembers","isInterface","extendsNode","code","diagnosticCategoryToString","PEDANTIC","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_CYAN","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","DiagnosticMessage","relatedRange","replace","thisRange","otherRange","thisRelatedRange","otherRelatedRange","withRange","withRelatedRange","formatDiagnosticContext","isLineBreak","isColorsEnabled","COLOR_RESET","useColors","showContext","wasColorsEnabled","setColorsEnabled","relatedSource","seenInSource","seenMessagesAtPos","pedanticRelated","infoRelated","warningRelated","ASTBuilder","visitNode","finish","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeNode","visitTypeName","visitStringLiteral","visitArrayLiteralExpression","elements","visitObjectLiteralExpression","visitArguments","numArgs","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitTemplateLiteralExpression","visitRegexpLiteralExpression","visitRawString","quote","visitUnaryExpression","last","lastCharPos","isDefault","serializeExternalModifiers","numImplementsTypes","numMembers","numValues","serializeAccessModifiers","numTypeParameters","firstDeclaration","REST","OPTIONAL","DECLARE","PUBLIC","FlowFlags","ConditionKind","localFlags","thisFieldFlags","inlineFunction","initThisFieldFlags","nextInlineId","resetBreakContext","branch","except","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempFuncrefs","tempExternrefs","tempAnyrefs","tempEqrefs","tempI31refs","tempDatarefs","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","Cannot_redeclare_block_scoped_variable_0","scopedAlias","scope","localsByName","defaultIfInlined","isAnyLocalFlag","actualParent","actualClass","fieldFlags","nextBreakId","stack","breakStack","otherFlags","conditionKind","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","key","before","after","LocalSet","isLocalTee","getLocalSetIndex","iff","If","getIfFalse","getIfCondition","getIfTrue","Unary","getUnaryOp","getUnaryValue","Binary","getBinaryOp","getBinaryLeft","getBinaryRight","exprType","canConversionOverflow","isUnsignedIntegerValue","Extend8I64","Extend16I64","Extend32I64","Load","signed","isLoadSigned","getLoadBytes","Select","getSelectThen","getSelectElse","Call","instancesByName","getCallTarget","levels","formatDiagnosticMessage","Options","alias","DEFAULT_STACK_SIZE","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","FEATURE_GC","FEATURE_MEMORY64","optimizeLevel","shrinkLevel","Program","diagnosticsOffset","getSource","isEntry","parser","parseFile","nextFile","getDependee","util","Auto","ExternalKind","RefAsOp","BrOnOp","useShadowStack","sizeType","hasTemporaryFunction","cachedStringsToPointers","cachedPointersToStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","i64_is","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","_BinaryenRefEq","_last","isWam64","ClzSize","CtzSize","PopcntSize","EqzSize","_BinaryenUnary","AddSize","SubSize","MulSize","DivISize","DivUSize","RemISize","RemUSize","AndSize","OrSize","XorSize","ShlSize","ShrISize","ShrUSize","RotlSize","RotrSize","EqSize","NeSize","LtISize","LtUSize","LeISize","LeUSize","GtISize","GtUSize","GeISize","GeUSize","_BinaryenBinary","_BinaryenMemorySize","_BinaryenMemoryGrow","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","cStr","allocStringCached","_BinaryenGlobalGet","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","replacement","_BinaryenAtomicCmpxchg","timeout","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","allocPtrArray","_BinaryenBlock","single","Return","Throw","singleType","_BinaryenBreak","_BinaryenDrop","ReadsLocal","ReadsGlobal","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","tableName","_BinaryenUnreachable","dest","_BinaryenMemoryCopy","_BinaryenMemoryFill","throw","tagName","_BinaryenThrow","rethrow","_BinaryenRethrow","_BinaryenPop","tuple_make","_BinaryenTupleMake","tuple_extract","tuple","_BinaryenTupleExtract","vec","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","_BinaryenSIMDShuffle","c","_BinaryenSIMDTernary","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenSIMDLoadStoreLane","_BinaryenRefIs","ref_as","_BinaryenRefAs","_BinaryenRefFunc","_BinaryenI31New","_BinaryenI31Get","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","addTag","_BinaryenAddTag","getTag","_BinaryenGetTag","removeTag","_BinaryenRemoveTag","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","hasFunction","addTemporaryFunction","paramTypes","tempName","removeTemporaryFunction","func","_BinaryenSetStart","cStr1","cStr2","_BinaryenAddFunctionExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","addTagExport","_BinaryenAddTagExport","removeExport","_BinaryenRemoveExport","_BinaryenGetExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","_BinaryenAddGlobalImport","addTagImport","_BinaryenAddTagImport","initial","segs","psvs","offs","sizs","cArr1","cArr2","cArr3","cArr4","u32s","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","tableRef","_BinaryenGetTable","_BinaryenTableSetInitial","_BinaryenTableSetMax","_BinaryenAddTable","_BinaryenAddActiveElementSegment","addCustomSection","contents","_BinaryenAddCustomSection","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","getDebugInfo","_BinaryenGetDebugInfo","setDebugInfo","on","_BinaryenSetDebugInfo","getLowMemoryUnused","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","getZeroFilledMemory","_BinaryenGetZeroFilledMemory","setZeroFilledMemory","_BinaryenSetZeroFilledMemory","getFastMath","_BinaryenGetFastMath","setFastMath","_BinaryenSetFastMath","getPassArgument","_BinaryenGetPassArgument","readString","setPassArgument","_BinaryenSetPassArgument","clearPassArguments","_BinaryenClearPassArguments","getAlwaysInlineMaxSize","_BinaryenGetAlwaysInlineMaxSize","setAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","getFlexibleInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","setFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","getOneCallerInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","setOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","getAllowInliningFunctionsWithLoops","_BinaryenGetAllowInliningFunctionsWithLoops","setAllowInliningFunctionsWithLoops","enabled","_BinaryenSetAllowInliningFunctionsWithLoops","getFeatures","_BinaryenModuleGetFeatures","_BinaryenModuleSetFeatures","runPasses","passes","cStrs","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","optimize","debugInfo","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","__i32_load8_u","readBuffer","toText","watFormat","toAsmjs","cached","readStringCached","dispose","_BinaryenModuleDispose","createRelooper","Relooper","_BinaryenExpressionGetId","MemorySize","DataDrop","RefNull","RttCanon","copyExpression","_BinaryenExpressionCopy","maxDepth","maxLoopIterations","runner","_ExpressionRunnerCreate","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalGetGetIndex","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenGlobalGetGetName","_BinaryenBinaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenUnaryGetOp","_BinaryenUnaryGetValue","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadGetPtr","_BinaryenLoadIsSigned","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenMemoryGrowGetDelta","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","_BinaryenTagGetName","_BinaryenTagGetParams","_BinaryenTagGetResults","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","addDefault","labelPostfix","labels","defaultLabel","lastCase","output","Break","numChildren","Dependee","Parser","sources","backlog","seenlog","donelog","onComment","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","dependee","Source","USER","tn","Tokenizer","skip","ENDOFFILE","parseTopLevelStatement","skipStatement","startPos","AT","tokenPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","DEFAULT","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","peek","nextTokenPos","parseEnum","parseVariable","VAR","parseFunction","state","mark","abstractStart","abstractEnd","nextTokenOnNewLine","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","IdentifierHandling","PREFER","parseNamespace","parseExportImport","parseImport","TYPE","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","parseTypeName","readIdentifier","DOT","Identifier_expected","parseType","acceptParenthesized","suppressErrors","token","OPENPAREN","isNullableSignature","tryParseFunctionType","CLOSEPAREN","_0_expected","Unexpected_token","innerType","createNamedType","STRINGLITERAL","parameter","notNullStart","notNull","OPENBRACKET","bracketStart","CLOSEBRACKET","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","COLON","QUESTION","A_rest_parameter_cannot_be_optional","param","createParameter","createOmittedType","EQUALS_GREATERTHAN","createFunctionType","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","SEMICOLON","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","createVariableDeclaration","OPENBRACE","CLOSEBRACE","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","parseReturn","nextToken","createReturnStatement","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","EXTENDS","createTypeParameter","parseParameters","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createFunctionDeclaration","parseFunctionExpression","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","IMPLEMENTS","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","parseClassExpression","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","isGetter","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","ALWAYS","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","createNamespaceDeclaration","parseExportMember","FROM","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","OF","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","ELSE","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","CASE","createSwitchCase","_case_or_default_expected","createThrowStatement","CATCH","FINALLY","createTryStatement","createTypeDeclaration","createVoidStatement","createWhileStatement","parseExpressionStart","YIELD","DELETE","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","TEMPLATELITERAL","parseTemplateLiteral","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","INTEGERLITERAL","readInteger","checkForIdentifierStartAfterNumericLiteral","createIntegerLiteralExpression","FLOATLITERAL","readFloat","createFloatLiteralExpression","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","Unexpected_end_of_text","Expression_expected","Type_argument_list_cannot_be_empty","precedence","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","readStringStart","readStringEnd","readingTemplateString","createTemplateLiteralExpression","potentiallyGeneric","skipBlock","depth","IN","Precedence","FindUsedLocalsVisitor","Visitor","used","visitLocalGet","localGet","visitLocalSet","localSet","singleton","visitor","_currentExpression","currentExpression","parentExpressionOrNull","visitBlock","visitIf","visitLoop","visitBreak","visitSwitch","visitCallPre","visitCall","visitCallIndirectPre","visitCallIndirect","visitGlobalGet","visitGlobalSet","visitLoad","visitStore","visitConst","visitUnary","visitBinary","visitSelect","visitDrop","visitReturn","visitMemorySize","visitMemoryGrow","visitNop","visitUnreachable","visitAtomicRMW","visitAtomicCmpxchg","visitAtomicWait","visitAtomicNotify","visitAtomicFence","visitSIMDExtract","visitSIMDReplace","visitSIMDShuffle","visitSIMDTernary","visitSIMDShift","visitSIMDLoad","visitSIMDLoadStoreLane","visitMemoryInit","visitDataDrop","visitMemoryCopy","visitMemoryFill","visitPop","visitRefNull","visitRefIs","visitRefFunc","visitRefEq","visitTry","visitThrow","visitRethrow","visitTupleMake","visitTupleExtract","visitI31New","visitI31Get","visitCallRef","visitRefTest","visitRefCast","visitBrOn","visitRttCanon","visitRttSub","visitStructNew","visitStructGet","visitStructSet","visitArrayNew","visitArrayGet","visitArraySet","visitArrayLen","visitRefAs","visitName","visitLabel","visitIndex","visitTag","previousExpression","Loop","_BinaryenBreakGetValue","Switch","_BinaryenSwitchGetDefaultName","_BinaryenSwitchGetNumNames","_BinaryenSwitchGetNameAt","_BinaryenSwitchGetCondition","_BinaryenSwitchGetValue","CallIndirect","_BinaryenCallIndirectGetTarget","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","GlobalSet","_BinaryenGlobalSetGetName","_BinaryenGlobalSetGetValue","Store","Drop","MemoryGrow","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","_BinaryenAtomicNotifyGetNotifyCount","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","SIMDLoadStoreLane","_BinaryenSIMDLoadStoreLaneGetPtr","_BinaryenSIMDLoadStoreLaneGetVec","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefIs","_BinaryenRefIsGetValue","RefFunc","_BinaryenRefFuncGetFunc","RefEq","_BinaryenRefEqGetLeft","_BinaryenRefEqGetRight","Try","_BinaryenTryGetBody","numCatchBodies","_BinaryenTryGetNumCatchBodies","_BinaryenTryGetCatchBodyAt","_BinaryenThrowGetTag","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","Rethrow","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","TupleExtract","_BinaryenTupleExtractGetTuple","I31New","_BinaryenI31NewGetValue","I31Get","_BinaryenI31GetGetI31","CallRef","RefTest","RefCast","BrOn","RttSub","StructNew","StructGet","StructSet","ArrayNew","ArrayGet","ArraySet","ArrayLen","RefAs","replaceChild","search","child","_BinaryenBlockSetChildAt","_BinaryenIfSetCondition","_BinaryenIfSetIfTrue","_BinaryenIfSetIfFalse","_BinaryenLoopSetBody","_BinaryenBreakSetCondition","_BinaryenBreakSetValue","_BinaryenSwitchSetCondition","_BinaryenSwitchSetValue","_BinaryenCallSetOperandAt","_BinaryenCallIndirectSetTarget","_BinaryenCallIndirectSetOperandAt","_BinaryenLocalSetSetValue","_BinaryenGlobalSetSetValue","_BinaryenLoadSetPtr","_BinaryenStoreSetPtr","_BinaryenStoreSetValue","_BinaryenUnarySetValue","_BinaryenBinarySetLeft","_BinaryenBinarySetRight","_BinaryenSelectSetIfTrue","_BinaryenSelectSetIfFalse","_BinaryenSelectSetCondition","_BinaryenDropSetValue","_BinaryenReturnSetValue","_BinaryenMemoryGrowSetDelta","_BinaryenAtomicRMWSetPtr","_BinaryenAtomicRMWSetValue","_BinaryenAtomicCmpxchgSetPtr","_BinaryenAtomicCmpxchgSetExpected","repl","_BinaryenAtomicCmpxchgSetReplacement","_BinaryenAtomicWaitSetPtr","_BinaryenAtomicWaitSetExpected","_BinaryenAtomicWaitSetTimeout","_BinaryenAtomicNotifySetPtr","_BinaryenAtomicNotifySetNotifyCount","_BinaryenSIMDExtractSetVec","_BinaryenSIMDReplaceSetVec","_BinaryenSIMDReplaceSetValue","_BinaryenSIMDShuffleSetLeft","_BinaryenSIMDShuffleSetRight","_BinaryenSIMDTernarySetA","_BinaryenSIMDTernarySetB","_BinaryenSIMDTernarySetC","_BinaryenSIMDShiftSetVec","_BinaryenSIMDShiftSetShift","_BinaryenSIMDLoadSetPtr","_BinaryenSIMDLoadStoreLaneSetPtr","_BinaryenSIMDLoadStoreLaneSetVec","_BinaryenMemoryInitSetDest","_BinaryenMemoryInitSetOffset","_BinaryenMemoryInitSetSize","_BinaryenMemoryCopySetDest","_BinaryenMemoryCopySetSource","_BinaryenMemoryCopySetSize","_BinaryenMemoryFillSetDest","_BinaryenMemoryFillSetValue","_BinaryenMemoryFillSetSize","_BinaryenRefIsSetValue","_BinaryenRefEqSetLeft","_BinaryenRefEqSetRight","_BinaryenTrySetBody","catchBody","_BinaryenTrySetCatchBodyAt","_BinaryenThrowSetOperandAt","_BinaryenTupleMakeSetOperandAt","_BinaryenTupleExtractSetTuple","_BinaryenI31NewSetValue","i31Expr","_BinaryenI31GetSetI31","_currentFunction","_currentGlobal","currentFunction","currentGlobal","walkFunctions","walkGlobals","moduleRef","_BinaryenGetNumFunctions","walkFunction","_BinaryenGetFunctionByIndex","_BinaryenGetNumGlobals","walkGlobal","_BinaryenGetGlobalByIndex","init","replaceCurrent","_BinaryenFunctionSetBody","_BinaryenExpressionFinalize","Pass","seenStores","ptrType","checkRT","matchPattern","needsSlot","slotMaps","tempMaps","exportMap","hasStackCheckFunction","callSlotOffset","callSlotStack","ptrSize","ptrBinaryAdd","ptrBinarySub","ptrConst","noteSlot","slotMap","slotIndex","managedOperandIndices","getSharedTemp","tempMap","_BinaryenFunctionGetNumLocals","makeStackOffset","makeStackCheck","makeStackFill","frameSize","remain","nativeSource","updateCallOperands","numSlots","match","callIndirect","updateFunction","numVars","vars","updateExport","exportRef","_BinaryenExportGetKind","internalNameRef","_BinaryenExportGetValue","externalNameRef","_BinaryenExportGetName","expandType","numParams","wrapperName","wrapperNameRef","instrumentReturns","InstrumentReturns","bodyType","parentPass","AL_MASK","AL_SIZE","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","fromDecorator","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","INVALID","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","nextClassId","nextSignatureId","initialized","elementsByDeclaration","wrapperClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_objectInstance","_templateStringsArrayInstance","_allocInstance","_reallocInstance","_freeInstance","_newInstance","_renewInstance","_linkInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_newBufferInstance","_newArrayInstance","_BLOCKInstance","_OBJECTInstance","nativeDummySignature","Resolver","nativeFile","File","requireClass","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","float32ArrayPrototype","float64ArrayPrototype","objectInstance","reallocInstance","freeInstance","renewInstance","collectInstance","typeinfoInstance","BLOCKInstance","blockOverhead","objectOverhead","computeBlockStart","currentOffset","computeBlockSize","payloadSize","blockSize","blockMinsize","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeNamespaceDeclaration","decoratorFlags","registerNativeType","TypeDefinition","registerConstantInteger","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","starExports","foreignFile","lookupForeignFile","ensureExportStar","madeProgress","queuedImport","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","queuedExport","ensureExport","globalElement","isDeclaredElement","registerWrapperClass","thisPrototype","baseElement","basePrototype","Class_0_is_final_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","firstChar","markModuleExports","thisInstanceMembers","baseInstanceMembers","thisMember","baseMember","thisMethod","baseMethod","visibilityEquals","Overload_signatures_must_all_be_public_private_or_protected","overloads","baseMethodInstances","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","nextPrototype","markModuleExport","className","classElement","wrappedType","isIntegerInclReference","Global","registerConstantFloat","ensureGlobal","merged","tryMerge","lookupExport","fileQueuedExports","queuedExportForeignPath","otherFile","checkDecorators","acceptedFlags","fromKind","Duplicate_decorator","ClassPrototype","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","FieldPrototype","addInstance","checkOperatorOverloads","firstArg","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","InterfacePrototype","initializeFieldAsProperty","Namespace","copyMembers","Element","shadowType","FILE","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","isImplicitlyPublic","vis","declaredElements","DeclaredElement","isCompatibleOverride","selfProperty","selfGetter","selfSetter","typedElements","TypedElement","aliasNamespaces","ns","copyExportsToNamespace","ConstantValueKind","VariableLikeElement","i64_zero","boundPrototypes","parentKind","toBound","bound","getResolvedInstance","instanceKey","nameInclTypeParameters","parameterType","parameterName","createParent","registerConcreteElement","getDefaultParameterName","postfix","FIELD_PROTOTYPE","_internalGetterName","_internalSetterName","_internalGetterSignature","_internalSetterSignature","getGetterInstance","getSetterInstance","_isInterface","isBuiltinArray","basePtototype","Class","interfaces","_id","implementers","lengthField","setBase","inheritedTypeArguments","baseName","baseType","addInterface","iface","uncheckedOverload","overhead","baseOffset","typeKind","writeI32AsI64","writeI64AsI32","extendedPrototype","exceptIfMember","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","srcMembers","destMembers","asGlobal","cachedDefaultParameterNames","resolveClassPending","ctxElement","ctxTypes","reportMode","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_cannot_be_nullable","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveBuiltinNotNullableType","parameterTypeNode","returnTypeNode","typeArgumentNode","ensureOneTypeArgument","typeArgument","prev","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","oldCtxTypes","ctxFlow","resolveFunctionInclTypeArguments","typeParameterNames","argumentNodes","argumentExpression","propagateInferredGenericTypes","resolvedTypeArguments","typeParameterNode","inferredType","resolvedDefaultType","Type_argument_expected","ensureResolvedLazyGlobal","isTypedElement","getElementOfType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","targetNode","propertyName","variableLikeElement","wrapper","baseInstance","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_bool","Type_0_is_illegal_in_this_context","superLocal","fltType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","isClass","varType","varElement","thenType","elseType","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","methodOrPropertyName","baseMembers","parentClassInstance","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","boundProperty","boundPropertyInstance","boundPrototype","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","finishResolveClass","unimplemented","ifaceMembers","This_overload_signature_is_not_compatible_with_its_implementation_signature","instanceMemberPrototypes","properties","fieldTypeNode","baseField","Field","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","overloadKind","overloadPrototype","IndexSignature","pending","dependsOnInstance","_values2","Property","tokenFromKeyword","ASYNC","AWAIT","DEBUGGER","IS","KEYOF","MODULE","PACKAGE","WITH","tokenIsAlsoIdentifier","atStart","identifierHandling","unsafeNext","maxTokenLength","chr","isDecimalDigit","commentStartPos","LINE","TRIPLE","closed","testInteger","isIdentifierStart","posBefore","isIdentifierPart","maybeKeywordToken","isWhiteSpace","Invalid_character","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","reusableState","State","isTaggedTemplate","Unterminated_string_literal","readEscapeSequence","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_4","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","readHexFloat","startIfTaggedTemplate","An_identifier_or_keyword_cannot_immediately_follow_a_numeric_literal","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","TypeKind","TypeFlags","_nonNullableType","_nullableType","isVectorValue","nullableType","signednessIsRelevant","currentClass","targetClass","targetFunction","signednessIsImportant","validWat","nullablePostfix","numTypes","signatureTypes","numParameterTypes","typeRefs","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","indices","optionalStart","restIndex","cloneParameterTypes","readI64","i32_as_f32","f32_as_i32","i64_as_f64","valueI64","f64_as_i64","overrides","cloned","v","x","separator","ipos","dirname","origin","COLOR_GRAY","COLOR_GREEN","COLOR_BLUE","COLOR_WHITE","colorsEnabled","isEnabled","color","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","map","mid","midVal","unmanaged","g","wrapModule","emitStackIR","emitText","emitAsmjs","keys","i64_one","i64_neg_one","i64_pow","rightLo","rightHi","i64_div","i64_rem","i64_rem_u","i64_and","i64_or","i64_xor","i64_shr","i64_not","i64_eq","i64_ne","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","minSafeF64","maxSafeF64","i64_is_f64","fround","globalScope","window","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","Infinity","NaN","clz32","round","y","sign","isTrueish","CHUNKSIZE","apply","fromCodePoint","at","charAt","configurable","replacment","split","arraySort","sort","comparator","forEach","Ctr","findLastIndex","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","warn","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","globalThis"],"sourceRoot":""}