// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class AddAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddAllowedStateControllerAddress);
	params: sc.MutableAddAllowedStateControllerAddressParams = new sc.MutableAddAllowedStateControllerAddressParams();
}

export class ClaimChainOwnershipCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncClaimChainOwnership);
}

export class DelegateChainOwnershipCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDelegateChainOwnership);
	params: sc.MutableDelegateChainOwnershipParams = new sc.MutableDelegateChainOwnershipParams();
}

export class RemoveAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRemoveAllowedStateControllerAddress);
	params: sc.MutableRemoveAllowedStateControllerAddressParams = new sc.MutableRemoveAllowedStateControllerAddressParams();
}

export class RotateStateControllerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRotateStateController);
	params: sc.MutableRotateStateControllerParams = new sc.MutableRotateStateControllerParams();
}

export class SetChainInfoCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetChainInfo);
	params: sc.MutableSetChainInfoParams = new sc.MutableSetChainInfoParams();
}

export class SetContractFeeCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetContractFee);
	params: sc.MutableSetContractFeeParams = new sc.MutableSetContractFeeParams();
}

export class SetDefaultFeeCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetDefaultFee);
	params: sc.MutableSetDefaultFeeParams = new sc.MutableSetDefaultFeeParams();
}

export class GetAllowedStateControllerAddressesCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetAllowedStateControllerAddresses);
	results: sc.ImmutableGetAllowedStateControllerAddressesResults = new sc.ImmutableGetAllowedStateControllerAddressesResults();
}

export class GetChainInfoCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetChainInfo);
	results: sc.ImmutableGetChainInfoResults = new sc.ImmutableGetChainInfoResults();
}

export class GetFeeInfoCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetFeeInfo);
	params: sc.MutableGetFeeInfoParams = new sc.MutableGetFeeInfoParams();
	results: sc.ImmutableGetFeeInfoResults = new sc.ImmutableGetFeeInfoResults();
}

export class GetMaxBlobSizeCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetMaxBlobSize);
	results: sc.ImmutableGetMaxBlobSizeResults = new sc.ImmutableGetMaxBlobSizeResults();
}

export class ScFuncs {

    static addAllowedStateControllerAddress(ctx: wasmlib.ScFuncCallContext): AddAllowedStateControllerAddressCall {
        let f = new AddAllowedStateControllerAddressCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static claimChainOwnership(ctx: wasmlib.ScFuncCallContext): ClaimChainOwnershipCall {
        return new ClaimChainOwnershipCall();
    }

    static delegateChainOwnership(ctx: wasmlib.ScFuncCallContext): DelegateChainOwnershipCall {
        let f = new DelegateChainOwnershipCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static removeAllowedStateControllerAddress(ctx: wasmlib.ScFuncCallContext): RemoveAllowedStateControllerAddressCall {
        let f = new RemoveAllowedStateControllerAddressCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static rotateStateController(ctx: wasmlib.ScFuncCallContext): RotateStateControllerCall {
        let f = new RotateStateControllerCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setChainInfo(ctx: wasmlib.ScFuncCallContext): SetChainInfoCall {
        let f = new SetChainInfoCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setContractFee(ctx: wasmlib.ScFuncCallContext): SetContractFeeCall {
        let f = new SetContractFeeCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static setDefaultFee(ctx: wasmlib.ScFuncCallContext): SetDefaultFeeCall {
        let f = new SetDefaultFeeCall();
        f.func.setPtrs(f.params, null);
        return f;
    }

    static getAllowedStateControllerAddresses(ctx: wasmlib.ScViewCallContext): GetAllowedStateControllerAddressesCall {
        let f = new GetAllowedStateControllerAddressesCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static getChainInfo(ctx: wasmlib.ScViewCallContext): GetChainInfoCall {
        let f = new GetChainInfoCall();
        f.func.setPtrs(null, f.results);
        return f;
    }

    static getFeeInfo(ctx: wasmlib.ScViewCallContext): GetFeeInfoCall {
        let f = new GetFeeInfoCall();
        f.func.setPtrs(f.params, f.results);
        return f;
    }

    static getMaxBlobSize(ctx: wasmlib.ScViewCallContext): GetMaxBlobSizeCall {
        let f = new GetMaxBlobSizeCall();
        f.func.setPtrs(null, f.results);
        return f;
    }
}
