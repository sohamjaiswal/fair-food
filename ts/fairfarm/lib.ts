// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export function on_call(index: i32): void {
    return wasmlib.onCall(index);
}

export function on_load(): void {
    let exports = new wasmlib.ScExports();
    exports.addFunc(sc.FuncInit, funcInitThunk);
    exports.addFunc(sc.FuncSetOwner, funcSetOwnerThunk);
    exports.addFunc(sc.FuncTransact, funcTransactThunk);
    exports.addView(sc.ViewGetOwner, viewGetOwnerThunk);

    for (let i = 0; i < sc.keyMap.length; i++) {
        sc.idxMap[i] = wasmlib.Key32.fromString(sc.keyMap[i]);
    }
}

function funcInitThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("farmfair.funcInit");
	let f = new sc.InitContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	sc.funcInit(ctx, f);
	ctx.log("farmfair.funcInit ok");
}

function funcSetOwnerThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("farmfair.funcSetOwner");
    // current owner of this smart contract
	let access = ctx.state().getAgentID(wasmlib.Key32.fromString("owner"));
	ctx.require(access.exists(), "access not set: owner");
	ctx.require(ctx.caller().equals(access.value()), "no permission");

	let f = new sc.SetOwnerContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.owner().exists(), "missing mandatory owner");
	sc.funcSetOwner(ctx, f);
	ctx.log("farmfair.funcSetOwner ok");
}

function funcTransactThunk(ctx: wasmlib.ScFuncContext): void {
	ctx.log("farmfair.funcTransact");
	let f = new sc.TransactContext();
    f.params.mapID = wasmlib.OBJ_ID_PARAMS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	ctx.require(f.params.amount().exists(), "missing mandatory amount");
	ctx.require(f.params.buyer().exists(), "missing mandatory buyer");
	ctx.require(f.params.farmer().exists(), "missing mandatory farmer");
	ctx.require(f.params.retailer().exists(), "missing mandatory retailer");
	sc.funcTransact(ctx, f);
	ctx.log("farmfair.funcTransact ok");
}

function viewGetOwnerThunk(ctx: wasmlib.ScViewContext): void {
	ctx.log("farmfair.viewGetOwner");
	let f = new sc.GetOwnerContext();
    f.results.mapID = wasmlib.OBJ_ID_RESULTS;
    f.state.mapID = wasmlib.OBJ_ID_STATE;
	sc.viewGetOwner(ctx, f);
	ctx.log("farmfair.viewGetOwner ok");
}
